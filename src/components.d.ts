/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  WcsButtonMode,
  WcsButtonShape,
  WcsButtonType,
} from './components/button/button-interface';
import {
  CheckboxChangeEventDetail,
} from './components/checkbox/checkbox-interface';
import {
  SelectChangeEventDetail,
} from './components/select/select-interface';
import {
  SelectOptionChosedEvent,
} from './components/select-option/select-option-interface';
import {
  SwitchChangeEventDetail,
} from './components/switch/switch-interface';
import {
  WcsTabsAlignment,
  WcsTabsChangeEvent,
} from './components/tabs/tabs-interface';

export namespace Components {
  interface WcsActionBar {}
  interface WcsApp {}
  interface WcsBadge {}
  interface WcsButton {
    /**
    * Specify wether the button is disabled or not.
    */
    'disabled': boolean;
    /**
    * Set a URL to point to. If specified use a `a` tag instead of `btn`.
    */
    'href'?: string;
    /**
    * This attribute specify the appearance of the button.
    */
    'mode': WcsButtonMode;
    /**
    * Specify wether the button should have a ripple effect or not.
    */
    'ripple': boolean;
    /**
    * Specify the shape of the button.
    */
    'shape': WcsButtonShape;
    /**
    * Specify the button type.
    */
    'type': WcsButtonType;
  }
  interface WcsCard {}
  interface WcsCardBody {}
  interface WcsCheckbox {
    /**
    * If `true`, the checkbox is selected.
    */
    'checked': boolean;
    /**
    * If `true` the checkbox is in indeterminate state.
    */
    'indeterminate': boolean;
    'name': string;
  }
  interface WcsDropdown {
    'disabled': boolean;
    'mode': WcsButtonMode;
    'shape': WcsButtonShape;
  }
  interface WcsDropdownItem {}
  interface WcsFormField {}
  interface WcsHeader {}
  interface WcsIcon {
    'icon': string;
    'size': 'x5' | 'x75' | '1x' | '1x2' | '1x5' | '1x7' | '2x' | '3x' | '30px' | '50px' | '66px' | '90px' | '96px' | '140px';
  }
  interface WcsModal {
    /**
    * Specifies whether the component should display a backdrop on the entire page
    */
    'backdrop': boolean;
    /**
    * Displays the modal
    */
    'show': boolean;
    'showCloseButton': boolean;
  }
  interface WcsProgressBar {
    /**
    * Whether it displays a label indicating the percentage of progress above the bar.
    */
    'showLabel': boolean;
    /**
    * Whether the component display the small version
    */
    'small': boolean;
    /**
    * The actual value of the progress. Ranging from 0 to 100.
    */
    'value': number;
  }
  interface WcsProgressRadial {
    'showLabel': boolean;
    'size': number;
    'value': number;
  }
  interface WcsSelect {
    /**
    * Close the component.
    */
    'close': () => Promise<void>;
    /**
    * If `true`, the user cannot interact with the select.
    */
    'disabled': boolean;
    /**
    * If `true`, the user can select multiple values at once.
    */
    'multiple': boolean;
    /**
    * The name of the control, which is submitted with the form data.
    */
    'name'?: string;
    /**
    * Open the component.
    */
    'open': () => Promise<void>;
    /**
    * The text to display when the select is empty.
    */
    'placeholder'?: string | null;
    /**
    * The currently selected value.
    */
    'value'?: any | null;
  }
  interface WcsSelectOption {
    /**
    * Wether this option can be selected.
    */
    'disabled': boolean;
    /**
    * This property musn't be set by hand, it is used by the `wcs-select` component. If you want a multiple select, set `multiple` attribute on the parent select instead.
    * @ignore
    */
    'multiple': boolean;
    /**
    * Wether this option is selected.
    */
    'selected': boolean;
    /**
    * The option value, not what's displayed, use inner text instead.
    */
    'value'?: any;
  }
  interface WcsSidebar {}
  interface WcsSpinner {
    /**
    * Indicates the spinner display mode. Accepted values: `border` or `growing`
    */
    'mode': 'border' | 'growing';
  }
  interface WcsSwitch {
    /**
    * If `true`, the switch is selected.
    */
    'checked': boolean;
    'name': string;
  }
  interface WcsTab {
    /**
    * The header you want to be displayed for this tab.
    */
    'header': string;
  }
  interface WcsTabs {
    'align': WcsTabsAlignment;
    /**
    * Current selected tab index
    */
    'selectedIndex': number;
  }
}

declare global {


  interface HTMLWcsActionBarElement extends Components.WcsActionBar, HTMLStencilElement {}
  var HTMLWcsActionBarElement: {
    prototype: HTMLWcsActionBarElement;
    new (): HTMLWcsActionBarElement;
  };

  interface HTMLWcsAppElement extends Components.WcsApp, HTMLStencilElement {}
  var HTMLWcsAppElement: {
    prototype: HTMLWcsAppElement;
    new (): HTMLWcsAppElement;
  };

  interface HTMLWcsBadgeElement extends Components.WcsBadge, HTMLStencilElement {}
  var HTMLWcsBadgeElement: {
    prototype: HTMLWcsBadgeElement;
    new (): HTMLWcsBadgeElement;
  };

  interface HTMLWcsButtonElement extends Components.WcsButton, HTMLStencilElement {}
  var HTMLWcsButtonElement: {
    prototype: HTMLWcsButtonElement;
    new (): HTMLWcsButtonElement;
  };

  interface HTMLWcsCardElement extends Components.WcsCard, HTMLStencilElement {}
  var HTMLWcsCardElement: {
    prototype: HTMLWcsCardElement;
    new (): HTMLWcsCardElement;
  };

  interface HTMLWcsCardBodyElement extends Components.WcsCardBody, HTMLStencilElement {}
  var HTMLWcsCardBodyElement: {
    prototype: HTMLWcsCardBodyElement;
    new (): HTMLWcsCardBodyElement;
  };

  interface HTMLWcsCheckboxElement extends Components.WcsCheckbox, HTMLStencilElement {}
  var HTMLWcsCheckboxElement: {
    prototype: HTMLWcsCheckboxElement;
    new (): HTMLWcsCheckboxElement;
  };

  interface HTMLWcsDropdownElement extends Components.WcsDropdown, HTMLStencilElement {}
  var HTMLWcsDropdownElement: {
    prototype: HTMLWcsDropdownElement;
    new (): HTMLWcsDropdownElement;
  };

  interface HTMLWcsDropdownItemElement extends Components.WcsDropdownItem, HTMLStencilElement {}
  var HTMLWcsDropdownItemElement: {
    prototype: HTMLWcsDropdownItemElement;
    new (): HTMLWcsDropdownItemElement;
  };

  interface HTMLWcsFormFieldElement extends Components.WcsFormField, HTMLStencilElement {}
  var HTMLWcsFormFieldElement: {
    prototype: HTMLWcsFormFieldElement;
    new (): HTMLWcsFormFieldElement;
  };

  interface HTMLWcsHeaderElement extends Components.WcsHeader, HTMLStencilElement {}
  var HTMLWcsHeaderElement: {
    prototype: HTMLWcsHeaderElement;
    new (): HTMLWcsHeaderElement;
  };

  interface HTMLWcsIconElement extends Components.WcsIcon, HTMLStencilElement {}
  var HTMLWcsIconElement: {
    prototype: HTMLWcsIconElement;
    new (): HTMLWcsIconElement;
  };

  interface HTMLWcsModalElement extends Components.WcsModal, HTMLStencilElement {}
  var HTMLWcsModalElement: {
    prototype: HTMLWcsModalElement;
    new (): HTMLWcsModalElement;
  };

  interface HTMLWcsProgressBarElement extends Components.WcsProgressBar, HTMLStencilElement {}
  var HTMLWcsProgressBarElement: {
    prototype: HTMLWcsProgressBarElement;
    new (): HTMLWcsProgressBarElement;
  };

  interface HTMLWcsProgressRadialElement extends Components.WcsProgressRadial, HTMLStencilElement {}
  var HTMLWcsProgressRadialElement: {
    prototype: HTMLWcsProgressRadialElement;
    new (): HTMLWcsProgressRadialElement;
  };

  interface HTMLWcsSelectElement extends Components.WcsSelect, HTMLStencilElement {}
  var HTMLWcsSelectElement: {
    prototype: HTMLWcsSelectElement;
    new (): HTMLWcsSelectElement;
  };

  interface HTMLWcsSelectOptionElement extends Components.WcsSelectOption, HTMLStencilElement {}
  var HTMLWcsSelectOptionElement: {
    prototype: HTMLWcsSelectOptionElement;
    new (): HTMLWcsSelectOptionElement;
  };

  interface HTMLWcsSidebarElement extends Components.WcsSidebar, HTMLStencilElement {}
  var HTMLWcsSidebarElement: {
    prototype: HTMLWcsSidebarElement;
    new (): HTMLWcsSidebarElement;
  };

  interface HTMLWcsSpinnerElement extends Components.WcsSpinner, HTMLStencilElement {}
  var HTMLWcsSpinnerElement: {
    prototype: HTMLWcsSpinnerElement;
    new (): HTMLWcsSpinnerElement;
  };

  interface HTMLWcsSwitchElement extends Components.WcsSwitch, HTMLStencilElement {}
  var HTMLWcsSwitchElement: {
    prototype: HTMLWcsSwitchElement;
    new (): HTMLWcsSwitchElement;
  };

  interface HTMLWcsTabElement extends Components.WcsTab, HTMLStencilElement {}
  var HTMLWcsTabElement: {
    prototype: HTMLWcsTabElement;
    new (): HTMLWcsTabElement;
  };

  interface HTMLWcsTabsElement extends Components.WcsTabs, HTMLStencilElement {}
  var HTMLWcsTabsElement: {
    prototype: HTMLWcsTabsElement;
    new (): HTMLWcsTabsElement;
  };
  interface HTMLElementTagNameMap {
    'wcs-action-bar': HTMLWcsActionBarElement;
    'wcs-app': HTMLWcsAppElement;
    'wcs-badge': HTMLWcsBadgeElement;
    'wcs-button': HTMLWcsButtonElement;
    'wcs-card': HTMLWcsCardElement;
    'wcs-card-body': HTMLWcsCardBodyElement;
    'wcs-checkbox': HTMLWcsCheckboxElement;
    'wcs-dropdown': HTMLWcsDropdownElement;
    'wcs-dropdown-item': HTMLWcsDropdownItemElement;
    'wcs-form-field': HTMLWcsFormFieldElement;
    'wcs-header': HTMLWcsHeaderElement;
    'wcs-icon': HTMLWcsIconElement;
    'wcs-modal': HTMLWcsModalElement;
    'wcs-progress-bar': HTMLWcsProgressBarElement;
    'wcs-progress-radial': HTMLWcsProgressRadialElement;
    'wcs-select': HTMLWcsSelectElement;
    'wcs-select-option': HTMLWcsSelectOptionElement;
    'wcs-sidebar': HTMLWcsSidebarElement;
    'wcs-spinner': HTMLWcsSpinnerElement;
    'wcs-switch': HTMLWcsSwitchElement;
    'wcs-tab': HTMLWcsTabElement;
    'wcs-tabs': HTMLWcsTabsElement;
  }
}

declare namespace LocalJSX {
  interface WcsActionBar extends JSXBase.HTMLAttributes<HTMLWcsActionBarElement> {}
  interface WcsApp extends JSXBase.HTMLAttributes<HTMLWcsAppElement> {}
  interface WcsBadge extends JSXBase.HTMLAttributes<HTMLWcsBadgeElement> {}
  interface WcsButton extends JSXBase.HTMLAttributes<HTMLWcsButtonElement> {
    /**
    * Specify wether the button is disabled or not.
    */
    'disabled'?: boolean;
    /**
    * Set a URL to point to. If specified use a `a` tag instead of `btn`.
    */
    'href'?: string;
    /**
    * This attribute specify the appearance of the button.
    */
    'mode'?: WcsButtonMode;
    /**
    * Specify wether the button should have a ripple effect or not.
    */
    'ripple'?: boolean;
    /**
    * Specify the shape of the button.
    */
    'shape'?: WcsButtonShape;
    /**
    * Specify the button type.
    */
    'type'?: WcsButtonType;
  }
  interface WcsCard extends JSXBase.HTMLAttributes<HTMLWcsCardElement> {}
  interface WcsCardBody extends JSXBase.HTMLAttributes<HTMLWcsCardBodyElement> {}
  interface WcsCheckbox extends JSXBase.HTMLAttributes<HTMLWcsCheckboxElement> {
    /**
    * If `true`, the checkbox is selected.
    */
    'checked'?: boolean;
    /**
    * If `true` the checkbox is in indeterminate state.
    */
    'indeterminate'?: boolean;
    'name'?: string;
    /**
    * Emitted when the checked property has changed.
    */
    'onWcsChange'?: (event: CustomEvent<CheckboxChangeEventDetail>) => void;
  }
  interface WcsDropdown extends JSXBase.HTMLAttributes<HTMLWcsDropdownElement> {
    'disabled'?: boolean;
    'mode'?: WcsButtonMode;
    'shape'?: WcsButtonShape;
  }
  interface WcsDropdownItem extends JSXBase.HTMLAttributes<HTMLWcsDropdownItemElement> {
    'onWcsDropdownItemClick'?: (event: CustomEvent<void>) => void;
  }
  interface WcsFormField extends JSXBase.HTMLAttributes<HTMLWcsFormFieldElement> {}
  interface WcsHeader extends JSXBase.HTMLAttributes<HTMLWcsHeaderElement> {}
  interface WcsIcon extends JSXBase.HTMLAttributes<HTMLWcsIconElement> {
    'icon'?: string;
    'size'?: 'x5' | 'x75' | '1x' | '1x2' | '1x5' | '1x7' | '2x' | '3x' | '30px' | '50px' | '66px' | '90px' | '96px' | '140px';
  }
  interface WcsModal extends JSXBase.HTMLAttributes<HTMLWcsModalElement> {
    /**
    * Specifies whether the component should display a backdrop on the entire page
    */
    'backdrop'?: boolean;
    /**
    * Triggered when the user leaves the dialog with the closing button.
    */
    'onWcs-dialog-closed'?: (event: CustomEvent<void>) => void;
    /**
    * Displays the modal
    */
    'show'?: boolean;
    'showCloseButton'?: boolean;
  }
  interface WcsProgressBar extends JSXBase.HTMLAttributes<HTMLWcsProgressBarElement> {
    /**
    * Whether it displays a label indicating the percentage of progress above the bar.
    */
    'showLabel'?: boolean;
    /**
    * Whether the component display the small version
    */
    'small'?: boolean;
    /**
    * The actual value of the progress. Ranging from 0 to 100.
    */
    'value'?: number;
  }
  interface WcsProgressRadial extends JSXBase.HTMLAttributes<HTMLWcsProgressRadialElement> {
    'showLabel'?: boolean;
    'size'?: number;
    'value'?: number;
  }
  interface WcsSelect extends JSXBase.HTMLAttributes<HTMLWcsSelectElement> {
    /**
    * If `true`, the user cannot interact with the select.
    */
    'disabled'?: boolean;
    /**
    * If `true`, the user can select multiple values at once.
    */
    'multiple'?: boolean;
    /**
    * The name of the control, which is submitted with the form data.
    */
    'name'?: string;
    /**
    * Emitted when the select loses focus.
    */
    'onWcsBlur'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the value has changed.
    */
    'onWcsChange'?: (event: CustomEvent<SelectChangeEventDetail>) => void;
    /**
    * Emitted when the select has focus.
    */
    'onWcsFocus'?: (event: CustomEvent<void>) => void;
    /**
    * The text to display when the select is empty.
    */
    'placeholder'?: string | null;
    /**
    * The currently selected value.
    */
    'value'?: any | null;
  }
  interface WcsSelectOption extends JSXBase.HTMLAttributes<HTMLWcsSelectOptionElement> {
    /**
    * Wether this option can be selected.
    */
    'disabled'?: boolean;
    'onWcsSelectOptionClick'?: (event: CustomEvent<SelectOptionChosedEvent>) => void;
    /**
    * Wether this option is selected.
    */
    'selected'?: boolean;
    /**
    * The option value, not what's displayed, use inner text instead.
    */
    'value'?: any;
  }
  interface WcsSidebar extends JSXBase.HTMLAttributes<HTMLWcsSidebarElement> {}
  interface WcsSpinner extends JSXBase.HTMLAttributes<HTMLWcsSpinnerElement> {
    /**
    * Indicates the spinner display mode. Accepted values: `border` or `growing`
    */
    'mode'?: 'border' | 'growing';
  }
  interface WcsSwitch extends JSXBase.HTMLAttributes<HTMLWcsSwitchElement> {
    /**
    * If `true`, the switch is selected.
    */
    'checked'?: boolean;
    'name'?: string;
    /**
    * Emitted when the checked property has changed.
    */
    'onWcsChange'?: (event: CustomEvent<SwitchChangeEventDetail>) => void;
  }
  interface WcsTab extends JSXBase.HTMLAttributes<HTMLWcsTabElement> {
    /**
    * The header you want to be displayed for this tab.
    */
    'header'?: string;
  }
  interface WcsTabs extends JSXBase.HTMLAttributes<HTMLWcsTabsElement> {
    'align'?: WcsTabsAlignment;
    /**
    * Emitted when the selected tab change
    */
    'onWcsTabsChange'?: (event: CustomEvent<WcsTabsChangeEvent>) => void;
    /**
    * Current selected tab index
    */
    'selectedIndex'?: number;
  }

  interface IntrinsicElements {
    'wcs-action-bar': WcsActionBar;
    'wcs-app': WcsApp;
    'wcs-badge': WcsBadge;
    'wcs-button': WcsButton;
    'wcs-card': WcsCard;
    'wcs-card-body': WcsCardBody;
    'wcs-checkbox': WcsCheckbox;
    'wcs-dropdown': WcsDropdown;
    'wcs-dropdown-item': WcsDropdownItem;
    'wcs-form-field': WcsFormField;
    'wcs-header': WcsHeader;
    'wcs-icon': WcsIcon;
    'wcs-modal': WcsModal;
    'wcs-progress-bar': WcsProgressBar;
    'wcs-progress-radial': WcsProgressRadial;
    'wcs-select': WcsSelect;
    'wcs-select-option': WcsSelectOption;
    'wcs-sidebar': WcsSidebar;
    'wcs-spinner': WcsSpinner;
    'wcs-switch': WcsSwitch;
    'wcs-tab': WcsTab;
    'wcs-tabs': WcsTabs;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


