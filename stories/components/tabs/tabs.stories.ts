import { Meta, StoryFn, StoryObj } from '@storybook/web-components';
import { html } from 'lit-html';
import { WcsTabChangeEvent, WcsTabsAlignment } from '../../../src/components/tabs/tabs-interface';
// @ts-ignore
import { getComponentArgs } from '../../utils/args-generation';

const meta: Meta = {
    title: 'Components/Tabs',
    component: 'wcs-tabs',
    argTypes: getComponentArgs('wcs-tabs'),
    parameters: {
        actions: {
            handles: [
                'tabChange'
            ]
        }
    },
    subcomponents: {
        'WcsTab': 'wcs-tab'
    }
};

export default meta;

interface TabsStoryArgs {
    align: WcsTabsAlignment,
    selectedIndex: number,
    selectedKey: any,
    headersOnly: boolean,
    gutter: boolean
}

const Template: StoryFn<Partial<TabsStoryArgs>> = (args) => html`
    <wcs-tabs accessibility-label= ${"Tabs par défaut"}
              align=${args.align}
              .selectedIndex=${args.selectedIndex}
              .selectedKey=${args.selectedKey}
              ?headersOnly=${args.headersOnly}
              ?gutter=${args.gutter}>
        <wcs-tab header="Premier onglet" item-key="firstTab">
            Premier contenu
        </wcs-tab>
        <wcs-tab header="Deuxième onglet" item-key="secondTab">
            Deuxième contenu
        </wcs-tab>
    </wcs-tabs>
`;

export const Default: StoryObj<TabsStoryArgs> = {
    render: (args: TabsStoryArgs) => Template(args, this)
};

export const WithGutter: StoryObj<TabsStoryArgs> = {
    ...Default,
    args: {
        gutter: true
    }
};
function tabChangeHandler(event: CustomEvent<WcsTabChangeEvent>) {
    let content = '';
    if (event.detail.selectedKey === 'firstTab') content = 'Contenu du premier onglet';
    if (event.detail.selectedKey === 'secondTab') content = 'Contenu du deuxieme onglet';
    document.getElementById('tab-content').innerText = content;
}

const TemplateHeadersOnly: StoryFn<Partial<{}>> = (_) => html`
    <!-- Method 'tabChangeHandler' used to change the '#tab-content' div content -->
    <wcs-tabs accessibility-label=${"Tabs avec évènement se déclenchant au moment du changement d'onget"}
    id="tabs-custom-content"
    headers-only
    selected-key="firstTab"
    @tabChange=${event => tabChangeHandler(event)}>
    <wcs-tab header="Premier onglet" item-key="firstTab"></wcs-tab>
    <wcs-tab header="Deuxième onglet" item-key="secondTab"></wcs-tab>
    </wcs-tabs>

    <div id="tab-content">
        Contenu du premier onglet
    </div>
`;

/**
 * The headers only mode allows you to manage the display of tab content on the client side using the `tabChange` event.
 *
 * You can use the indexes automatically generated by the component or set keys for each tab manually. Keys are also
 * present in the event.
 */
export const HeadersOnly: StoryObj<TabsStoryArgs> = {
    render: (args: TabsStoryArgs) => TemplateHeadersOnly(args, this),
};

const TemplateScrollableTabs: StoryFn<Partial<{}>> = (_) => html`
    <wcs-tabs accessibility-label= ${"Tabs avec un header scrollable"}>
        <wcs-tab header="Premier">Premier contenu</wcs-tab>
        <wcs-tab header="Deuxième">Deuxième contenu</wcs-tab>
        <wcs-tab header="Troisième">Troisième contenu</wcs-tab>
        <wcs-tab header="Quatrième">Quatrième contenu</wcs-tab>
        <wcs-tab header="Cinquième">Cinquième contenu</wcs-tab>
        <wcs-tab header="Sixième">Sixième contenu</wcs-tab>
        <wcs-tab header="Septième">Septième contenu</wcs-tab>
        <wcs-tab header="Huitième">Huitième contenu</wcs-tab>
        <wcs-tab header="Neuvième">Neuvième contenu</wcs-tab>
        <wcs-tab header="Dixième">Dixième contenu</wcs-tab>
        <wcs-tab header="Onzième">Onzième contenu</wcs-tab>
        <wcs-tab header="Douzième">Douzième contenu</wcs-tab>
        <wcs-tab header="Treizième">Treizième contenu</wcs-tab>
        <wcs-tab header="Quatorzième">Quatorzième contenu</wcs-tab>
        <wcs-tab header="Quinzième">Quinzième contenu</wcs-tab>
        <wcs-tab header="Seizième">Seizième contenu</wcs-tab>
        <wcs-tab header="Dix-septième">Dix-septième contenu</wcs-tab>
        <wcs-tab header="Dix-huitième">Dix-huitième contenu</wcs-tab>
        <wcs-tab header="Dix-neuvième">Dix-neuvième contenu</wcs-tab>
        <wcs-tab header="Vingtième">Vingtième contenu</wcs-tab>
    </wcs-tabs>
`;

export const ScrollableTabs: StoryObj<TabsStoryArgs> = {
    render: (args: TabsStoryArgs) => TemplateScrollableTabs(args, this)
};
ScrollableTabs.args = {};

let tabId = 0;

function addTab() {
    const opt = document.createElement('wcs-tab');
    opt.setAttribute('header', 'Onglet ' + ++tabId);
    opt.appendChild(document.createTextNode('Contenu onglet ' + tabId));
    document.querySelector('#lazy-loaded-tabs-component').appendChild(opt);
}

const TemplateLazyLoadedTabs: StoryFn<Partial<{}>> = (_) => html`
    <!-- Method 'addTab' used to dynamically add a tab -->
    <wcs-button @click=${_ => addTab()}>Add tab</wcs-button>

    <wcs-tabs id="lazy-loaded-tabs-component" label="Tabs avec onglets dynamiques" gutter="true">
        <wcs-tab header="Onglet ${++tabId}">Contenu onglet ${tabId}</wcs-tab>
    </wcs-tabs>
`;

/**
 * You can add `wcs-tab` dynamically to `wcs-tabs`:
 * 
 * ```javascript
 * const wcsTabs = document.querySelector('wcs-tabs');
 * 
 * const wcsTab = document.createElement('wcs-tab');
 * wcsTab.setAttribute('header', 'Onglet');
 * wcsTab.appendChild(document.createTextNode('Contenu onglet'));
 * 
 * wcsTabs.appendChild(tab);
 * ```
 */
export const LazyLoadedTabs: StoryObj<TabsStoryArgs> = {
    render: (args: TabsStoryArgs) => TemplateLazyLoadedTabs(args, this)
};
