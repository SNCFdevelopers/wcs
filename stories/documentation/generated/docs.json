{
  "timestamp": "2024-06-11T15:39:46",
  "compiler": {
    "name": "@stencil/core",
    "version": "4.17.2",
    "typescriptVersion": "5.4.5"
  },
  "components": [
    {
      "filePath": "src/components/accordion/accordion.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-accordion",
      "readme": "# wcs-accordion\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "groupContentWithHeader",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "group-content-with-header",
          "reflectToAttr": true,
          "docs": "Specifies wether accordion-panel components should group the content with header in one card\r\nif true, there will be only one card with the header and the content\r\nNothing change when the panel is close",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideActionText",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-action-text",
          "reflectToAttr": true,
          "docs": "Specifies whether accordion-panel components should display the open/close text.\r\nif false, it won't show the open/close text in all accordion-panel.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "highlight",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "highlight",
          "reflectToAttr": true,
          "docs": "Specifies whether accordion-panel components should highlight when open with primary color.\r\nif true, the background color of the accordion-panel will be the primary color.\r\nif false, the background color of the accordion-panel will be wcs-light.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "wcsOpenChange",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/accordion-content/accordion-content.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-accordion-content",
      "readme": "# wcs-accordion-content\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/accordion-header/accordion-header.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-accordion-header",
      "readme": "# wcs-accordion-header\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/accordion-panel/accordion-panel.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-accordion-panel",
      "readme": "# wcs-accordion-panel\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "groupContentWithHeader",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "group-content-with-header",
          "reflectToAttr": true,
          "docs": "Specifies wether the component should group the content with header in one card\r\nif true, there will be only one card with the header and the content\r\nNothing change when the panel is close",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideActionText",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-action-text",
          "reflectToAttr": true,
          "docs": "Specifies whether the component should display the open/close text.\r\nif false, it won't show the open/close text.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "highlight",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "highlight",
          "reflectToAttr": true,
          "docs": "Specifies whether the component should highlight when open with primary color.\r\nif true, the background color will be the primary color.\r\nif false, the background color will be wcs-light.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "close() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "wcsOpenChange",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/action-bar/action-bar.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-action-bar",
      "readme": "# Action bar\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "gutter",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "gutter",
          "reflectToAttr": false,
          "docs": "Determines if the action bar should have a border at the bottom.\r\nYou should not use this property if a gutter is already present on tabs",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/app/app.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-app",
      "readme": "# App\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/badge/badge.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-badge",
      "readme": "# Badge\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"initial\" | \"lighter\"",
          "complexType": {
            "original": "BadgeColor",
            "resolved": "\"initial\" | \"lighter\"",
            "references": {
              "BadgeColor": {
                "location": "import",
                "path": "./badge-interface",
                "id": "src/components/badge/badge-interface.ts::BadgeColor"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Allows you to change the color of the badge to make it less bright (based on the color chosen by the CSS class).",
          "docsTags": [],
          "default": "'initial'",
          "values": [
            {
              "value": "initial",
              "type": "string"
            },
            {
              "value": "lighter",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "shape",
          "type": "\"normal\" | \"rounded\"",
          "complexType": {
            "original": "BadgeShape",
            "resolved": "\"normal\" | \"rounded\"",
            "references": {
              "BadgeShape": {
                "location": "import",
                "path": "./badge-interface",
                "id": "src/components/badge/badge-interface.ts::BadgeShape"
              }
            }
          },
          "mutable": false,
          "attr": "shape",
          "reflectToAttr": false,
          "docs": "Define the shape of the badge",
          "docsTags": [],
          "default": "'normal'",
          "values": [
            {
              "value": "normal",
              "type": "string"
            },
            {
              "value": "rounded",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "BadgeSize",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "BadgeSize": {
                "location": "import",
                "path": "./badge-interface",
                "id": "src/components/badge/badge-interface.ts::BadgeSize"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "Specify the size of the badge.",
          "docsTags": [],
          "default": "'m'",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/button/button.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-button",
      "readme": "# Button\r\n\r",
      "docs": "Button component, can also be a link when specifying href.\r\n\r\n## Click event\r\n\r\nThe WCS button relies on the native click event to pass a user click to your app.\r\nFor now, it's not possible for us to prevent the click event to be fired when the button's disabled attribute is true.\r\nThis means you'll receive click events on a disabled wcs button.\r\nIf you're using the button with a library like Angular or React, they have internal mechanisms to prevent this behavior. Your callbacks will therefore not be called.\r\nTo fix this problem, we plan to provide a wcsClick event in addition to the native click for applications developed without frameworks.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Specify whether the button is disabled or not.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "Set a URL to point to.<br/>\r\nIf specified use a `a` tag instead of `btn`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "loading",
          "reflectToAttr": false,
          "docs": "Flag to display spinner until the end of action",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"clear\" | \"plain\" | \"stroked\"",
          "complexType": {
            "original": "WcsButtonMode",
            "resolved": "\"clear\" | \"plain\" | \"stroked\"",
            "references": {
              "WcsButtonMode": {
                "location": "import",
                "path": "./button-interface",
                "id": "src/components/button/button-interface.ts::WcsButtonMode"
              }
            }
          },
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": true,
          "docs": "This attribute specify the appearance of the button.",
          "docsTags": [],
          "default": "'plain'",
          "values": [
            {
              "value": "clear",
              "type": "string"
            },
            {
              "value": "plain",
              "type": "string"
            },
            {
              "value": "stroked",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "ripple",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "ripple",
          "reflectToAttr": false,
          "docs": "Specify whether the button should have a ripple effect or not.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "shape",
          "type": "\"normal\" | \"round\" | \"square\"",
          "complexType": {
            "original": "WcsButtonShape",
            "resolved": "\"normal\" | \"round\" | \"square\"",
            "references": {
              "WcsButtonShape": {
                "location": "import",
                "path": "./button-interface",
                "id": "src/components/button/button-interface.ts::WcsButtonShape"
              }
            }
          },
          "mutable": false,
          "attr": "shape",
          "reflectToAttr": true,
          "docs": "Specify the shape of the button.",
          "docsTags": [],
          "default": "'normal'",
          "values": [
            {
              "value": "normal",
              "type": "string"
            },
            {
              "value": "round",
              "type": "string"
            },
            {
              "value": "square",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "WcsButtonSize",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "WcsButtonSize": {
                "location": "import",
                "path": "./button-interface",
                "id": "src/components/button/button-interface.ts::WcsButtonSize"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "Specify the size of the button.",
          "docsTags": [],
          "default": "'m'",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "\"_blank\" | \"_self\"",
          "complexType": {
            "original": "'_blank' | '_self'",
            "resolved": "\"_blank\" | \"_self\"",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "Specifies where to open the linked document when using href (see prop above)<br/>\r\nDefault '_self' will open the linked document in the same frame as it was clicked",
          "docsTags": [],
          "values": [
            {
              "value": "_blank",
              "type": "string"
            },
            {
              "value": "_self",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "type",
          "type": "\"button\" | \"submit\"",
          "complexType": {
            "original": "WcsButtonType",
            "resolved": "\"button\" | \"submit\"",
            "references": {
              "WcsButtonType": {
                "location": "import",
                "path": "./button-interface",
                "id": "src/components/button/button-interface.ts::WcsButtonType"
              }
            }
          },
          "mutable": true,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Specify the button type.",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "click",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "wcs-counter",
        "wcs-dropdown",
        "wcs-grid",
        "wcs-grid-pagination",
        "wcs-horizontal-stepper",
        "wcs-modal"
      ],
      "dependencies": [
        "wcs-spinner"
      ],
      "dependencyGraph": {
        "wcs-button": [
          "wcs-spinner"
        ],
        "wcs-counter": [
          "wcs-button"
        ],
        "wcs-dropdown": [
          "wcs-button"
        ],
        "wcs-grid": [
          "wcs-button"
        ],
        "wcs-grid-pagination": [
          "wcs-button"
        ],
        "wcs-horizontal-stepper": [
          "wcs-button"
        ],
        "wcs-modal": [
          "wcs-button"
        ]
      }
    },
    {
      "filePath": "src/components/card/card.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-card",
      "readme": "# Card\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "mode",
          "type": "\"flat\" | \"raised\"",
          "complexType": {
            "original": "CardMode",
            "resolved": "\"flat\" | \"raised\"",
            "references": {
              "CardMode": {
                "location": "import",
                "path": "./card-interface",
                "id": "src/components/card/card-interface.ts::CardMode"
              }
            }
          },
          "mutable": true,
          "attr": "mode",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "'raised'",
          "values": [
            {
              "value": "flat",
              "type": "string"
            },
            {
              "value": "raised",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/card-body/card-body.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-card-body",
      "readme": "# Card body\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/checkbox/checkbox.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-checkbox",
      "readme": "# Checkbox\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "If `true`, the checkbox is selected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Specify wether the checkbox is disabled or not.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "indeterminate",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "indeterminate",
          "reflectToAttr": true,
          "docs": "If `true` the checkbox is in indeterminate state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelAlignment",
          "type": "\"bottom\" | \"center\" | \"top\"",
          "complexType": {
            "original": "CheckboxLabelAlignment",
            "resolved": "\"bottom\" | \"center\" | \"top\"",
            "references": {
              "CheckboxLabelAlignment": {
                "location": "import",
                "path": "./checkbox-interface",
                "id": "src/components/checkbox/checkbox-interface.ts::CheckboxLabelAlignment"
              }
            }
          },
          "mutable": true,
          "attr": "label-alignment",
          "reflectToAttr": true,
          "docs": "Specifie the alignment of the checkbox with the label content",
          "docsTags": [],
          "default": "'center'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "this.checkboxId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setAriaAttribute",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(attr: AriaAttributeName, value: string) => Promise<void>",
            "parameters": [
              {
                "name": "attr",
                "type": "\"role\" | `aria-${string}`",
                "docs": ""
              },
              {
                "name": "value",
                "type": "string",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "AriaAttributeName": {
                "location": "import",
                "path": "../../utils/mutable-aria-attribute",
                "id": "src/utils/mutable-aria-attribute.ts::AriaAttributeName"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setAriaAttribute(attr: AriaAttributeName, value: string) => Promise<void>",
          "parameters": [
            {
              "name": "attr",
              "type": "\"role\" | `aria-${string}`",
              "docs": ""
            },
            {
              "name": "value",
              "type": "string",
              "docs": ""
            }
          ],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "wcsChange",
          "detail": "CheckboxChangeEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "CheckboxChangeEventDetail",
            "resolved": "CheckboxChangeEventDetail",
            "references": {
              "CheckboxChangeEventDetail": {
                "location": "import",
                "path": "./checkbox-interface",
                "id": "src/components/checkbox/checkbox-interface.ts::CheckboxChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the checked property has changed.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "wcs-grid",
        "wcs-select-option"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "wcs-grid": [
          "wcs-checkbox"
        ],
        "wcs-select-option": [
          "wcs-checkbox"
        ]
      }
    },
    {
      "filePath": "src/components/com-nav/com-nav.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-com-nav",
      "readme": "# Communication Navbar\r\n\r\nThis component is the implementation of the navigation bar dedicated to communication design.\r\n\r\n```html\r\n\r\n\r\n```\r\n\r",
      "docs": "This component is the implementation of the navigation bar dedicated to communication design.\r\n\r\n```html\r\n\r\n\r\n```",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "appName",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "app-name",
          "reflectToAttr": false,
          "docs": "Name of the application to be displayed in the menu bar",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "wcsClickOnFinalAction",
          "capture": false,
          "passive": false
        },
        {
          "event": "wcsCategoryItemClicked",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/com-nav-category/com-nav-category.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-com-nav-category",
      "readme": "# wcs-com-nav-category\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "close() => Promise<void>",
          "parameters": [],
          "docs": "Close the category",
          "docsTags": []
        },
        {
          "name": "open",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "open() => Promise<void>",
          "parameters": [],
          "docs": "Opens the category",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "wcsCategoryItemClicked",
          "detail": "UIEvent",
          "bubbles": true,
          "complexType": {
            "original": "UIEvent",
            "resolved": "UIEvent",
            "references": {
              "UIEvent": {
                "location": "global",
                "id": "global::UIEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "wcsCategoryOpened",
          "detail": "CategoryOpenedEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "CategoryOpenedEventDetail",
            "resolved": "CategoryOpenedEventDetail",
            "references": {
              "CategoryOpenedEventDetail": {
                "location": "import",
                "path": "../com-nav/com-nav-interface",
                "id": "src/components/com-nav/com-nav-interface.ts::CategoryOpenedEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "target": "window",
          "capture": false,
          "passive": false
        },
        {
          "event": "wcsCategoryOpened",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/com-nav-submenu/com-nav-submenu.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-com-nav-submenu",
      "readme": "# wcs-com-nav-submenu\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "panelDescription",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "panel-description",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "panelTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "panel-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "close() => Promise<void>",
          "parameters": [],
          "docs": "Close the menu",
          "docsTags": []
        },
        {
          "name": "open",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "open() => Promise<void>",
          "parameters": [],
          "docs": "Opens the menu",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "wcsClickOnFinalAction",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a user click on a final navigation action.\r\n\r\nUsed by the com-nav component to close the mobile menu overlay when a user click on a final action.",
          "docsTags": []
        },
        {
          "event": "wcsSubmenuOpened",
          "detail": "MenuOpenedEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "MenuOpenedEventDetail",
            "resolved": "MenuOpenedEventDetail",
            "references": {
              "MenuOpenedEventDetail": {
                "location": "import",
                "path": "../com-nav/com-nav-interface",
                "id": "src/components/com-nav/com-nav-interface.ts::MenuOpenedEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "target": "window",
          "capture": false,
          "passive": false
        },
        {
          "event": "wcsSubmenuOpened",
          "target": "window",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "target": "window",
          "capture": false,
          "passive": false
        },
        {
          "event": "wcsCategoryItemClicked",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/counter/counter.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-counter",
      "readme": "# Input\r\n\r",
      "docs": "Counter component, meant to be used for small range of values (e.g : 0 - 5).<br>\r\nFor larger or specific ranges, please use [wcs-input (type number)](.?path=/docs/components-input--documentation)",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Specify whether the counter is disabled or not.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The label of the counter.<br/>\r\ne.g. Number of passengers, train carriages, railroad tracks...",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "max",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "The maximum value of the counter.\r\nIf the value of the max attribute isn't set, then the element has no maximum value.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "min",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "The minimum value of the counter.\r\nIf the value of the min attribute isn't set, then the element has no minimum value.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "size",
          "type": "\"l\" | \"m\"",
          "complexType": {
            "original": "WcsCounterSize",
            "resolved": "\"l\" | \"m\"",
            "references": {
              "WcsCounterSize": {
                "location": "import",
                "path": "./counter-interface",
                "id": "src/components/counter/counter-interface.ts::WcsCounterSize"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "Specify the size (height) of the counter.",
          "docsTags": [],
          "default": "'m'",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "step",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "step",
          "reflectToAttr": false,
          "docs": "Defines by how much the counter will be incremented or decremented.",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The current value of the counter.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [
        {
          "name": "setAriaAttribute",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(attr: AriaAttributeName, value: string) => Promise<void>",
            "parameters": [
              {
                "name": "attr",
                "type": "\"role\" | `aria-${string}`",
                "docs": ""
              },
              {
                "name": "value",
                "type": "string",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "AriaAttributeName": {
                "location": "import",
                "path": "../../utils/mutable-aria-attribute",
                "id": "src/utils/mutable-aria-attribute.ts::AriaAttributeName"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setAriaAttribute(attr: AriaAttributeName, value: string) => Promise<void>",
          "parameters": [
            {
              "name": "attr",
              "type": "\"role\" | `aria-${string}`",
              "docs": ""
            },
            {
              "name": "value",
              "type": "string",
              "docs": ""
            }
          ],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "wcsBlur",
          "detail": "FocusEvent",
          "bubbles": true,
          "complexType": {
            "original": "FocusEvent",
            "resolved": "FocusEvent",
            "references": {
              "FocusEvent": {
                "location": "global",
                "id": "global::FocusEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the counter loses focus.",
          "docsTags": []
        },
        {
          "event": "wcsChange",
          "detail": "CounterChangeEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "CounterChangeEventDetail",
            "resolved": "CounterChangeEventDetail",
            "references": {
              "CounterChangeEventDetail": {
                "location": "import",
                "path": "./counter-interface",
                "id": "src/components/counter/counter-interface.ts::CounterChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value of the counter has changed.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "wcs-button",
        "wcs-mat-icon"
      ],
      "dependencyGraph": {
        "wcs-counter": [
          "wcs-button",
          "wcs-mat-icon"
        ],
        "wcs-button": [
          "wcs-spinner"
        ]
      }
    },
    {
      "filePath": "src/components/divider/divider.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-divider",
      "readme": "# wcs-divider\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/dropdown/dropdown.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-dropdown",
      "readme": "# Dropdown\r\n\r",
      "docs": "The dropdown component use a wcs-button under the hood, so you can use the same css classes as the button to style the\r\ndropdown.",
      "docsTags": [
        {
          "name": "slot",
          "text": "placeholder - The slot containing the placeholder displayed in button"
        },
        {
          "name": "slot",
          "text": "item - The slot container the list of `wcs-dropdown-item` elements"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Specifies whether the dropdown button is clickable or not",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"clear\" | \"plain\" | \"stroked\"",
          "complexType": {
            "original": "WcsButtonMode",
            "resolved": "\"clear\" | \"plain\" | \"stroked\"",
            "references": {
              "WcsButtonMode": {
                "location": "import",
                "path": "../button/button-interface",
                "id": "src/components/button/button-interface.ts::WcsButtonMode"
              }
            }
          },
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "Dropdown's button mode",
          "docsTags": [],
          "default": "'stroked'",
          "values": [
            {
              "value": "clear",
              "type": "string"
            },
            {
              "value": "plain",
              "type": "string"
            },
            {
              "value": "stroked",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noArrow",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "no-arrow",
          "reflectToAttr": false,
          "docs": "Hides the arrow in the button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placement",
          "type": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "complexType": {
            "original": "WcsDropdownPlacement",
            "resolved": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
            "references": {
              "WcsDropdownPlacement": {
                "location": "import",
                "path": "./dropdown-interface",
                "id": "src/components/dropdown/dropdown-interface.ts::WcsDropdownPlacement"
              }
            }
          },
          "mutable": false,
          "attr": "placement",
          "reflectToAttr": false,
          "docs": "placement of the dropdown's popover",
          "docsTags": [],
          "default": "'bottom-end'",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "auto-end",
              "type": "string"
            },
            {
              "value": "auto-start",
              "type": "string"
            },
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "shape",
          "type": "\"normal\" | \"round\" | \"square\"",
          "complexType": {
            "original": "WcsButtonShape",
            "resolved": "\"normal\" | \"round\" | \"square\"",
            "references": {
              "WcsButtonShape": {
                "location": "import",
                "path": "../button/button-interface",
                "id": "src/components/button/button-interface.ts::WcsButtonShape"
              }
            }
          },
          "mutable": false,
          "attr": "shape",
          "reflectToAttr": false,
          "docs": "Dropdown's button shape",
          "docsTags": [],
          "default": "'normal'",
          "values": [
            {
              "value": "normal",
              "type": "string"
            },
            {
              "value": "round",
              "type": "string"
            },
            {
              "value": "square",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "WcsButtonSize",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "WcsButtonSize": {
                "location": "import",
                "path": "../button/button-interface",
                "id": "src/components/button/button-interface.ts::WcsButtonSize"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Dropdown's button size",
          "docsTags": [],
          "default": "'m'",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "click",
          "target": "window",
          "capture": false,
          "passive": false
        },
        {
          "event": "wcsDropdownItemClick",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "item",
          "docs": "The slot container the list of `wcs-dropdown-item` elements"
        },
        {
          "name": "placeholder",
          "docs": "The slot containing the placeholder displayed in button"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "wcs-button"
      ],
      "dependencyGraph": {
        "wcs-dropdown": [
          "wcs-button"
        ],
        "wcs-button": [
          "wcs-spinner"
        ]
      }
    },
    {
      "filePath": "src/components/dropdown-divider/dropdown-divider.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-dropdown-divider",
      "readme": "# wcs-dropdown-divider\r\n\r\n\r\n\r",
      "docs": "You can add a divider between groups of items",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/dropdown-header/dropdown-header.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-dropdown-header",
      "readme": "# wcs-dropdown-header\r\n\r\n\r\n\r",
      "docs": "You can add `wcs-dropdown-header` before a group of items to describe it",
      "docsTags": [
        {
          "name": "slot",
          "text": "<no-name> the slot that contains the header's name"
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "<no-name> the slot that contains the header's name",
          "docs": ""
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/dropdown-item/dropdown-item.tsx",
      "encapsulation": "none",
      "tag": "wcs-dropdown-item",
      "readme": "# wcs-dropdown-item\r\n\r\n\r\n\r",
      "docs": "You must add `wcs-dropdown-item` to `wcs-dropdown`",
      "docsTags": [
        {
          "name": "slot",
          "text": "<no-name> the slot that contains the item's name"
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [
        {
          "event": "wcsDropdownItemClick",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when the dropdown item is clicked",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "mousedown",
          "capture": false,
          "passive": true
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "<no-name> the slot that contains the item's name",
          "docs": ""
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/editable-field/editable-field.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-editable-field",
      "readme": "# Editable fields\r\n\r",
      "docs": "The editable-field component can be used to simplify the user experience, avoiding the use of a redirection to a form\r\nto edit the data of an entity. You can use it with these wrapped components : `wcs-input`, `wcs-textarea`, `wcs-select`. \r\n\r\nThis component is not present in the SNCF design system specifications, so we tried to build it in the most\r\n\"discoverable\" way possible (for users who interact with), but it's a first version.\r\n\r\n**How to use ❓**  \r\nThis component is mostly used with a server that returns a response to the input sent through the `wcsChange` event.\r\nIt has 3 internal states :\r\n- DISPLAY = the default state of the editable-field\r\n- EDIT = the editable-field is editable, the user should input the data\r\n- LOADING = the data is submitted and the editable-field is waiting for a **response**\r\n\r\nA **response** is needed to get the component out of the LOADING state. You can either :\r\n- Set the `value` property to a different value to tell the component to refresh and go back into DISPLAY state\r\n- Use the `successHandler` callback through the `wcsChange` event (see interface [EditableComponentUpdateEvent](https://gitlab.com/SNCF/wcs/-/blob/develop/src/components/editable-field/editable-field-interface.tsx))\r\n- Use the `errorHandler` callback through the `wcsChange` event (see interface [EditableComponentUpdateEvent](https://gitlab.com/SNCF/wcs/-/blob/develop/src/components/editable-field/editable-field-interface.tsx))",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "errorMsg",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "error-msg",
          "reflectToAttr": false,
          "docs": "Error message displayed under the field if validation failed.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "formatFn",
          "type": "(value: any) => string",
          "complexType": {
            "original": "FormatFn<any>",
            "resolved": "(value: any) => string",
            "references": {
              "FormatFn": {
                "location": "import",
                "path": "./editable-field-interface",
                "id": "src/components/editable-field/editable-field-interface.tsx::FormatFn"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Function used to format the value",
          "docsTags": [],
          "values": [
            {
              "type": "(value: any) => string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label of the field",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Specify whether the field is editable or not",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"l\" | \"m\"",
          "complexType": {
            "original": "WcsEditableFieldSize",
            "resolved": "\"l\" | \"m\"",
            "references": {
              "WcsEditableFieldSize": {
                "location": "import",
                "path": "./editable-field-interface",
                "id": "src/components/editable-field/editable-field-interface.tsx::WcsEditableFieldSize"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "Specify the size (height) of the editable field.",
          "docsTags": [],
          "default": "'m'",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"input\" | \"select\" | \"textarea\"",
          "complexType": {
            "original": "EditableFieldType",
            "resolved": "\"input\" | \"select\" | \"textarea\"",
            "references": {
              "EditableFieldType": {
                "location": "import",
                "path": "./editable-field-interface",
                "id": "src/components/editable-field/editable-field-interface.tsx::EditableFieldType"
              }
            }
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Specifies which component is used for editing",
          "docsTags": [],
          "default": "'input'",
          "values": [
            {
              "value": "input",
              "type": "string"
            },
            {
              "value": "select",
              "type": "string"
            },
            {
              "value": "textarea",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "validateFn",
          "type": "(value: any) => boolean",
          "complexType": {
            "original": "ValidateFn<any>",
            "resolved": "(value: any) => boolean",
            "references": {
              "ValidateFn": {
                "location": "import",
                "path": "./editable-field-interface",
                "id": "src/components/editable-field/editable-field-interface.tsx::ValidateFn"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Function to customize the validation of the data during the update",
          "docsTags": [],
          "values": [
            {
              "type": "(value: any) => boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Initial value of the field",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "wcsChange",
          "detail": "EditableComponentUpdateEvent",
          "bubbles": true,
          "complexType": {
            "original": "EditableComponentUpdateEvent",
            "resolved": "EditableComponentUpdateEvent",
            "references": {
              "EditableComponentUpdateEvent": {
                "location": "import",
                "path": "./editable-field-interface",
                "id": "src/components/editable-field/editable-field-interface.tsx::EditableComponentUpdateEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event called at each (valid) update of the field.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "wcs-mat-icon",
        "wcs-spinner",
        "wcs-form-field",
        "wcs-error"
      ],
      "dependencyGraph": {
        "wcs-editable-field": [
          "wcs-mat-icon",
          "wcs-spinner",
          "wcs-form-field",
          "wcs-error"
        ]
      }
    },
    {
      "filePath": "src/components/error/error.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-error",
      "readme": "# wcs-error\r\n\r\n\r\n\r",
      "docs": "The `wcs-error` should always be wrapped in a `wcs-form-field`.\r\nIt is used to display a red message under the field indicating an incorrect user input.\r\n\r\n## Accessibility guidelines 💡\r\n- Provide a relevant error message to inform the users what they should change to make the field valid\r\n- `aria-description` will be automatically added to the field for screen readers\r\n- `aria-invalid=\"true\"` will be automatically added to the field for screen readers",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "wcs-editable-field"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "wcs-editable-field": [
          "wcs-error"
        ]
      }
    },
    {
      "filePath": "src/components/field/field.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-field",
      "readme": "# Field\r\n\r",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "label Label of the field"
        },
        {
          "name": "slot",
          "text": "content Content of the field"
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "content Content of the field",
          "docs": ""
        },
        {
          "name": "label Label of the field",
          "docs": ""
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/field-content/field-content.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-field-content",
      "readme": "# wcs-field-content\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/field-label/field-label.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-field-label",
      "readme": "# wcs-field-label\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/footer/footer.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-footer",
      "readme": "# Footer\r\n\r",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "<no-name> Main container slot"
        },
        {
          "name": "slot",
          "text": "end-left Bottom-left part of the footer"
        },
        {
          "name": "slot",
          "text": "end-right Bottom-right part of the footer"
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "<no-name> Main container slot",
          "docs": ""
        },
        {
          "name": "end-left Bottom-left part of the footer",
          "docs": ""
        },
        {
          "name": "end-right Bottom-right part of the footer",
          "docs": ""
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/form-field/form-field.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-form-field",
      "readme": "# Form field\r\n\r\n\r",
      "docs": "Form field component wraps the native input element and add some more functionality on top of it.\r\n\r\nYou can use the `wcs-form-field` to wrap any of these components :\r\n- `wcs-input`\r\n- `wcs-textarea`\r\n- `wcs-radio-group`\r\n- `wcs-switch`\r\n- `wcs-checkbox`\r\n- `wcs-native-select`\r\n- `wcs-select`\r\n- `wcs-counter`\r\n\r\nFor non-supported slotted component, you can use the `required` attribute on the wrapped component to tell the\r\nform-field that it is required. It will add a red star after the label of the form field.\r\n\r\n## Accessibility guidelines 💡\r\n- Each form control should be identified with a unique `wcs-label`\r\n- Don't forget to add form validation to make sure the data is correctly formatted\r\n- If the `wcs-label` is required, the form control must have the `required` HTML attribute and vice-versa (this is normally automatically set)\r\n- The form should not be submittable if at least one required form control is not filled\r\n- Hints are optional and should only be used to add extra information",
      "docsTags": [
        {
          "name": "slot",
          "text": "label - Automatically filled when a `wcs-label` is provided"
        },
        {
          "name": "slot",
          "text": "<no-name> - The main slot containing the wrapped component"
        },
        {
          "name": "slot",
          "text": "prefix - (Optional) Display a component as prefix. See \"Prefix Suffix Group\" story for more info."
        },
        {
          "name": "slot",
          "text": "suffix - (Optional) Display a component as suffix. See \"Prefix Suffix Group\" story for more info."
        },
        {
          "name": "slot",
          "text": "error - Automatically filled when a `wcs-error` is provided"
        },
        {
          "name": "slot",
          "text": "messages - Automatically filled when a `wcs-hint` is provided"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "isError",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "is-error",
          "reflectToAttr": true,
          "docs": "Specifies whether the form field is in an error state. Displays the field border in red and the message contained in the wcs-error component",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "<no-name>",
          "docs": "The main slot containing the wrapped component"
        },
        {
          "name": "error",
          "docs": "Automatically filled when a `wcs-error` is provided"
        },
        {
          "name": "label",
          "docs": "Automatically filled when a `wcs-label` is provided"
        },
        {
          "name": "messages",
          "docs": "Automatically filled when a `wcs-hint` is provided"
        },
        {
          "name": "prefix",
          "docs": "(Optional) Display a component as prefix. See \"Prefix Suffix Group\" story for more info."
        },
        {
          "name": "suffix",
          "docs": "(Optional) Display a component as suffix. See \"Prefix Suffix Group\" story for more info."
        }
      ],
      "parts": [],
      "dependents": [
        "wcs-editable-field"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "wcs-editable-field": [
          "wcs-form-field"
        ]
      }
    },
    {
      "filePath": "src/components/galactic/galactic.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-galactic",
      "readme": "# Galactic Bar\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "text",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "Text to display in the bar",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/galactic-menu/galactic-menu.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-galactic-menu",
      "readme": "# wcs-galactic-menu\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "text",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "Text to be displayed in the galactic bar",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "click",
          "target": "window",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "wcs-mat-icon"
      ],
      "dependencyGraph": {
        "wcs-galactic-menu": [
          "wcs-mat-icon"
        ]
      }
    },
    {
      "filePath": "src/components/grid/grid.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-grid",
      "readme": "# Grid\r\n\r",
      "docs": "The grid component is a complex component used as an HTML table to display collections of data.",
      "docsTags": [
        {
          "name": "cssprop",
          "text": "--wcs-grid-highlight-color - Color for selected rows"
        },
        {
          "name": "cssprop",
          "text": "--wcs-grid-column-border-left - Left border of all grid headers"
        },
        {
          "name": "slot",
          "text": "grid-column - The slot containing the column of the grid in the `<thead>`"
        },
        {
          "name": "slot",
          "text": "grid-pagination - The slot containing the pagination of the grid below the `<table>`"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "data",
          "type": "any[]",
          "complexType": {
            "original": "any[]",
            "resolved": "any[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Contains the data to display in the table from a js object",
          "docsTags": [],
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": false,
          "docs": "Flag to display a spinner during data loading",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rowIdPath",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "row-id-path",
          "reflectToAttr": false,
          "docs": "Name of the object's key that will be used to display the cells whose `keyValue` attribute matches to the\r\nobject's value for this key.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedItems",
          "type": "any",
          "complexType": {
            "original": "any | any[]",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "selected-items",
          "reflectToAttr": false,
          "docs": "Set the selected items (rows)",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionConfig",
          "type": "\"multiple\" | \"none\" | \"single\"",
          "complexType": {
            "original": "WcsGridSelectionConfig",
            "resolved": "\"multiple\" | \"none\" | \"single\"",
            "references": {
              "WcsGridSelectionConfig": {
                "location": "import",
                "path": "./grid-interface",
                "id": "src/components/grid/grid-interface.ts::WcsGridSelectionConfig"
              }
            }
          },
          "mutable": false,
          "attr": "selection-config",
          "reflectToAttr": false,
          "docs": "Used to manage grid's row selection.  \r\n\"none\": no row can be selected.  \r\n\"multiple\": several rows can be selected.  \r\n\"single\": one row only can be selected.",
          "docsTags": [],
          "default": "'none'",
          "values": [
            {
              "value": "multiple",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "single",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "serverMode",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "server-mode",
          "reflectToAttr": false,
          "docs": "Manage sort and pagination with a backend server when set to `true`",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "wcsGridPaginationId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "wcs-grid-pagination-id",
          "reflectToAttr": false,
          "docs": "Automatically set by the component to reference the wcs-grid-pagination HTML element by its id.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "wcsGridAllSelectionChange",
          "detail": "WcsGridAllRowSelectedEventDetails",
          "bubbles": true,
          "complexType": {
            "original": "WcsGridAllRowSelectedEventDetails",
            "resolved": "WcsGridAllRowSelectedEventDetails",
            "references": {
              "WcsGridAllRowSelectedEventDetails": {
                "location": "import",
                "path": "./grid-interface",
                "id": "src/components/grid/grid-interface.ts::WcsGridAllRowSelectedEventDetails"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when all rows are selected or unselected",
          "docsTags": []
        },
        {
          "event": "wcsGridSelectionChange",
          "detail": "WcsGridSelectionEventDetails",
          "bubbles": true,
          "complexType": {
            "original": "WcsGridSelectionEventDetails",
            "resolved": "WcsGridSelectionEventDetails",
            "references": {
              "WcsGridSelectionEventDetails": {
                "location": "import",
                "path": "./grid-interface",
                "id": "src/components/grid/grid-interface.ts::WcsGridSelectionEventDetails"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when a row is selected or unselected",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "focus",
          "capture": false,
          "passive": false
        },
        {
          "event": "wcsHiddenChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "mousedown",
          "capture": false,
          "passive": true
        },
        {
          "event": "wcsSortChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "wcsGridPaginationChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "wcsGridPaginationChange",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "grid-column",
          "docs": "The slot containing the column of the grid in the `<thead>`"
        },
        {
          "name": "grid-pagination",
          "docs": "The slot containing the pagination of the grid below the `<table>`"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "wcs-radio",
        "wcs-checkbox",
        "wcs-spinner",
        "wcs-button"
      ],
      "dependencyGraph": {
        "wcs-grid": [
          "wcs-radio",
          "wcs-checkbox",
          "wcs-spinner",
          "wcs-button"
        ],
        "wcs-button": [
          "wcs-spinner"
        ]
      }
    },
    {
      "filePath": "src/components/grid-column/grid-column.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-grid-column",
      "readme": "# wcs-grid-column\r\n\r\n\r\n\r",
      "docs": "The grid column is a subcomponent of `wcs-grid` that represents a column of the table.",
      "docsTags": [
        {
          "name": "cssprop",
          "text": "--wcs-grid-column-border-left - Border separator between column names"
        },
        {
          "name": "csspart",
          "text": "[path]-column - CSS part for each column for styling. e.g: first_name-column, email-column"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "customCells",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "custom-cells",
          "reflectToAttr": false,
          "docs": "Set to true if using a `wcs-custom-cell` linked to it.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "formatter",
          "type": "(_h: HyperFunc<VNode>, column: HTMLWcsGridColumnElement, rowData: WcsGridRowData) => HTMLElement | HTMLElement[]",
          "complexType": {
            "original": "WcsCellFormatter",
            "resolved": "(_h: HyperFunc<VNode>, column: HTMLWcsGridColumnElement, rowData: WcsGridRowData) => HTMLElement | HTMLElement[]",
            "references": {
              "WcsCellFormatter": {
                "location": "import",
                "path": "../grid/grid-interface",
                "id": "src/components/grid/grid-interface.ts::WcsCellFormatter"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Customizable formatter function to render the cell differently.",
          "docsTags": [],
          "values": [
            {
              "type": "(_h: HyperFunc<VNode>, column: HTMLWcsGridColumnElement, rowData: WcsGridRowData) => HTMLElement"
            },
            {
              "type": "HTMLElement[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hidden",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hidden",
          "reflectToAttr": false,
          "docs": "Flag to hide the column.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the column displayed on the table (e.g: First Name, Last Name, Email, ...)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "path",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "path",
          "reflectToAttr": false,
          "docs": "Represents the name of the field from the `data` object (e.g: first_name, last_name, email, ...)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "sort",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "sort",
          "reflectToAttr": false,
          "docs": "Make the column sortable.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "sortFn",
          "type": "(a: any, b: any, column: HTMLWcsGridColumnElement) => 0 | 1 | -1",
          "complexType": {
            "original": "WcsSortFn",
            "resolved": "(a: any, b: any, column: HTMLWcsGridColumnElement) => 0 | 1 | -1",
            "references": {
              "WcsSortFn": {
                "location": "import",
                "path": "../grid/grid-interface",
                "id": "src/components/grid/grid-interface.ts::WcsSortFn"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Customizable sort function to change the comparison of values.",
          "docsTags": [],
          "values": [
            {
              "type": "(a: any, b: any, column: HTMLWcsGridColumnElement) => 0"
            },
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "-1",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "sortOrder",
          "type": "\"asc\" | \"desc\" | \"none\"",
          "complexType": {
            "original": "WcsSortOrder",
            "resolved": "\"asc\" | \"desc\" | \"none\"",
            "references": {
              "WcsSortOrder": {
                "location": "import",
                "path": "../grid/grid-interface",
                "id": "src/components/grid/grid-interface.ts::WcsSortOrder"
              }
            }
          },
          "mutable": true,
          "attr": "sort-order",
          "reflectToAttr": false,
          "docs": "Defines if the column sort is ascending or descending.  \r\n`none` = the column is not sorted.",
          "docsTags": [],
          "default": "'none'",
          "values": [
            {
              "value": "asc",
              "type": "string"
            },
            {
              "value": "desc",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "width",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "width",
          "reflectToAttr": false,
          "docs": "Set the column `<th>` element width.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "wcsHiddenChange",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted if the column is dynamically switching visibility.",
          "docsTags": []
        },
        {
          "event": "wcsSortChange",
          "detail": "WcsGridColumnSortChangeEventDetails",
          "bubbles": true,
          "complexType": {
            "original": "WcsGridColumnSortChangeEventDetails",
            "resolved": "WcsGridColumnSortChangeEventDetails",
            "references": {
              "WcsGridColumnSortChangeEventDetails": {
                "location": "import",
                "path": "../grid/grid-interface",
                "id": "src/components/grid/grid-interface.ts::WcsGridColumnSortChangeEventDetails"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when the sort of the column is changed.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/grid-custom-cell/grid-custom-cell.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-grid-custom-cell",
      "readme": "# wcs-grid-custom-cell\r\n\r\n\r\n\r",
      "docs": "The grid custom cell is a subcomponent of `wcs-grid`.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "columnId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "column-id",
          "reflectToAttr": false,
          "docs": "ID of the column for which to render the cell",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rowId",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "row-id",
          "reflectToAttr": false,
          "docs": "Key value of the object rendered for the cell's row",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/grid-pagination/grid-pagination.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-grid-pagination",
      "readme": "# wcs-grid-pagination\r\n\r\n\r\n\r",
      "docs": "The grid pagination is a subcomponent of `wcs-grid`, slotted in `grid-pagination` under the `<table>` element.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "availablePageSizes",
          "type": "number[]",
          "complexType": {
            "original": "number[]",
            "resolved": "number[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Set the available page sizes in the pagination dropdown on the left.",
          "docsTags": [],
          "default": "[10, 20, 50]",
          "values": [
            {
              "type": "number[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "currentPage",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "current-page",
          "reflectToAttr": false,
          "docs": "The current page of the pagination. First page starts at index 0.",
          "docsTags": [],
          "default": "GridPagination.INDEX_FIRST_PAGE",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "itemsCount",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "items-count",
          "reflectToAttr": false,
          "docs": "Total elements in the grid.  \r\n- **Grid in `Server mode`** : You have to set `itemsCount` = your total data length.  \r\n- **Grid not in Server mode** : Do not set it manually : itemsCount is set and updated every pagination refresh.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pageCount",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "page-count",
          "reflectToAttr": false,
          "docs": "Max number of pages.  \r\n- **Grid in `Server mode`** : You have to set `pageCount` = `itemsCount` divided by `pageSize`.  \r\n- **Grid not in Server mode** : Do not set it manually : pageCount is set and updated every pagination refresh.",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pageSize",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "page-size",
          "reflectToAttr": false,
          "docs": "Maximum number of elements shown per page.  \r\nDefault is the first value of `availablePageSizes`.",
          "docsTags": [],
          "default": "this.availablePageSizes[0]",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "wcsGridPaginationChange",
          "detail": "WcsGridPaginationChangeEventDetails",
          "bubbles": true,
          "complexType": {
            "original": "WcsGridPaginationChangeEventDetails",
            "resolved": "WcsGridPaginationChangeEventDetails",
            "references": {
              "WcsGridPaginationChangeEventDetails": {
                "location": "import",
                "path": "../grid/grid-interface",
                "id": "src/components/grid/grid-interface.ts::WcsGridPaginationChangeEventDetails"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when the pagination changes.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "wcs-select",
        "wcs-select-option",
        "wcs-button"
      ],
      "dependencyGraph": {
        "wcs-grid-pagination": [
          "wcs-select",
          "wcs-select-option",
          "wcs-button"
        ],
        "wcs-select-option": [
          "wcs-checkbox"
        ],
        "wcs-button": [
          "wcs-spinner"
        ]
      }
    },
    {
      "filePath": "src/components/header/header.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-header",
      "readme": "# Header\r\n\r",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "logo SNCF Logo"
        },
        {
          "name": "slot",
          "text": "title Title of your application"
        },
        {
          "name": "slot",
          "text": "actions Actions such as buttons, dropdown or any useful information to always display on your application"
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "actions Actions such as buttons, dropdown or any useful information to always display on your application",
          "docs": ""
        },
        {
          "name": "logo SNCF Logo",
          "docs": ""
        },
        {
          "name": "title Title of your application",
          "docs": ""
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/hint/hint.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-hint",
      "readme": "# wcs-hint\r\n\r\n\r\n\r",
      "docs": "The `wcs-hint` should always be wrapped in a `wcs-form-field`.\r\nIt is used to display an informative message under the field indicating an incorrect user input.\r\n\r\n## Accessibility guidelines 💡\r\n- Provide a relevant hint message to inform the users about the format, how the data should be filled in, or what is the purpose of the field\r\n- `aria-description` will be automatically added to the field for screen readers",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "small",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "small",
          "reflectToAttr": true,
          "docs": "Whether the component should display the small version of the hint",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/horizontal-stepper/horizontal-stepper.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-horizontal-stepper",
      "readme": "# Horizontal Stepper\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "checkOnComplete",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "check-on-complete",
          "reflectToAttr": false,
          "docs": "Specifies whether a check should be displayed when a step is passed.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "currentStep",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "current-step",
          "reflectToAttr": false,
          "docs": "index of the active step. The index corresponds to the index of the step in the 'steps' list",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"linear\" | \"nonLinear\"",
          "complexType": {
            "original": "HorizontalStepperMode",
            "resolved": "\"linear\" | \"nonLinear\"",
            "references": {
              "HorizontalStepperMode": {
                "location": "import",
                "path": "./horizontal-stepper-interface",
                "id": "src/components/horizontal-stepper/horizontal-stepper-interface.ts::HorizontalStepperMode"
              }
            }
          },
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "Specifies if the stepper is in linear mode (the user can only click on the next step)\r\nor non-linear (the user can click on any step)",
          "docsTags": [],
          "default": "'nonLinear'",
          "values": [
            {
              "value": "linear",
              "type": "string"
            },
            {
              "value": "nonLinear",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "steps",
          "type": "HorizontalStepConfig[]",
          "complexType": {
            "original": "HorizontalStepConfig[]",
            "resolved": "HorizontalStepConfig[]",
            "references": {
              "HorizontalStepConfig": {
                "location": "import",
                "path": "./horizontal-stepper-interface",
                "id": "src/components/horizontal-stepper/horizontal-stepper-interface.ts::HorizontalStepConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "steps to display",
          "docsTags": [],
          "values": [
            {
              "type": "HorizontalStepConfig[]"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "next",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "next() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "previous",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "previous() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "wcsHorizontalStepClick",
          "detail": "HorizontalStepClickEvent",
          "bubbles": true,
          "complexType": {
            "original": "HorizontalStepClickEvent",
            "resolved": "HorizontalStepClickEvent",
            "references": {
              "HorizontalStepClickEvent": {
                "location": "import",
                "path": "./horizontal-stepper-interface",
                "id": "src/components/horizontal-stepper/horizontal-stepper-interface.ts::HorizontalStepClickEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the user selects a new step.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "wcs-progress-bar",
        "wcs-button",
        "wcs-mat-icon"
      ],
      "dependencyGraph": {
        "wcs-horizontal-stepper": [
          "wcs-progress-bar",
          "wcs-button",
          "wcs-mat-icon"
        ],
        "wcs-button": [
          "wcs-spinner"
        ]
      }
    },
    {
      "filePath": "src/components/icon/icon.tsx",
      "encapsulation": "none",
      "tag": "wcs-icon",
      "readme": "# Icon\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"140px\" | \"1x\" | \"1x2\" | \"1x5\" | \"1x7\" | \"2x\" | \"30px\" | \"3x\" | \"50px\" | \"66px\" | \"90px\" | \"96px\" | \"x5\" | \"x75\"",
          "complexType": {
            "original": "'x5' | 'x75' | '1x' | '1x2' | '1x5' | '1x7' | '2x' | '3x' | '30px' | '50px' | '66px' | '90px' | '96px' | '140px'",
            "resolved": "\"140px\" | \"1x\" | \"1x2\" | \"1x5\" | \"1x7\" | \"2x\" | \"30px\" | \"3x\" | \"50px\" | \"66px\" | \"90px\" | \"96px\" | \"x5\" | \"x75\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "140px",
              "type": "string"
            },
            {
              "value": "1x",
              "type": "string"
            },
            {
              "value": "1x2",
              "type": "string"
            },
            {
              "value": "1x5",
              "type": "string"
            },
            {
              "value": "1x7",
              "type": "string"
            },
            {
              "value": "2x",
              "type": "string"
            },
            {
              "value": "30px",
              "type": "string"
            },
            {
              "value": "3x",
              "type": "string"
            },
            {
              "value": "50px",
              "type": "string"
            },
            {
              "value": "66px",
              "type": "string"
            },
            {
              "value": "90px",
              "type": "string"
            },
            {
              "value": "96px",
              "type": "string"
            },
            {
              "value": "x5",
              "type": "string"
            },
            {
              "value": "x75",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/input/input.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-input",
      "readme": "# Input\r\n\r",
      "docs": "The input component is a form control that accepts a single line of text.\r\nImplementation mainly inspired from Ionic Input Component.\r\n\r\n\r\n<details>\r\n    <summary>Accessibility guidelines 💡</summary>\r\n    > - Provide a `<wcs-label>` next to the input\r\n    > - Use the `disabled` prop to add the HTML `disabled` attribute to the `input`\r\n    > - Use the `readonly` prop to add the HTML `readonly` attribute to the `input`\r\n    > - Use the `autofocus` prop to add the HTML `autofocus` attribute to the `input`. Use it if you want your input focus\r\n    automatically when the page load\r\n    > - Adapt the `type` to lets user enter information more easily (_ex: `type=\"number\"` for an input which only accept numbers entry_)\r\n</details>",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "accept",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "accept",
          "reflectToAttr": false,
          "docs": "If the value of the type attribute is `\"file\"`, then this attribute will indicate the types of files that the\r\nserver accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "autocapitalize",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "autocapitalize",
          "reflectToAttr": false,
          "docs": "Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\r\nAvailable options: `\"off\"`, `\"none\"`, `\"on\"`, `\"sentences\"`, `\"words\"`, `\"characters\"`.",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autocomplete",
          "type": "\"name\" | \"on\" | \"off\" | \"honorific-prefix\" | \"given-name\" | \"additional-name\" | \"family-name\" | \"honorific-suffix\" | \"nickname\" | \"email\" | \"username\" | \"new-password\" | \"current-password\" | \"one-time-code\" | \"organization-title\" | \"organization\" | \"street-address\" | \"address-line1\" | \"address-line2\" | \"address-line3\" | \"address-level4\" | \"address-level3\" | \"address-level2\" | \"address-level1\" | \"country\" | \"country-name\" | \"postal-code\" | \"cc-name\" | \"cc-given-name\" | \"cc-additional-name\" | \"cc-family-name\" | \"cc-number\" | \"cc-exp\" | \"cc-exp-month\" | \"cc-exp-year\" | \"cc-csc\" | \"cc-type\" | \"transaction-currency\" | \"transaction-amount\" | \"language\" | \"bday\" | \"bday-day\" | \"bday-month\" | \"bday-year\" | \"sex\" | \"tel\" | \"tel-country-code\" | \"tel-national\" | \"tel-area-code\" | \"tel-local\" | \"tel-extension\" | \"impp\" | \"url\" | \"photo\"",
          "complexType": {
            "original": "AutocompleteTypes",
            "resolved": "\"name\" | \"on\" | \"off\" | \"honorific-prefix\" | \"given-name\" | \"additional-name\" | \"family-name\" | \"honorific-suffix\" | \"nickname\" | \"email\" | \"username\" | \"new-password\" | \"current-password\" | \"one-time-code\" | \"organization-title\" | \"organization\" | \"street-address\" | \"address-line1\" | \"address-line2\" | \"address-line3\" | \"address-level4\" | \"address-level3\" | \"address-level2\" | \"address-level1\" | \"country\" | \"country-name\" | \"postal-code\" | \"cc-name\" | \"cc-given-name\" | \"cc-additional-name\" | \"cc-family-name\" | \"cc-number\" | \"cc-exp\" | \"cc-exp-month\" | \"cc-exp-year\" | \"cc-csc\" | \"cc-type\" | \"transaction-currency\" | \"transaction-amount\" | \"language\" | \"bday\" | \"bday-day\" | \"bday-month\" | \"bday-year\" | \"sex\" | \"tel\" | \"tel-country-code\" | \"tel-national\" | \"tel-area-code\" | \"tel-local\" | \"tel-extension\" | \"impp\" | \"url\" | \"photo\"",
            "references": {
              "AutocompleteTypes": {
                "location": "import",
                "path": "./input-interface",
                "id": "src/components/input/input-interface.ts::AutocompleteTypes"
              }
            }
          },
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "Indicates whether the value of the control can be automatically completed by the browser.",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "value": "name",
              "type": "string"
            },
            {
              "value": "on",
              "type": "string"
            },
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "honorific-prefix",
              "type": "string"
            },
            {
              "value": "given-name",
              "type": "string"
            },
            {
              "value": "additional-name",
              "type": "string"
            },
            {
              "value": "family-name",
              "type": "string"
            },
            {
              "value": "honorific-suffix",
              "type": "string"
            },
            {
              "value": "nickname",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "username",
              "type": "string"
            },
            {
              "value": "new-password",
              "type": "string"
            },
            {
              "value": "current-password",
              "type": "string"
            },
            {
              "value": "one-time-code",
              "type": "string"
            },
            {
              "value": "organization-title",
              "type": "string"
            },
            {
              "value": "organization",
              "type": "string"
            },
            {
              "value": "street-address",
              "type": "string"
            },
            {
              "value": "address-line1",
              "type": "string"
            },
            {
              "value": "address-line2",
              "type": "string"
            },
            {
              "value": "address-line3",
              "type": "string"
            },
            {
              "value": "address-level4",
              "type": "string"
            },
            {
              "value": "address-level3",
              "type": "string"
            },
            {
              "value": "address-level2",
              "type": "string"
            },
            {
              "value": "address-level1",
              "type": "string"
            },
            {
              "value": "country",
              "type": "string"
            },
            {
              "value": "country-name",
              "type": "string"
            },
            {
              "value": "postal-code",
              "type": "string"
            },
            {
              "value": "cc-name",
              "type": "string"
            },
            {
              "value": "cc-given-name",
              "type": "string"
            },
            {
              "value": "cc-additional-name",
              "type": "string"
            },
            {
              "value": "cc-family-name",
              "type": "string"
            },
            {
              "value": "cc-number",
              "type": "string"
            },
            {
              "value": "cc-exp",
              "type": "string"
            },
            {
              "value": "cc-exp-month",
              "type": "string"
            },
            {
              "value": "cc-exp-year",
              "type": "string"
            },
            {
              "value": "cc-csc",
              "type": "string"
            },
            {
              "value": "cc-type",
              "type": "string"
            },
            {
              "value": "transaction-currency",
              "type": "string"
            },
            {
              "value": "transaction-amount",
              "type": "string"
            },
            {
              "value": "language",
              "type": "string"
            },
            {
              "value": "bday",
              "type": "string"
            },
            {
              "value": "bday-day",
              "type": "string"
            },
            {
              "value": "bday-month",
              "type": "string"
            },
            {
              "value": "bday-year",
              "type": "string"
            },
            {
              "value": "sex",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "tel-country-code",
              "type": "string"
            },
            {
              "value": "tel-national",
              "type": "string"
            },
            {
              "value": "tel-area-code",
              "type": "string"
            },
            {
              "value": "tel-local",
              "type": "string"
            },
            {
              "value": "tel-extension",
              "type": "string"
            },
            {
              "value": "impp",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            },
            {
              "value": "photo",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autocorrect",
          "type": "\"off\" | \"on\"",
          "complexType": {
            "original": "'on' | 'off'",
            "resolved": "\"off\" | \"on\"",
            "references": {}
          },
          "mutable": false,
          "attr": "autocorrect",
          "reflectToAttr": false,
          "docs": "Whether auto correction should be enabled when the user is entering/editing the text value.",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "on",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "This Boolean attribute lets you specify that a form control should have input focus when the page loads.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clearInput",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "clear-input",
          "reflectToAttr": false,
          "docs": "If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clearOnEdit",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "clear-on-edit",
          "reflectToAttr": false,
          "docs": "If `true`, the value will be cleared after focus upon edit.\r\nDefaults to `true` when `type` is `\"password\"`, `false` for all other types.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "debounce",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "Set the amount of time, in milliseconds, to wait to trigger the `wcsInput` event after each keystroke.\r\nThis also impacts form bindings such as `ngModel` or `v-model`.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the user cannot interact with the input.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "enterkeyhint",
          "type": "\"done\" | \"enter\" | \"go\" | \"next\" | \"previous\" | \"search\" | \"send\"",
          "complexType": {
            "original": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'",
            "resolved": "\"done\" | \"enter\" | \"go\" | \"next\" | \"previous\" | \"search\" | \"send\"",
            "references": {}
          },
          "mutable": false,
          "attr": "enterkeyhint",
          "reflectToAttr": false,
          "docs": "A hint to the browser for which enter key to display.\r\nPossible values: `\"enter\"`, `\"done\"`, `\"go\"`, `\"next\"`,\r\n`\"previous\"`, `\"search\"`, and `\"send\"`.",
          "docsTags": [],
          "values": [
            {
              "value": "done",
              "type": "string"
            },
            {
              "value": "enter",
              "type": "string"
            },
            {
              "value": "go",
              "type": "string"
            },
            {
              "value": "next",
              "type": "string"
            },
            {
              "value": "previous",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "send",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Name of the material icon to add to the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputmode",
          "type": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\"",
          "complexType": {
            "original": "'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'",
            "resolved": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\"",
            "references": {}
          },
          "mutable": false,
          "attr": "inputmode",
          "reflectToAttr": false,
          "docs": "A hint to the browser for which keyboard to display.\r\nPossible values: `\"none\"`, `\"text\"`, `\"tel\"`, `\"url\"`,\r\n`\"email\"`, `\"numeric\"`, `\"decimal\"`, and `\"search\"`.",
          "docsTags": [],
          "values": [
            {
              "value": "decimal",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "numeric",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "max",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "The maximum value, which must not be less than its minimum (min attribute) value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "maxlength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute\r\nspecifies the maximum number of characters that the user can enter.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "min",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "The minimum value, which must not be greater than its maximum (max attribute) value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "minlength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "minlength",
          "reflectToAttr": false,
          "docs": "If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute\r\nspecifies the minimum number of characters that the user can enter.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to\r\n`\"email\"` or `\"file\"`, otherwise it is ignored.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pattern",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "pattern",
          "reflectToAttr": false,
          "docs": "A regular expression that the value is checked against. The pattern must match the entire value, not just some\r\nsubset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value\r\nof the type attribute is `\"text\"`, `\"search\"`, `\"tel\"`, `\"url\"`, `\"email\"`, `\"date\"`, or `\"password\"`, otherwise\r\nit is ignored. When the type attribute is `\"date\"`, `pattern` will only be used in browsers that do not support\r\nthe `\"date\"` input type natively. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date for\r\nmore information.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string | null",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Instructional text that shows before the input has a value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "prefixLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "prefix-label",
          "reflectToAttr": false,
          "docs": "Prefix displayed before the text field contents. This is not included in the value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If `true`, the user cannot modify the value.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If `true`, the user must fill in a value before submitting a form.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"l\" | \"m\" | \"s\"",
          "complexType": {
            "original": "WcsInputSize",
            "resolved": "\"l\" | \"m\" | \"s\"",
            "references": {
              "WcsInputSize": {
                "location": "import",
                "path": "./input-interface",
                "id": "src/components/input/input-interface.ts::WcsInputSize"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "Specify the size (height) of the input.",
          "docsTags": [],
          "default": "'m'",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "spellcheck",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "spellcheck",
          "reflectToAttr": false,
          "docs": "If `true`, the element will have its spelling and grammar checked.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "\"error\" | \"initial\"",
          "complexType": {
            "original": "'initial' | 'error'",
            "resolved": "\"error\" | \"initial\"",
            "references": {}
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": true,
          "docs": "Specifies the state of the input. By default the input is in an normal state but you can to set it to 'error'\r\nstate if the data given by the user is not valid.",
          "docsTags": [],
          "default": "'initial'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "initial",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "step",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "step",
          "reflectToAttr": false,
          "docs": "Works with the min and max attributes to limit the increments at which a value can be set.\r\nPossible values are: `\"any\"` or a positive floating point number.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "suffixLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "suffix-label",
          "reflectToAttr": false,
          "docs": "Suffix displayed after the text field contents. This is not included in the value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"date\" | \"datetime-local\" | \"email\" | \"file\" | \"month\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"time\" | \"url\" | \"week\"",
          "complexType": {
            "original": "TextFieldTypes",
            "resolved": "\"date\" | \"datetime-local\" | \"email\" | \"file\" | \"month\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"time\" | \"url\" | \"week\"",
            "references": {
              "TextFieldTypes": {
                "location": "import",
                "path": "./input-interface",
                "id": "src/components/input/input-interface.ts::TextFieldTypes"
              }
            }
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "The type of control to display. The default type is text.",
          "docsTags": [],
          "default": "'text'",
          "values": [
            {
              "value": "date",
              "type": "string"
            },
            {
              "value": "datetime-local",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "file",
              "type": "string"
            },
            {
              "value": "month",
              "type": "string"
            },
            {
              "value": "number",
              "type": "string"
            },
            {
              "value": "password",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "time",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            },
            {
              "value": "week",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number | string",
          "complexType": {
            "original": "string | number | null",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the input.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getInputElement",
          "returns": {
            "type": "Promise<HTMLInputElement>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<HTMLInputElement>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLInputElement": {
                "location": "global",
                "id": "global::HTMLInputElement"
              }
            },
            "return": "Promise<HTMLInputElement>"
          },
          "signature": "getInputElement() => Promise<HTMLInputElement>",
          "parameters": [],
          "docs": "Returns the native `<input>` element used under the hood.",
          "docsTags": []
        },
        {
          "name": "setAriaAttribute",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(attr: AriaAttributeName, value: string) => Promise<void>",
            "parameters": [
              {
                "name": "attr",
                "type": "\"role\" | `aria-${string}`",
                "docs": ""
              },
              {
                "name": "value",
                "type": "string",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "AriaAttributeName": {
                "location": "import",
                "path": "../../utils/mutable-aria-attribute",
                "id": "src/utils/mutable-aria-attribute.ts::AriaAttributeName"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setAriaAttribute(attr: AriaAttributeName, value: string) => Promise<void>",
          "parameters": [
            {
              "name": "attr",
              "type": "\"role\" | `aria-${string}`",
              "docs": ""
            },
            {
              "name": "value",
              "type": "string",
              "docs": ""
            }
          ],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "use the native focus method instead\r\nSets focus on the native `input` in `wcs-input`."
            }
          ],
          "deprecation": "use the native focus method instead\r\nSets focus on the native `input` in `wcs-input`."
        }
      ],
      "events": [
        {
          "event": "wcsBlur",
          "detail": "FocusEvent",
          "bubbles": true,
          "complexType": {
            "original": "FocusEvent",
            "resolved": "FocusEvent",
            "references": {
              "FocusEvent": {
                "location": "global",
                "id": "global::FocusEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input loses focus.",
          "docsTags": []
        },
        {
          "event": "wcsChange",
          "detail": "InputChangeEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "InputChangeEventDetail",
            "resolved": "InputChangeEventDetail",
            "references": {
              "InputChangeEventDetail": {
                "location": "import",
                "path": "./input-interface",
                "id": "src/components/input/input-interface.ts::InputChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value has changed. See https://developer.mozilla.org/en-US/docs/Web/Events/change",
          "docsTags": []
        },
        {
          "event": "wcsFocus",
          "detail": "FocusEvent",
          "bubbles": true,
          "complexType": {
            "original": "FocusEvent",
            "resolved": "FocusEvent",
            "references": {
              "FocusEvent": {
                "location": "global",
                "id": "global::FocusEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has focus.",
          "docsTags": []
        },
        {
          "event": "wcsInput",
          "detail": "KeyboardEvent",
          "bubbles": true,
          "complexType": {
            "original": "KeyboardEvent",
            "resolved": "KeyboardEvent",
            "references": {
              "KeyboardEvent": {
                "location": "global",
                "id": "global::KeyboardEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred. See https://developer.mozilla.org/en-US/docs/Web/Events/input",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [
        {
          "name": "prefix",
          "docs": ""
        },
        {
          "name": "suffix",
          "docs": ""
        }
      ],
      "dependents": [],
      "dependencies": [
        "wcs-mat-icon"
      ],
      "dependencyGraph": {
        "wcs-input": [
          "wcs-mat-icon"
        ]
      }
    },
    {
      "filePath": "src/components/label/label.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-label",
      "readme": "# wcs-label\r\n\r\n\r\n\r",
      "docs": "The `wcs-label` should always be wrapped in a `wcs-form-field`.\r\nIt is used to caption a form control component.\r\n\r\n## Accessibility guidelines 💡\r\n- Use concise name for the label. If you want to describe more your form control, add a `wcs-hint`\r\n- Use the required flag only as an indication to inform users that the form control is required",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "If `true`, marks the label with a red star.\r\nAutomatically added if the wrapped component inside the `wcs-form-field` already has the `required` attribute.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/list-item/list-item.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-list-item",
      "readme": "# List Item\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "activated",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "activated",
          "reflectToAttr": false,
          "docs": "True if the item is active. Adds a background color that highlights it.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/list-item-properties/list-item-properties.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-list-item-properties",
      "readme": "# wcs-list-item-properties\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/list-item-property/list-item-property.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-list-item-property",
      "readme": "# wcs-list-item-property\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/mat-icon/mat-icon.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-mat-icon",
      "readme": "# Material Icon\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "family",
          "type": "\"filled\" | \"outlined\" | \"rounded\" | \"sharp\" | \"twotone\"",
          "complexType": {
            "original": "MaterialIconFamily",
            "resolved": "\"filled\" | \"outlined\" | \"rounded\" | \"sharp\" | \"twotone\"",
            "references": {
              "MaterialIconFamily": {
                "location": "import",
                "path": "./mat-icon-interface",
                "id": "src/components/mat-icon/mat-icon-interface.tsx::MaterialIconFamily"
              }
            }
          },
          "mutable": false,
          "attr": "family",
          "reflectToAttr": false,
          "docs": "Family of the icon",
          "docsTags": [],
          "default": "'filled'",
          "values": [
            {
              "value": "filled",
              "type": "string"
            },
            {
              "value": "outlined",
              "type": "string"
            },
            {
              "value": "rounded",
              "type": "string"
            },
            {
              "value": "sharp",
              "type": "string"
            },
            {
              "value": "twotone",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Use the icon name from Material Icons",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"l\" | \"m\" | \"s\" | \"xl\"",
          "complexType": {
            "original": "MaterialIconSize",
            "resolved": "\"l\" | \"m\" | \"s\" | \"xl\"",
            "references": {
              "MaterialIconSize": {
                "location": "import",
                "path": "./mat-icon-interface",
                "id": "src/components/mat-icon/mat-icon-interface.tsx::MaterialIconSize"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Size of the icon",
          "docsTags": [],
          "default": "'m'",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            },
            {
              "value": "xl",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "wcs-counter",
        "wcs-editable-field",
        "wcs-galactic-menu",
        "wcs-horizontal-stepper",
        "wcs-input",
        "wcs-modal",
        "wcs-textarea"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "wcs-counter": [
          "wcs-mat-icon"
        ],
        "wcs-editable-field": [
          "wcs-mat-icon"
        ],
        "wcs-galactic-menu": [
          "wcs-mat-icon"
        ],
        "wcs-horizontal-stepper": [
          "wcs-mat-icon"
        ],
        "wcs-input": [
          "wcs-mat-icon"
        ],
        "wcs-modal": [
          "wcs-mat-icon"
        ],
        "wcs-textarea": [
          "wcs-mat-icon"
        ]
      }
    },
    {
      "filePath": "src/components/modal/modal.tsx",
      "encapsulation": "none",
      "tag": "wcs-modal",
      "readme": "# Modal\r\n\r\n## Modal without backdrop\r\n\r\n```html\r\n<wcs-modal id=\"modal-2\" backdrop=\"false\" show-close-button=\"true\">\r\n    <div slot=\"header\">Modal title</div>\r\n    Voulez-vous quittez la page ? \r\n    <br/>\r\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis a cursus mi. Nullam et sem mi. Interdum et malesuada fames ac ante ipsum primis in faucibus. Fusce sollicitudin pellentesque libero nec elementum.\r\n    <div slot=\"actions\">\r\n        <wcs-button class=\"wcs-dark\" mode=\"stroked\">C'est non</wcs-button>\r\n        <wcs-button>J'accepte</wcs-button>\r\n    </div>\r\n</wcs-modal>\r\n```\r\n\r\n<wcs-button onclick=\"getElementById('modal-2').setAttribute('show', true)\" id=\"btn-modal-2-show\">\r\n    Afficher la boîte de dialogue\r\n</wcs-button>\r\n\r",
      "docs": "The modal component (also named dialog or popup) is an interface element that appears on top of the page content.\r\nUse it to show a message, a confirmation dialog, or any other content like forms.\r\n\r\n<details>\r\n    <summary>Accessibility guidelines 💡</summary>\r\n    > - Modal element has `role=\"dialog\"` and `aria-modal=\"true\"`\r\n    > - Keyboard navigation is trapped inside the modal\r\n    > - It is mandatory to set the `modal-trigger-controls-id` to the id of the element that opens the dialog, in order\r\n    > to focus it upon dialog dismissal.\r\n    > - The modal can be closed at any time by pressing the Escape key.\r\n    >\r\n    > - More info : https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/\r\n</details>",
      "docsTags": [
        {
          "name": "cssprop",
          "text": "--wcs-modal-max-height - Max height of the main container"
        },
        {
          "name": "cssprop",
          "text": "--wcs-modal-overflow-y - Overflow-y of the content"
        },
        {
          "name": "slot",
          "text": "<no-name> Main container slot"
        },
        {
          "name": "slot",
          "text": "header Header container slot (for title)"
        },
        {
          "name": "slot",
          "text": "actions Actions container slot (for buttons)"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "hideActions",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-actions",
          "reflectToAttr": true,
          "docs": "Specifies whether the component should hide the actions slot or not",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "modalTriggerControlsId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "modal-trigger-controls-id",
          "reflectToAttr": false,
          "docs": "Specifies which element id controls the modal",
          "docsTags": [
            {
              "name": "private"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "show",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "show",
          "reflectToAttr": true,
          "docs": "Displays the modal",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showCloseButton",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-close-button",
          "reflectToAttr": true,
          "docs": "Specifies whether the component should display a close button.\r\nif false, it won't close the modal when the escape key is pressed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"l\" | \"m\" | \"s\" | \"xl\"",
          "complexType": {
            "original": "ModalSize",
            "resolved": "\"l\" | \"m\" | \"s\" | \"xl\"",
            "references": {
              "ModalSize": {
                "location": "import",
                "path": "./modal-interface",
                "id": "src/components/modal/modal-interface.ts::ModalSize"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "There are multiple sizes for modals. The default size is medium (m), however other sizes are available. Select the\r\nsize best suited for the content and screen size displaying the modal. Remember to test responsiveness.",
          "docsTags": [],
          "default": "'m'",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            },
            {
              "value": "xl",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "withoutBackdrop",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "without-backdrop",
          "reflectToAttr": true,
          "docs": "Specifies whether the component should display a backdrop on the entire page",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "wcsDialogClosed",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the user leaves the dialog with the closing button.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "target": "document",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "<no-name> Main container slot",
          "docs": ""
        },
        {
          "name": "actions Actions container slot (for buttons)",
          "docs": ""
        },
        {
          "name": "header Header container slot (for title)",
          "docs": ""
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "wcs-button",
        "wcs-mat-icon"
      ],
      "dependencyGraph": {
        "wcs-modal": [
          "wcs-button",
          "wcs-mat-icon"
        ],
        "wcs-button": [
          "wcs-spinner"
        ]
      }
    },
    {
      "filePath": "src/components/native-select/native-select.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-native-select",
      "readme": "# wcs-select-native\r\n\r\n\r\n\r",
      "docs": "The `wcs-native-select` component is designed to accept a native `<select>` element as a slotted child. This choice\r\nallows developers to bind the `<select>` element using the framework of their choice, without the need to re-expose all the\r\nproperties of the `<select>` and `<option>` elements in this component.\r\n\r\nThe component wraps the native `<select>` element and provides custom styles and behavior, while preserving the native\r\nfunctionality and accessibility.\r\n\r\n### ✅ Guidance\r\n\r\n- To have a placeholder, you must have an option as child which has `selected` attribute and `disabled`\r\nattribute. You can add the `hidden` attribute to don't show the placeholder option in the options overlay.\r\n\r\n### Example usage\r\n\r\n```html\r\n<wcs-native-select>\r\n  <select>\r\n    <option value=\"option1\">Option 1</option>\r\n    <option value=\"option2\">Option 2</option>\r\n    <option value=\"option3\">Option 3</option>\r\n  </select>\r\n</wcs-native-select>\r\n```\r\n\r\n### Note\r\n- We did not find a way to detect when the select is reset, if you want to apply the placeholder style when the\r\nselect is reset, you have to call the `updateStyles()` method manually.\r\n- It is strongly recommended to use select-native when you don't have to support the multi-selection feature",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "size",
          "type": "\"l\" | \"m\"",
          "complexType": {
            "original": "WcsNativeSelectSize",
            "resolved": "\"l\" | \"m\"",
            "references": {
              "WcsNativeSelectSize": {
                "location": "local",
                "path": "C:/Users/Rémi/Documents/Repos/wcs/src/components/native-select/native-select.tsx",
                "id": "src/components/native-select/native-select.tsx::WcsNativeSelectSize"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "The `size` property controls the size of the slotted `select` element by adjusting its padding.\r\nThere are two possible size options:\r\n- 'm': medium size\r\n- 'l': large size\r\n\r\nThe default value is 'm'.",
          "docsTags": [],
          "default": "'m'",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setAriaAttribute",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(attr: AriaAttributeName, value: string) => Promise<void>",
            "parameters": [
              {
                "name": "attr",
                "type": "\"role\" | `aria-${string}`",
                "docs": ""
              },
              {
                "name": "value",
                "type": "string",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "AriaAttributeName": {
                "location": "import",
                "path": "../../utils/mutable-aria-attribute",
                "id": "src/utils/mutable-aria-attribute.ts::AriaAttributeName"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setAriaAttribute(attr: AriaAttributeName, value: string) => Promise<void>",
          "parameters": [
            {
              "name": "attr",
              "type": "\"role\" | `aria-${string}`",
              "docs": ""
            },
            {
              "name": "value",
              "type": "string",
              "docs": ""
            }
          ],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "updateStyles",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "updateStyles() => Promise<void>",
          "parameters": [],
          "docs": "Use this method to force the component to update its styles. It can be useful when the select is reset (with a placeholder).",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/nav/nav.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-nav",
      "readme": "# Nav\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/nav-item/nav-item.tsx",
      "encapsulation": "none",
      "tag": "wcs-nav-item",
      "readme": "# Nav Item\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "href",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": true,
          "docs": "Attributes mapped to a <a> tag.\r\n\r\nDon't forget to specify [routerLink] if using in conjuction with angular router.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text",
          "reflectToAttr": true,
          "docs": "This attribute specify the text of the item.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/progress-bar/progress-bar.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-progress-bar",
      "readme": "# Progress bar\r\n\r",
      "docs": "The progress-bar component is a horizontal bar that indicates the current completion of a task.\r\n\r\n## Accessibility guidelines 💡\r\n> Aria attributes and how to display the progress-bar depend on the use case in your application :\r\n>  \r\n> - **Case 1 : decorative**  \r\n> If the progress-bar is used as a decoration _(if removed, the user doesn't lose any relevant information)_ or in the\r\n> context of another component _(such as progress-bar in a card, stepper, ...)_ => **you don't need to show the label nor add an aria-label**.\r\n> \r\n> - **Case 2 : informative**  \r\n> If the progress-bar is used to convey important information _(e.g., form completion status, dashboard KPI)_, you need to :\r\n>   - **Provide a visible label** that describes the purpose of the progress-bar.\r\n>   - **Set the `showLabel` property to `true`** to show the percentage above the progress-bar.\r\n>   - Optionally, use aria-label to provide an accessible name if a visible label is not present.",
      "docsTags": [
        {
          "name": "cssprop",
          "text": "--wcs-progress-bar-border-radius - Border radius"
        },
        {
          "name": "cssprop",
          "text": "--wcs-progress-bar-border-radius-small - Border radius for size small"
        },
        {
          "name": "cssprop",
          "text": "--wcs-progress-bar-animation-duration - Animation duration"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "showLabel",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-label",
          "reflectToAttr": false,
          "docs": "Whether it displays a label indicating the percentage of progress above the bar.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"m\" | \"s\"",
          "complexType": {
            "original": "Extract<WcsSize, 'm' | 's'>",
            "resolved": "\"m\" | \"s\"",
            "references": {
              "Extract": {
                "location": "global",
                "id": "global::Extract"
              },
              "WcsSize": {
                "location": "import",
                "path": "../../shared-types",
                "id": "src/shared-types.ts::WcsSize"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Specify the size of the progress bar.  \r\nm = default, s = smaller",
          "docsTags": [],
          "default": "'m'",
          "values": [
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The actual value of the progress.\r\nRanging from 0 to 100.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "wcs-horizontal-stepper"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "wcs-horizontal-stepper": [
          "wcs-progress-bar"
        ]
      }
    },
    {
      "filePath": "src/components/progress-radial/progress-radial.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-progress-radial",
      "readme": "# Progress radial\r\n\r",
      "docs": "The progress-radial component is a circular progress bar that indicates the current completion of a task.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "showLabel",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-label",
          "reflectToAttr": false,
          "docs": "Whether the component should display the % label inside",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The size of the progress radial (in px)",
          "docsTags": [],
          "default": "120",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the progress radial. Prefer values between 0 and 100.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/radio/radio.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-radio",
      "readme": "# wcs-radio\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "If `true`, the radio is selected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the user cannot interact with the radio.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "label",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"horizontal\" | \"option\" | \"radio\"",
          "complexType": {
            "original": "RadioGroupMode",
            "resolved": "\"horizontal\" | \"option\" | \"radio\"",
            "references": {
              "RadioGroupMode": {
                "location": "import",
                "path": "../radio-group/radio-group-interface",
                "id": "src/components/radio-group/radio-group-interface.ts::RadioGroupMode"
              }
            }
          },
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "'radio'",
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "option",
              "type": "string"
            },
            {
              "value": "radio",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Giving every radio button the same name is mandatory to group them",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any | any[] | undefined | null",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "wcsRadioClick",
          "detail": "RadioChosedEvent",
          "bubbles": true,
          "complexType": {
            "original": "RadioChosedEvent",
            "resolved": "RadioChosedEvent",
            "references": {
              "RadioChosedEvent": {
                "location": "import",
                "path": "./radio-interface",
                "id": "src/components/radio/radio-interface.ts::RadioChosedEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "wcs-grid"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "wcs-grid": [
          "wcs-radio"
        ]
      }
    },
    {
      "filePath": "src/components/radio-group/radio-group.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-radio-group",
      "readme": "# Radio Group\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "mode",
          "type": "\"horizontal\" | \"option\" | \"radio\"",
          "complexType": {
            "original": "RadioGroupMode",
            "resolved": "\"horizontal\" | \"option\" | \"radio\"",
            "references": {
              "RadioGroupMode": {
                "location": "import",
                "path": "./radio-group-interface",
                "id": "src/components/radio-group/radio-group-interface.ts::RadioGroupMode"
              }
            }
          },
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "'radio'",
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "option",
              "type": "string"
            },
            {
              "value": "radio",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any | any[] | undefined | null",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setAriaAttribute",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(attr: AriaAttributeName, value: string) => Promise<void>",
            "parameters": [
              {
                "name": "attr",
                "type": "\"role\" | `aria-${string}`",
                "docs": ""
              },
              {
                "name": "value",
                "type": "string",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "AriaAttributeName": {
                "location": "import",
                "path": "../../utils/mutable-aria-attribute",
                "id": "src/utils/mutable-aria-attribute.ts::AriaAttributeName"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setAriaAttribute(attr: AriaAttributeName, value: string) => Promise<void>",
          "parameters": [
            {
              "name": "attr",
              "type": "\"role\" | `aria-${string}`",
              "docs": ""
            },
            {
              "name": "value",
              "type": "string",
              "docs": ""
            }
          ],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "wcsChange",
          "detail": "RadioGroupChangeEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "RadioGroupChangeEventDetail",
            "resolved": "RadioGroupChangeEventDetail",
            "references": {
              "RadioGroupChangeEventDetail": {
                "location": "import",
                "path": "./radio-group-interface",
                "id": "src/components/radio-group/radio-group-interface.ts::RadioGroupChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value has changed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "wcsRadioClick",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "keyup",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/select/select.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-select",
      "readme": "\r\n## TODO\r\n\r\n- étudier la possibilité de mieux gérer la taille de l'overlay du select\r\n  - utiliser la variable `--wcs-select-overlay-max-height` ?\r\n  - on essaye de tout afficher, si pas possible on regarde s'il y a plus de place vers le haut\r\n    si c'est le cas, on affiche l'overlay vers le haut avec le maximum d'option à l'écran\r\n    sinon vers le bas, avec un maximum d'options à l'écran. Le plus simple est de faire ces calculs\r\n    au moment du click pour déplier le select, comme c'est le cas actuellement ?\r\n\r\n\r",
      "docs": "The select component (also named combobox) is a form component that allows users to select one or more options\r\nfrom a list.\r\nUse it with several slotted `wcs-select-option` inside.",
      "docsTags": [
        {
          "name": "slot",
          "text": "filter-no-result Contains the customizable \"No result found\" div (autocomplete mode only)."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "autocomplete",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": true,
          "docs": "If `true`, the select acts as an autocomplete field to filter your results.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "chips",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "chips",
          "reflectToAttr": true,
          "docs": "If `true`, selected items are shown in chips mode.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "compareWith",
          "type": "(optionValue: any, selectedValue: any) => boolean",
          "complexType": {
            "original": "(optionValue: any, selectedValue: any) => boolean",
            "resolved": "(optionValue: any, selectedValue: any) => boolean",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Function used to compare options, default : deep comparison.",
          "docsTags": [],
          "default": "(optionValue, selectedValue) => isEqual(optionValue, selectedValue)",
          "values": [
            {
              "type": "(optionValue: any, selectedValue: any) => boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the user cannot interact with the select.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterFn",
          "type": "(optionEl: HTMLWcsSelectOptionElement, filter: string) => boolean",
          "complexType": {
            "original": "WcsSelectFilterFn",
            "resolved": "(optionEl: HTMLWcsSelectOptionElement, filter: string) => boolean",
            "references": {
              "WcsSelectFilterFn": {
                "location": "import",
                "path": "./select-interface",
                "id": "src/components/select/select-interface.ts::WcsSelectFilterFn"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Customizable sort function to change the comparison of values. If not provided, uses the default behavior :\r\n`option.textContent.toLowerCase().startsWith(filter.toLowerCase())`",
          "docsTags": [],
          "values": [
            {
              "type": "(optionEl: HTMLWcsSelectOptionElement, filter: string) => boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": true,
          "docs": "If `true`, the user can select multiple values at once.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string | null",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "placeholder",
          "reflectToAttr": true,
          "docs": "The text to display when the select is empty.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "size",
          "type": "\"l\" | \"m\"",
          "complexType": {
            "original": "WcsSelectSize",
            "resolved": "\"l\" | \"m\"",
            "references": {
              "WcsSelectSize": {
                "location": "import",
                "path": "./select-interface",
                "id": "src/components/select/select-interface.ts::WcsSelectSize"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "Specify the size (height) of the select.",
          "docsTags": [],
          "default": "'m'",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any | null",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The currently selected value.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "close() => Promise<void>",
          "parameters": [],
          "docs": "Close the component.",
          "docsTags": []
        },
        {
          "name": "open",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "open() => Promise<void>",
          "parameters": [],
          "docs": "Open the component.",
          "docsTags": []
        },
        {
          "name": "setAriaAttribute",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(attr: AriaAttributeName, value: string) => Promise<void>",
            "parameters": [
              {
                "name": "attr",
                "type": "\"role\" | `aria-${string}`",
                "docs": ""
              },
              {
                "name": "value",
                "type": "string",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "AriaAttributeName": {
                "location": "import",
                "path": "../../utils/mutable-aria-attribute",
                "id": "src/utils/mutable-aria-attribute.ts::AriaAttributeName"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setAriaAttribute(attr: AriaAttributeName, value: string) => Promise<void>",
          "parameters": [
            {
              "name": "attr",
              "type": "\"role\" | `aria-${string}`",
              "docs": ""
            },
            {
              "name": "value",
              "type": "string",
              "docs": ""
            }
          ],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "wcsBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the select loses focus.",
          "docsTags": []
        },
        {
          "event": "wcsChange",
          "detail": "SelectChangeEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "SelectChangeEventDetail",
            "resolved": "SelectChangeEventDetail",
            "references": {
              "SelectChangeEventDetail": {
                "location": "import",
                "path": "./select-interface",
                "id": "src/components/select/select-interface.ts::SelectChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value has changed.",
          "docsTags": []
        },
        {
          "event": "wcsFilterChange",
          "detail": "SelectFilerChangeEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "SelectFilerChangeEventDetail",
            "resolved": "SelectFilerChangeEventDetail",
            "references": {
              "SelectFilerChangeEventDetail": {
                "location": "import",
                "path": "./select-interface",
                "id": "src/components/select/select-interface.ts::SelectFilerChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the autocomplete filter has changed.",
          "docsTags": []
        },
        {
          "event": "wcsFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the select has focus.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "mousedown",
          "capture": false,
          "passive": true
        },
        {
          "event": "click",
          "target": "window",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "wcsSelectOptionClick",
          "capture": false,
          "passive": false
        },
        {
          "event": "focus",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "filter-no-result Contains the customizable \"No result found\" div (autocomplete mode only).",
          "docs": ""
        }
      ],
      "parts": [],
      "dependents": [
        "wcs-grid-pagination"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "wcs-grid-pagination": [
          "wcs-select"
        ]
      }
    },
    {
      "filePath": "src/components/select-option/select-option.tsx",
      "encapsulation": "none",
      "tag": "wcs-select-option",
      "readme": "# Select option\r\n\r\n\r\n\r",
      "docs": "The select option is a subcomponent of `wcs-select` that represents a single option in a select list.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "chipBackgroundColor",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "chip-background-color",
          "reflectToAttr": false,
          "docs": "Chip's background color.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "chipColor",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "chip-color",
          "reflectToAttr": false,
          "docs": "Chip's displayed text color.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Whether this option can be selected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "Whether this option is selected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The option value, not what's displayed, use inner text instead.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "wcsSelectOptionClick",
          "detail": "SelectOptionChosedEvent",
          "bubbles": true,
          "complexType": {
            "original": "SelectOptionChosedEvent",
            "resolved": "SelectOptionChosedEvent",
            "references": {
              "SelectOptionChosedEvent": {
                "location": "import",
                "path": "./select-option-interface",
                "id": "src/components/select-option/select-option-interface.ts::SelectOptionChosedEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "mousedown",
          "capture": false,
          "passive": true
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "wcs-grid-pagination"
      ],
      "dependencies": [
        "wcs-checkbox"
      ],
      "dependencyGraph": {
        "wcs-select-option": [
          "wcs-checkbox"
        ],
        "wcs-grid-pagination": [
          "wcs-select-option"
        ]
      }
    },
    {
      "filePath": "src/components/skeleton-circle/skeleton-circle.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-skeleton-circle",
      "readme": "# wcs-skeleton-circle\r\n\r\n\r\n\r",
      "docs": "Use a skeleton circle as a placeholder round images, illustrations or components",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "animation",
          "type": "\"glide\" | \"none\" | \"pulse\"",
          "complexType": {
            "original": "WcsSkeletonAnimation",
            "resolved": "\"glide\" | \"none\" | \"pulse\"",
            "references": {
              "WcsSkeletonAnimation": {
                "location": "import",
                "path": "../skeleton/skeleton-interface",
                "id": "src/components/skeleton/skeleton-interface.ts::WcsSkeletonAnimation"
              }
            }
          },
          "mutable": false,
          "attr": "animation",
          "reflectToAttr": true,
          "docs": "Specifies the animation of the skeleton",
          "docsTags": [],
          "default": "'glide'",
          "values": [
            {
              "value": "glide",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "pulse",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "radius",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "radius",
          "reflectToAttr": true,
          "docs": "Specifies the radius of the circle in px",
          "docsTags": [],
          "default": "50",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/skeleton-rectangle/skeleton-rectangle.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-skeleton-rectangle",
      "readme": "# wcs-skeleton-rectangle\r\n\r\n\r\n\r",
      "docs": "Use a skeleton rectangle as a placeholder for large images or square-shaped components",
      "docsTags": [
        {
          "name": "cssprop",
          "text": "--wcs-skeleton-border-radius - Controls the border-radius of the 'rounded' skeleton rectangle (default 0.5rem)"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "animation",
          "type": "\"glide\" | \"none\" | \"pulse\"",
          "complexType": {
            "original": "WcsSkeletonAnimation",
            "resolved": "\"glide\" | \"none\" | \"pulse\"",
            "references": {
              "WcsSkeletonAnimation": {
                "location": "import",
                "path": "../skeleton/skeleton-interface",
                "id": "src/components/skeleton/skeleton-interface.ts::WcsSkeletonAnimation"
              }
            }
          },
          "mutable": false,
          "attr": "animation",
          "reflectToAttr": true,
          "docs": "Specifies the animation of the skeleton",
          "docsTags": [],
          "default": "'glide'",
          "values": [
            {
              "value": "glide",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "pulse",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "height",
          "type": "LengthOrPercentage | Keyword | Global",
          "complexType": {
            "original": "CssTypes.Height",
            "resolved": "LengthOrPercentage | Keyword | Global",
            "references": {
              "CssTypes": {
                "location": "import",
                "path": "../../shared-types",
                "id": "src/shared-types.ts::CssTypes"
              }
            }
          },
          "mutable": false,
          "attr": "height",
          "reflectToAttr": true,
          "docs": "Specifies the height of the skeleton (can be any valid CSS value)",
          "docsTags": [],
          "default": "'auto'",
          "values": [
            {
              "type": "LengthOrPercentage"
            },
            {
              "type": "Keyword"
            },
            {
              "type": "Global"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rounded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "rounded",
          "reflectToAttr": true,
          "docs": "Adds a border radius on the skeleton if true",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "width",
          "type": "LengthOrPercentage | Keyword | Global",
          "complexType": {
            "original": "CssTypes.Width",
            "resolved": "LengthOrPercentage | Keyword | Global",
            "references": {
              "CssTypes": {
                "location": "import",
                "path": "../../shared-types",
                "id": "src/shared-types.ts::CssTypes"
              }
            }
          },
          "mutable": false,
          "attr": "width",
          "reflectToAttr": true,
          "docs": "Specifies the width of the skeleton (can be any valid CSS value)",
          "docsTags": [],
          "default": "'auto'",
          "values": [
            {
              "type": "LengthOrPercentage"
            },
            {
              "type": "Keyword"
            },
            {
              "type": "Global"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/skeleton-text/skeleton-text.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-skeleton-text",
      "readme": "# wcs-skeleton-text\r\n\r\n\r\n\r",
      "docs": "Use a skeleton text as a placeholder for titles or paragraphs.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "animation",
          "type": "\"glide\" | \"none\" | \"pulse\"",
          "complexType": {
            "original": "WcsSkeletonAnimation",
            "resolved": "\"glide\" | \"none\" | \"pulse\"",
            "references": {
              "WcsSkeletonAnimation": {
                "location": "import",
                "path": "../skeleton/skeleton-interface",
                "id": "src/components/skeleton/skeleton-interface.ts::WcsSkeletonAnimation"
              }
            }
          },
          "mutable": false,
          "attr": "animation",
          "reflectToAttr": true,
          "docs": "Specifies the animation of the skeleton",
          "docsTags": [],
          "default": "'glide'",
          "values": [
            {
              "value": "glide",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "pulse",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "height",
          "type": "\"body\" | \"caption\" | \"h1\" | \"h2\" | \"h3\"",
          "complexType": {
            "original": "'h1' | 'h2' | 'h3' | 'caption' | 'body'",
            "resolved": "\"body\" | \"caption\" | \"h1\" | \"h2\" | \"h3\"",
            "references": {}
          },
          "mutable": false,
          "attr": "height",
          "reflectToAttr": false,
          "docs": "Specifies the line height of the text skeleton",
          "docsTags": [],
          "default": "'body'",
          "values": [
            {
              "value": "body",
              "type": "string"
            },
            {
              "value": "caption",
              "type": "string"
            },
            {
              "value": "h1",
              "type": "string"
            },
            {
              "value": "h2",
              "type": "string"
            },
            {
              "value": "h3",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/spinner/spinner.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-spinner",
      "readme": "# Spinner\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "mode",
          "type": "\"border\" | \"growing\"",
          "complexType": {
            "original": "WcsSpinnerMode",
            "resolved": "\"border\" | \"growing\"",
            "references": {
              "WcsSpinnerMode": {
                "location": "import",
                "path": "./spinner-interface",
                "id": "src/components/spinner/spinner-interface.ts::WcsSpinnerMode"
              }
            }
          },
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": true,
          "docs": "Indicates the spinner display mode.\r\nAccepted values: `border` or `growing`",
          "docsTags": [],
          "default": "'border'",
          "values": [
            {
              "value": "border",
              "type": "string"
            },
            {
              "value": "growing",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "wcs-button",
        "wcs-editable-field",
        "wcs-grid"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "wcs-button": [
          "wcs-spinner"
        ],
        "wcs-editable-field": [
          "wcs-spinner"
        ],
        "wcs-grid": [
          "wcs-spinner"
        ]
      }
    },
    {
      "filePath": "src/components/switch/switch.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-switch",
      "readme": "# Switch\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "If `true`, the switch is selected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Specify wether the switch is disabled or not.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelAlignment",
          "type": "\"bottom\" | \"center\" | \"top\"",
          "complexType": {
            "original": "SwitchLabelAlignment",
            "resolved": "\"bottom\" | \"center\" | \"top\"",
            "references": {
              "SwitchLabelAlignment": {
                "location": "import",
                "path": "./switch-interface",
                "id": "src/components/switch/switch-interface.ts::SwitchLabelAlignment"
              }
            }
          },
          "mutable": false,
          "attr": "label-alignment",
          "reflectToAttr": true,
          "docs": "Specifie the alignment of the switch with the label content",
          "docsTags": [],
          "default": "'center'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "this.switchId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setAriaAttribute",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(attr: AriaAttributeName, value: string) => Promise<void>",
            "parameters": [
              {
                "name": "attr",
                "type": "\"role\" | `aria-${string}`",
                "docs": ""
              },
              {
                "name": "value",
                "type": "string",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "AriaAttributeName": {
                "location": "import",
                "path": "../../utils/mutable-aria-attribute",
                "id": "src/utils/mutable-aria-attribute.ts::AriaAttributeName"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setAriaAttribute(attr: AriaAttributeName, value: string) => Promise<void>",
          "parameters": [
            {
              "name": "attr",
              "type": "\"role\" | `aria-${string}`",
              "docs": ""
            },
            {
              "name": "value",
              "type": "string",
              "docs": ""
            }
          ],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "wcsChange",
          "detail": "SwitchChangeEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "SwitchChangeEventDetail",
            "resolved": "SwitchChangeEventDetail",
            "references": {
              "SwitchChangeEventDetail": {
                "location": "import",
                "path": "./switch-interface",
                "id": "src/components/switch/switch-interface.ts::SwitchChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the checked property has changed.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/tab/tab.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-tab",
      "readme": "# Tab\r\n\r",
      "docs": "Tab content component.\r\nUse this component to specify the content of a component.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "header",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "header",
          "reflectToAttr": true,
          "docs": "The header you want to be displayed for this tab.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "itemKey",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "item-key",
          "reflectToAttr": false,
          "docs": "The id of the tab. It should be unique.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "tabLoaded",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Do not use, meant for internal use only.",
          "docsTags": [
            {
              "name": "inner"
            },
            {
              "name": "ignore"
            }
          ]
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/tabs/tabs.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-tabs",
      "readme": "# Tabs\r\n\r",
      "docs": "Tabs component to switch between tab content.\r\nUse in conjuction with `wcs-tab`.",
      "docsTags": [
        {
          "name": "example",
          "text": "```html\r\n<wcs-tabs>\r\n   <wcs-tab header=\"One\">The content !</wcs-tab>\r\n   <wcs-tab header=\"Two\">More content !</wcs-tab>\r\n</wcs-tabs>\r\n```"
        },
        {
          "name": "cssprop",
          "text": "--wcs-tabs-width - Width of each tab"
        },
        {
          "name": "cssprop",
          "text": "--wcs-tabs-padding-horizontal - Width of each tab"
        },
        {
          "name": "cssprop",
          "text": "--wcs-tabs-padding-vertical - Vertical padding"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "align",
          "type": "\"center\" | \"end\" | \"start\"",
          "complexType": {
            "original": "WcsTabsAlignment",
            "resolved": "\"center\" | \"end\" | \"start\"",
            "references": {
              "WcsTabsAlignment": {
                "location": "import",
                "path": "./tabs-interface",
                "id": "src/components/tabs/tabs-interface.ts::WcsTabsAlignment"
              }
            }
          },
          "mutable": false,
          "attr": "align",
          "reflectToAttr": true,
          "docs": "Tab headers alignment.",
          "docsTags": [],
          "default": "'start'",
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "description",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "description",
          "reflectToAttr": false,
          "docs": "Description is used to provide aria-label for the tabs container which has `role=\"tablist\"`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "gutter",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "gutter",
          "reflectToAttr": false,
          "docs": "Determines if tabs header should have a border at the bottom",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headersOnly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "headers-only",
          "reflectToAttr": false,
          "docs": "Whether to skip rendering the tabpanel with the content of the selected tab. Use this prop if you plan to\r\nseparately render the tab content.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedIndex",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "selected-index",
          "reflectToAttr": false,
          "docs": "Current selected tab index.\r\nStarts at 0.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedKey",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "selected-key",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "tabChange",
          "detail": "WcsTabChangeEvent",
          "bubbles": true,
          "complexType": {
            "original": "WcsTabChangeEvent",
            "resolved": "WcsTabChangeEvent",
            "references": {
              "WcsTabChangeEvent": {
                "location": "import",
                "path": "./tabs-interface",
                "id": "src/components/tabs/tabs-interface.ts::WcsTabChangeEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "\r\nEmitted when the selected tab change.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "tabLoaded",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/textarea/textarea.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-textarea",
      "readme": "# Textarea\r\n\r\n\r\n\r",
      "docs": "Mainly inspired from Ionic Textarea Component.\r\n\r\n## Accessibility guidelines 💡\r\n> `wcs-textarea` is a wrapper around the native textarea element which is located inside its shadow DOM. All the\r\n> **aria attributes** you set on `wcs-textarea` are passed to the **native textarea** element **during the first render of the component**.\r\n> If you need to use them as you would with a native textarea, you can do so.\r\n\r\n> If you need to **dynamically change the aria attributes after the first render**, you can use the `setAriaAttribute`\r\n> JS method of `wcs-textarea` :\r\n\r\n> ```javascript\r\n> const wcsTextarea = document.querySelector('wcs-textarea');\r\n> await wcsTextarea.setAriaAttribute('aria-label', 'new label');\r\n> ```\r\n\r\n> If you use wcs-textarea outside a wcs-form-field, you have to manage the label and the error message yourself.\r\n> You can use the `aria-label` attribute to provide a label for screen readers but adds no visual label.",
      "docsTags": [
        {
          "name": "cssprop",
          "text": "--wcs-textarea-max-height - Max height of the text area component"
        },
        {
          "name": "cssprop",
          "text": "--wcs-textarea-padding-left - Padding left of the text area. Take in consideration the transparent border of 2px around the textarea."
        },
        {
          "name": "cssprop",
          "text": "--wcs-textarea-padding-right - Padding right of the text area. Take in consideration the transparent border of 2px around the textarea."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "autoGrow",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "auto-grow",
          "reflectToAttr": false,
          "docs": "If `true`, the element height will increase based on the value.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autocapitalize",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "autocapitalize",
          "reflectToAttr": false,
          "docs": "Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.",
          "docsTags": [],
          "default": "'none'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "This Boolean attribute lets you specify that a form control should have input focus when the page loads.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clearOnEdit",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "clear-on-edit",
          "reflectToAttr": false,
          "docs": "If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `\"password\"`, `false` for all other types.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "cols",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "cols",
          "reflectToAttr": false,
          "docs": "The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.  \r\nNote : at the moment, modifying the width is only possible if you add some custom CSS to the component,\r\nfor example by overriding the `width` CSS property. See the Resize section for an example on how to do it.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "debounce",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "Set the amount of time, in milliseconds, to wait to trigger the `wcsInput` event after each keystroke.\r\nThis also impacts form bindings such as `ngModel` or `v-model`.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the user cannot interact with the textarea.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "enterkeyhint",
          "type": "\"done\" | \"enter\" | \"go\" | \"next\" | \"previous\" | \"search\" | \"send\"",
          "complexType": {
            "original": "WcsTextareaEnterKeyHint",
            "resolved": "\"done\" | \"enter\" | \"go\" | \"next\" | \"previous\" | \"search\" | \"send\"",
            "references": {
              "WcsTextareaEnterKeyHint": {
                "location": "import",
                "path": "./textarea-interface",
                "id": "src/components/textarea/textarea-interface.ts::WcsTextareaEnterKeyHint"
              }
            }
          },
          "mutable": false,
          "attr": "enterkeyhint",
          "reflectToAttr": false,
          "docs": "A hint to the browser for which enter key to display.",
          "docsTags": [],
          "values": [
            {
              "value": "done",
              "type": "string"
            },
            {
              "value": "enter",
              "type": "string"
            },
            {
              "value": "go",
              "type": "string"
            },
            {
              "value": "next",
              "type": "string"
            },
            {
              "value": "previous",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "send",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Name of the material icon to add to the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputmode",
          "type": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\"",
          "complexType": {
            "original": "WcsTextareaInputMode",
            "resolved": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\"",
            "references": {
              "WcsTextareaInputMode": {
                "location": "import",
                "path": "./textarea-interface",
                "id": "src/components/textarea/textarea-interface.ts::WcsTextareaInputMode"
              }
            }
          },
          "mutable": false,
          "attr": "inputmode",
          "reflectToAttr": false,
          "docs": "A hint to the browser for which keyboard to display.",
          "docsTags": [],
          "values": [
            {
              "value": "decimal",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "numeric",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "maxlength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "minlength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "minlength",
          "reflectToAttr": false,
          "docs": "If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string | null",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Instructional text that shows before the input has a value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If `true`, the user cannot modify the value.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If `true`, the user must fill in a value before submitting a form.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "resize",
          "type": "\"both\" | \"horizontal\" | \"none\" | \"vertical\"",
          "complexType": {
            "original": "WcsTextareaResize",
            "resolved": "\"both\" | \"horizontal\" | \"none\" | \"vertical\"",
            "references": {
              "WcsTextareaResize": {
                "location": "import",
                "path": "./textarea-interface",
                "id": "src/components/textarea/textarea-interface.ts::WcsTextareaResize"
              }
            }
          },
          "mutable": false,
          "attr": "resize",
          "reflectToAttr": true,
          "docs": "Indicates how the textarea should be resizable.  \r\nNote : at the moment horizontal resizing is only possible if you add custom CSS to the component,\r\nsee the Resize section for an example.",
          "docsTags": [],
          "values": [
            {
              "value": "both",
              "type": "string"
            },
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "rows",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "rows",
          "reflectToAttr": false,
          "docs": "The number of visible text lines for the control.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "spellcheck",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "spellcheck",
          "reflectToAttr": false,
          "docs": "If `true`, the element will have its spelling and grammar checked.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "\"error\" | \"initial\"",
          "complexType": {
            "original": "WcsTextareaInputState",
            "resolved": "\"error\" | \"initial\"",
            "references": {
              "WcsTextareaInputState": {
                "location": "import",
                "path": "./textarea-interface",
                "id": "src/components/textarea/textarea-interface.ts::WcsTextareaInputState"
              }
            }
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": true,
          "docs": "Specifies the state of the input. By default the input is in an initial state but you can set it to 'error' state if the data given by the user is not valid.",
          "docsTags": [],
          "default": "'initial'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "initial",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string | null",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the textarea.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "wrap",
          "type": "\"hard\" | \"off\" | \"soft\"",
          "complexType": {
            "original": "WcsTextareaWrap",
            "resolved": "\"hard\" | \"off\" | \"soft\"",
            "references": {
              "WcsTextareaWrap": {
                "location": "import",
                "path": "./textarea-interface",
                "id": "src/components/textarea/textarea-interface.ts::WcsTextareaWrap"
              }
            }
          },
          "mutable": false,
          "attr": "wrap",
          "reflectToAttr": false,
          "docs": "Indicates how the control wraps text.",
          "docsTags": [],
          "values": [
            {
              "value": "hard",
              "type": "string"
            },
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "soft",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "fitContent",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "fitContent() => Promise<void>",
          "parameters": [],
          "docs": "This method make the textarea automatically adopt the size of the content without a scroll bar",
          "docsTags": []
        },
        {
          "name": "getInputElement",
          "returns": {
            "type": "Promise<HTMLTextAreaElement>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<HTMLTextAreaElement>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLTextAreaElement": {
                "location": "global",
                "id": "global::HTMLTextAreaElement"
              }
            },
            "return": "Promise<HTMLTextAreaElement>"
          },
          "signature": "getInputElement() => Promise<HTMLTextAreaElement>",
          "parameters": [],
          "docs": "Returns the native `<textarea>` element used under the hood.",
          "docsTags": []
        },
        {
          "name": "setAriaAttribute",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(attr: AriaAttributeName, value: string) => Promise<void>",
            "parameters": [
              {
                "name": "attr",
                "type": "\"role\" | `aria-${string}`",
                "docs": ""
              },
              {
                "name": "value",
                "type": "string",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "AriaAttributeName": {
                "location": "import",
                "path": "../../utils/mutable-aria-attribute",
                "id": "src/utils/mutable-aria-attribute.ts::AriaAttributeName"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setAriaAttribute(attr: AriaAttributeName, value: string) => Promise<void>",
          "parameters": [
            {
              "name": "attr",
              "type": "\"role\" | `aria-${string}`",
              "docs": ""
            },
            {
              "name": "value",
              "type": "string",
              "docs": ""
            }
          ],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "use the native focus method instead  \r\nSets focus on the native `textarea` in `wcs-textarea`."
            }
          ],
          "deprecation": "use the native focus method instead  \r\nSets focus on the native `textarea` in `wcs-textarea`."
        }
      ],
      "events": [
        {
          "event": "wcsBlur",
          "detail": "FocusEvent",
          "bubbles": true,
          "complexType": {
            "original": "FocusEvent",
            "resolved": "FocusEvent",
            "references": {
              "FocusEvent": {
                "location": "global",
                "id": "global::FocusEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input loses focus.",
          "docsTags": []
        },
        {
          "event": "wcsChange",
          "detail": "TextareaChangeEventDetail",
          "bubbles": true,
          "complexType": {
            "original": "TextareaChangeEventDetail",
            "resolved": "TextareaChangeEventDetail",
            "references": {
              "TextareaChangeEventDetail": {
                "location": "import",
                "path": "./textarea-interface",
                "id": "src/components/textarea/textarea-interface.ts::TextareaChangeEventDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input value has changed.- See https://developer.mozilla.org/en-US/docs/Web/Events/change",
          "docsTags": []
        },
        {
          "event": "wcsFocus",
          "detail": "FocusEvent",
          "bubbles": true,
          "complexType": {
            "original": "FocusEvent",
            "resolved": "FocusEvent",
            "references": {
              "FocusEvent": {
                "location": "global",
                "id": "global::FocusEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has focus.",
          "docsTags": []
        },
        {
          "event": "wcsInput",
          "detail": "KeyboardEvent",
          "bubbles": true,
          "complexType": {
            "original": "KeyboardEvent",
            "resolved": "KeyboardEvent",
            "references": {
              "KeyboardEvent": {
                "location": "global",
                "id": "global::KeyboardEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred. See https://developer.mozilla.org/en-US/docs/Web/Events/input",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "wcs-mat-icon"
      ],
      "dependencyGraph": {
        "wcs-textarea": [
          "wcs-mat-icon"
        ]
      }
    },
    {
      "filePath": "src/components/tooltip/tooltip.tsx",
      "encapsulation": "shadow",
      "tag": "wcs-tooltip",
      "readme": "# Tooltip\r\n\r",
      "docs": "Tooltips are used to provide additional information for features available on the website. These can improve the user\r\nexperience or simply show additional information. Tooltips appear when the user rolls over or clicks on them\r\n(for longer content).\r\n\r\nNote that this component is based on the Tippy.js library : https://atomiks.github.io/tippyjs/",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "appendTo",
          "type": "\"parent\" | ((ref: Element) => Element) | Element",
          "complexType": {
            "original": "WcsTooltipAppendTo",
            "resolved": "\"parent\" | ((ref: Element) => Element) | Element",
            "references": {
              "WcsTooltipAppendTo": {
                "location": "import",
                "path": "./tooltip-interface",
                "id": "src/components/tooltip/tooltip-interface.ts::WcsTooltipAppendTo"
              }
            }
          },
          "mutable": false,
          "attr": "append-to",
          "reflectToAttr": false,
          "docs": "The element to append the tooltip to. Default behaviour is `() => document.body`. If interactive: true,\r\nthe default behavior is appendTo: \"parent\"\r\n\r\nSee: https://atomiks.github.io/tippyjs/v6/all-props/#appendto",
          "docsTags": [],
          "values": [
            {
              "value": "parent",
              "type": "string"
            },
            {
              "type": "((ref: Element) => Element)"
            },
            {
              "type": "Element"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "content",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "content",
          "reflectToAttr": false,
          "docs": "You can use this property instead of the slot API to affect content in the tooltip.\r\n\r\nThis makes it easier to manage the update if the tooltip contains elements that are not mutated when their\r\ncontent changes. Indeed, if the slot is used, the tooltip is updated only if the structure of the slotted DOM\r\nchanges (the DOM must be mutated).\r\n\r\nThe two APIs are not mutually exclusive, if both are filled in (the prop + the slot) the rendering will first\r\ndisplay the content of this property and then the slotted elements.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "delay",
          "type": "[number, number] | number",
          "complexType": {
            "original": "number | [number, number]",
            "resolved": "[number, number] | number",
            "references": {}
          },
          "mutable": false,
          "attr": "delay",
          "reflectToAttr": false,
          "docs": "Delay in ms once a trigger event is fired before the tooltip shows or hides.\r\n\r\nYou can provide an array with two values to define a different duration for show and hide.\r\n\r\n`[showDelay, hideDelay]`\r\n\r\nUse null to use default value.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "[number, number]"
            },
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "duration",
          "type": "[number, number] | number",
          "complexType": {
            "original": "number | [number, number]",
            "resolved": "[number, number] | number",
            "references": {}
          },
          "mutable": false,
          "attr": "duration",
          "reflectToAttr": false,
          "docs": "Duration in ms of the transition animation.",
          "docsTags": [],
          "default": "[300, 250]",
          "values": [
            {
              "type": "[number, number]"
            },
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "for",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "for",
          "reflectToAttr": false,
          "docs": "The **id** of the element the tooltip's going to describe.\r\n\r\nThis property cannot be modified after initialization.",
          "docsTags": [
            {
              "name": "example",
              "text": "```html\r\n<span id=\"tooltiped\">Some content</span>\r\n<wcs-tooltip for=\"tooltiped\">A tooltip!</wcs-tooltip>\r\n```"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "interactive",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "interactive",
          "reflectToAttr": false,
          "docs": "Determines if the tooltip has interactive content inside of it, so that it can be hovered over and clicked inside\r\nwithout hiding.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxWidth",
          "type": "number | string",
          "complexType": {
            "original": "string | number",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": false,
          "attr": "max-width",
          "reflectToAttr": false,
          "docs": "Specifies the maximum width of the tooltip. Useful to prevent it from being too horizontally wide to read.\r\n\r\nIf the viewport's width is smaller than maxWidth, core CSS ensures the tippy remains smaller than the screen.",
          "docsTags": [],
          "default": "350",
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "\"bottom\" | \"left\" | \"right\" | \"top\"",
          "complexType": {
            "original": "WcsTooltipPosition",
            "resolved": "\"bottom\" | \"left\" | \"right\" | \"top\"",
            "references": {
              "WcsTooltipPosition": {
                "location": "import",
                "path": "./tooltip-interface",
                "id": "src/components/tooltip/tooltip-interface.ts::WcsTooltipPosition"
              }
            }
          },
          "mutable": false,
          "attr": "position",
          "reflectToAttr": true,
          "docs": "Where the tooltip is going to show relative to the element it's describing.",
          "docsTags": [],
          "default": "'bottom'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "theme",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "theme",
          "reflectToAttr": false,
          "docs": "Allows you to change the theme used by tippy.\r\n\r\nThe WCS theme is used by default and uses the WCS CSS variables.\r\n\r\nYou can create a theme by following this documentation and choosing a custom name :\r\nhttps://atomiks.github.io/tippyjs/v6/themes/",
          "docsTags": [],
          "default": "'wcs'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trigger",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "trigger",
          "reflectToAttr": false,
          "docs": "Determines the events that cause the tooltip to show. Multiple event names are separated by spaces.\r\n\r\nSee: https://atomiks.github.io/tippyjs/v6/all-props/#trigger",
          "docsTags": [],
          "default": "'mouseenter focus'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "disable",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "disable() => Promise<void>",
          "parameters": [],
          "docs": "Temporarily prevent the tooltip from showing or hiding",
          "docsTags": []
        },
        {
          "name": "enable",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "enable() => Promise<void>",
          "parameters": [],
          "docs": "Re-enable a disabled tooltip",
          "docsTags": []
        },
        {
          "name": "hide",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "hide() => Promise<void>",
          "parameters": [],
          "docs": "Programmatically hide the tooltip",
          "docsTags": []
        },
        {
          "name": "show",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "show() => Promise<void>",
          "parameters": [],
          "docs": "Programmatically show the tooltip",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    }
  ],
  "typeLibrary": {
    "src/components/native-select/native-select.tsx::WcsNativeSelectSize": {
      "declaration": "export type WcsNativeSelectSize = Extract<WcsSize, 'l' | 'm'>;",
      "docstring": "",
      "path": "src/components/native-select/native-select.tsx"
    },
    "src/utils/mutable-aria-attribute.ts::AriaAttributeName": {
      "declaration": "export type AriaAttributeName = `aria-${string}` | 'role';",
      "docstring": "",
      "path": "src/utils/mutable-aria-attribute.ts"
    },
    "src/components/badge/badge-interface.ts::BadgeShape": {
      "declaration": "export type BadgeShape = 'normal' | 'rounded';",
      "docstring": "",
      "path": "src/components/badge/badge-interface.ts"
    },
    "src/components/badge/badge-interface.ts::BadgeColor": {
      "declaration": "export type BadgeColor = 'initial' | 'lighter';",
      "docstring": "",
      "path": "src/components/badge/badge-interface.ts"
    },
    "src/components/badge/badge-interface.ts::BadgeSize": {
      "declaration": "export type BadgeSize =  Extract<WcsSize, 'l' | 'm' | 's'>",
      "docstring": "",
      "path": "src/components/badge/badge-interface.ts"
    },
    "src/components/button/button-interface.ts::WcsButtonType": {
      "declaration": "export type WcsButtonType = 'button' | 'submit';",
      "docstring": "",
      "path": "src/components/button/button-interface.ts"
    },
    "src/components/button/button-interface.ts::WcsButtonSize": {
      "declaration": "export type WcsButtonSize = Extract<WcsSize, typeof WcsButtonSizeValues[number]>;",
      "docstring": "",
      "path": "src/components/button/button-interface.ts"
    },
    "src/components/button/button-interface.ts::WcsButtonShape": {
      "declaration": "export type WcsButtonShape = 'normal' | 'round' | 'square';",
      "docstring": "",
      "path": "src/components/button/button-interface.ts"
    },
    "src/components/button/button-interface.ts::WcsButtonMode": {
      "declaration": "export type WcsButtonMode = 'plain' | 'stroked' | 'clear';",
      "docstring": "",
      "path": "src/components/button/button-interface.ts"
    },
    "src/components/card/card-interface.ts::CardMode": {
      "declaration": "export type CardMode = 'flat' | 'raised';",
      "docstring": "",
      "path": "src/components/card/card-interface.ts"
    },
    "src/components/checkbox/checkbox-interface.ts::CheckboxLabelAlignment": {
      "declaration": "export type CheckboxLabelAlignment = 'top' | 'center' | 'bottom';",
      "docstring": "",
      "path": "src/components/checkbox/checkbox-interface.ts"
    },
    "src/components/checkbox/checkbox-interface.ts::CheckboxChangeEventDetail": {
      "declaration": "export interface CheckboxChangeEventDetail {\r\n    checked: boolean;\r\n}",
      "docstring": "",
      "path": "src/components/checkbox/checkbox-interface.ts"
    },
    "src/components/com-nav/com-nav-interface.ts::CategoryOpenedEventDetail": {
      "declaration": "export interface CategoryOpenedEventDetail {\r\n    categoryElement: HTMLWcsComNavCategoryElement;\r\n}",
      "docstring": "",
      "path": "src/components/com-nav/com-nav-interface.ts"
    },
    "src/components/com-nav/com-nav-interface.ts::MenuOpenedEventDetail": {
      "declaration": "export interface MenuOpenedEventDetail {\r\n    menuElement: HTMLWcsComNavSubmenuElement;\r\n}",
      "docstring": "",
      "path": "src/components/com-nav/com-nav-interface.ts"
    },
    "src/components/counter/counter-interface.ts::WcsCounterSize": {
      "declaration": "export type WcsCounterSize = Extract<WcsSize, typeof WcsCounterSizeValues[number]>;",
      "docstring": "",
      "path": "src/components/counter/counter-interface.ts"
    },
    "src/components/counter/counter-interface.ts::CounterChangeEventDetail": {
      "declaration": "export interface CounterChangeEventDetail {\r\n    value: number;\r\n}",
      "docstring": "",
      "path": "src/components/counter/counter-interface.ts"
    },
    "src/components/dropdown/dropdown-interface.ts::WcsDropdownPlacement": {
      "declaration": "export type WcsDropdownPlacement =\r\n    | 'auto'\r\n    | 'auto-start'\r\n    | 'auto-end'\r\n    | 'top'\r\n    | 'top-start'\r\n    | 'top-end'\r\n    | 'bottom'\r\n    | 'bottom-start'\r\n    | 'bottom-end'\r\n    | 'right'\r\n    | 'right-start'\r\n    | 'right-end'\r\n    | 'left'\r\n    | 'left-start'\r\n    | 'left-end';",
      "docstring": "",
      "path": "src/components/dropdown/dropdown-interface.ts"
    },
    "src/components/editable-field/editable-field-interface.tsx::EditableFieldType": {
      "declaration": "export type EditableFieldType = 'input' | 'textarea' | 'select';",
      "docstring": "",
      "path": "src/components/editable-field/editable-field-interface.tsx"
    },
    "src/components/editable-field/editable-field-interface.tsx::ValidateFn": {
      "declaration": "(value: T) => boolean",
      "docstring": "",
      "path": "src/components/editable-field/editable-field-interface.tsx"
    },
    "src/components/editable-field/editable-field-interface.tsx::FormatFn": {
      "declaration": "(value: T) => string",
      "docstring": "",
      "path": "src/components/editable-field/editable-field-interface.tsx"
    },
    "src/components/editable-field/editable-field-interface.tsx::WcsEditableFieldSize": {
      "declaration": "export type WcsEditableFieldSize = Extract<WcsSize, typeof WcsEditableFieldSizeValues[number]>;",
      "docstring": "",
      "path": "src/components/editable-field/editable-field-interface.tsx"
    },
    "src/components/editable-field/editable-field-interface.tsx::EditableComponentUpdateEvent": {
      "declaration": "export interface EditableComponentUpdateEvent {\r\n    /**\r\n     * The new value sent by the component inside the `wcs-editable-field`\r\n     */\r\n    newValue: any; // We use any for now, but when components typings will support template, change for parameterized type\r\n    /**\r\n     * Used to get from LOAD state to DISPLAY state.  \r\n     * Only use to commit the value, when the value is not systematically updated at every event firing\r\n     */\r\n    successHandler: () => void;\r\n    /**\r\n     * Used to get from LOAD state to DISPLAY state.  \r\n     * Only use to discard the value, when the value should not be updated \r\n     */\r\n    // FIXME (next-release): rename to `errorHandler`\r\n    errorhandler: () => void;\r\n}",
      "docstring": "",
      "path": "src/components/editable-field/editable-field-interface.tsx"
    },
    "src/components/grid/grid-interface.ts::WcsGridPaginationChangeEventDetails": {
      "declaration": "export interface WcsGridPaginationChangeEventDetails {\r\n    pagination: WcsGridPaginationConfig;\r\n}",
      "docstring": "",
      "path": "src/components/grid/grid-interface.ts"
    },
    "src/components/grid/grid-interface.ts::WcsGridSelectionConfig": {
      "declaration": "export type WcsGridSelectionConfig = 'none' | 'single' | 'multiple';",
      "docstring": "",
      "path": "src/components/grid/grid-interface.ts"
    },
    "src/components/grid/grid-interface.ts::WcsGridSelectionEventDetails": {
      "declaration": "export interface WcsGridSelectionEventDetails {\r\n    /**\r\n     * The currently selected rows after the selection change\r\n     */\r\n    selectedRows: WcsGridRowData[];\r\n    /**\r\n     * The row that was changed\r\n     * If the grid is in multiple selection mode, you can get `allCheckbox` as the value representing that the event was\r\n     * triggered by the selection of all checkbox\r\n     */\r\n    changedRow: WcsGridRowData | 'allCheckbox';\r\n}",
      "docstring": "Event details for the grid selection event",
      "path": "src/components/grid/grid-interface.ts"
    },
    "src/components/grid/grid-interface.ts::WcsGridAllRowSelectedEventDetails": {
      "declaration": "export interface WcsGridAllRowSelectedEventDetails {\r\n    rows: WcsGridRowData[];\r\n}",
      "docstring": "",
      "path": "src/components/grid/grid-interface.ts"
    },
    "src/components/grid/grid-interface.ts::WcsSortFn": {
      "declaration": "(a: any, b: any, column: HTMLWcsGridColumnElement) => -1 | 0 | 1",
      "docstring": "",
      "path": "src/components/grid/grid-interface.ts"
    },
    "src/components/grid/grid-interface.ts::WcsCellFormatter": {
      "declaration": "(_h: HyperFunc<VNode>, column: HTMLWcsGridColumnElement, rowData: WcsGridRowData) => HTMLElement | HTMLElement[]",
      "docstring": "",
      "path": "src/components/grid/grid-interface.ts"
    },
    "src/components/grid/grid-interface.ts::WcsSortOrder": {
      "declaration": "export type WcsSortOrder = 'asc' | 'desc' | 'none';",
      "docstring": "",
      "path": "src/components/grid/grid-interface.ts"
    },
    "src/components/grid/grid-interface.ts::WcsGridColumnSortChangeEventDetails": {
      "declaration": "export interface WcsGridColumnSortChangeEventDetails {\r\n    sortFn: WcsSortFn;\r\n    order: WcsSortOrder;\r\n    column: HTMLWcsGridColumnElement;\r\n}",
      "docstring": "",
      "path": "src/components/grid/grid-interface.ts"
    },
    "src/components/horizontal-stepper/horizontal-stepper-interface.ts::HorizontalStepConfig": {
      "declaration": "export interface HorizontalStepConfig {\r\n    /** Text displayed below the step button */\r\n    text?: string;\r\n    /** Specifies if the step is clickable or not */\r\n    disable?: boolean;\r\n    /** Specifies if the step is completed */\r\n    complete?: boolean;\r\n    /** Step button configuration */\r\n    button: StepButton;\r\n}",
      "docstring": "Stepper configuration interface",
      "path": "src/components/horizontal-stepper/horizontal-stepper-interface.ts"
    },
    "src/components/horizontal-stepper/horizontal-stepper-interface.ts::HorizontalStepperMode": {
      "declaration": "export type HorizontalStepperMode = 'linear' | 'nonLinear';",
      "docstring": "",
      "path": "src/components/horizontal-stepper/horizontal-stepper-interface.ts"
    },
    "src/components/horizontal-stepper/horizontal-stepper-interface.ts::HorizontalStepClickEvent": {
      "declaration": "export interface HorizontalStepClickEvent {\r\n    step: HorizontalStepConfig;\r\n    index: number;\r\n}",
      "docstring": "",
      "path": "src/components/horizontal-stepper/horizontal-stepper-interface.ts"
    },
    "src/components/input/input-interface.ts::AutocompleteTypes": {
      "declaration": "export type AutocompleteTypes = (\r\n    | 'on' | 'off' | 'name' | 'honorific-prefix' | 'given-name' | 'additional-name' | 'family-name' | 'honorific-suffix'\r\n    | 'nickname' | 'email' | 'username' | 'new-password' | 'current-password' | 'one-time-code' | 'organization-title' | 'organization'\r\n    | 'street-address' | 'address-line1' | 'address-line2' | 'address-line3' | 'address-level4' | 'address-level3' | 'address-level2'\r\n    | 'address-level1' | 'country' | 'country-name' | 'postal-code' | 'cc-name' | 'cc-given-name' | 'cc-additional-name' | 'cc-family-name'\r\n    | 'cc-family-name' | 'cc-number' | 'cc-exp' | 'cc-exp-month' | 'cc-exp-year' | 'cc-csc' | 'cc-type' | 'transaction-currency' | 'transaction-amount'\r\n    | 'language' | 'bday' | 'bday-day' | 'bday-month' | 'bday-year' | 'sex' | 'tel' | 'tel-country-code' | 'tel-national' | 'tel-area-code' | 'tel-local'\r\n    | 'tel-extension' | 'impp' | 'url' | 'photo');",
      "docstring": "",
      "path": "src/components/input/input-interface.ts"
    },
    "src/components/input/input-interface.ts::WcsInputSize": {
      "declaration": "export type WcsInputSize = Extract<WcsSize, typeof WcsInputSizeValues[number]>;",
      "docstring": "",
      "path": "src/components/input/input-interface.ts"
    },
    "src/components/input/input-interface.ts::TextFieldTypes": {
      "declaration": "export type TextFieldTypes = 'date' | 'email' | 'number' | 'password' | 'search' | 'tel' | 'text' | 'url' | 'time' | 'week' | 'month' | 'datetime-local' | 'file';",
      "docstring": "",
      "path": "src/components/input/input-interface.ts"
    },
    "src/components/input/input-interface.ts::InputChangeEventDetail": {
      "declaration": "export interface InputChangeEventDetail {\r\n    value: string | undefined | null;\r\n}",
      "docstring": "",
      "path": "src/components/input/input-interface.ts"
    },
    "src/components/mat-icon/mat-icon-interface.tsx::MaterialIconSize": {
      "declaration": "export type MaterialIconSize = 's' | 'm' | 'l' | 'xl';",
      "docstring": "",
      "path": "src/components/mat-icon/mat-icon-interface.tsx"
    },
    "src/components/mat-icon/mat-icon-interface.tsx::MaterialIconFamily": {
      "declaration": "export type MaterialIconFamily = 'filled' | 'outlined' | 'twotone' | 'rounded' | 'sharp';",
      "docstring": "",
      "path": "src/components/mat-icon/mat-icon-interface.tsx"
    },
    "src/components/modal/modal-interface.ts::ModalSize": {
      "declaration": "export type ModalSize = 's' | 'm' | 'l' | 'xl';",
      "docstring": "",
      "path": "src/components/modal/modal-interface.ts"
    },
    "src/shared-types.ts::WcsSize": {
      "declaration": "export type WcsSize = 'xs' | 's' | 'm' | 'l' | 'xl';",
      "docstring": "",
      "path": "src/shared-types.ts"
    },
    "src/components/radio-group/radio-group-interface.ts::RadioGroupMode": {
      "declaration": "export type RadioGroupMode = 'radio' | 'option' | 'horizontal';",
      "docstring": "",
      "path": "src/components/radio-group/radio-group-interface.ts"
    },
    "src/components/radio/radio-interface.ts::RadioChosedEvent": {
      "declaration": "export interface RadioChosedEvent extends RadioValue {\r\n    source: HTMLWcsRadioElement;\r\n}",
      "docstring": "",
      "path": "src/components/radio/radio-interface.ts"
    },
    "src/components/radio-group/radio-group-interface.ts::RadioGroupChangeEventDetail": {
      "declaration": "export interface RadioGroupChangeEventDetail {\r\n    value: any | any[] | undefined | null;\r\n}",
      "docstring": "",
      "path": "src/components/radio-group/radio-group-interface.ts"
    },
    "src/components/select/select-interface.ts::WcsSelectSize": {
      "declaration": "export type WcsSelectSize = Extract<WcsSize, typeof WcsSelectSizeValue[number]>;",
      "docstring": "",
      "path": "src/components/select/select-interface.ts"
    },
    "src/components/select/select-interface.ts::WcsSelectFilterFn": {
      "declaration": "(optionEl: HTMLWcsSelectOptionElement, filter: string) => boolean",
      "docstring": "",
      "path": "src/components/select/select-interface.ts"
    },
    "src/components/select/select-interface.ts::SelectChangeEventDetail": {
      "declaration": "export interface SelectChangeEventDetail {\r\n    value: any | any[] | undefined | null;\r\n}",
      "docstring": "",
      "path": "src/components/select/select-interface.ts"
    },
    "src/components/select/select-interface.ts::SelectFilerChangeEventDetail": {
      "declaration": "export interface SelectFilerChangeEventDetail {\r\n    value: string | number | undefined | null;\r\n}",
      "docstring": "",
      "path": "src/components/select/select-interface.ts"
    },
    "src/components/select-option/select-option-interface.ts::SelectOptionChosedEvent": {
      "declaration": "export interface SelectOptionChosedEvent extends SelectOptionValue {\r\n    source: HTMLWcsSelectOptionElement;\r\n}",
      "docstring": "",
      "path": "src/components/select-option/select-option-interface.ts"
    },
    "src/components/skeleton/skeleton-interface.ts::WcsSkeletonAnimation": {
      "declaration": "export type WcsSkeletonAnimation = 'none' | 'glide' | 'pulse';",
      "docstring": "",
      "path": "src/components/skeleton/skeleton-interface.ts"
    },
    "src/shared-types.ts::CssTypes": {
      "declaration": "any",
      "docstring": "",
      "path": "src/shared-types.ts"
    },
    "src/components/spinner/spinner-interface.ts::WcsSpinnerMode": {
      "declaration": "export type WcsSpinnerMode = 'border' | 'growing';",
      "docstring": "",
      "path": "src/components/spinner/spinner-interface.ts"
    },
    "src/components/switch/switch-interface.ts::SwitchLabelAlignment": {
      "declaration": "export type SwitchLabelAlignment = 'top' | 'center' | 'bottom';",
      "docstring": "",
      "path": "src/components/switch/switch-interface.ts"
    },
    "src/components/switch/switch-interface.ts::SwitchChangeEventDetail": {
      "declaration": "export interface SwitchChangeEventDetail {\r\n    checked: boolean;\r\n}",
      "docstring": "",
      "path": "src/components/switch/switch-interface.ts"
    },
    "src/components/tabs/tabs-interface.ts::WcsTabsAlignment": {
      "declaration": "export type WcsTabsAlignment = 'start' | 'center' | 'end';",
      "docstring": "",
      "path": "src/components/tabs/tabs-interface.ts"
    },
    "src/components/tabs/tabs-interface.ts::WcsTabChangeEvent": {
      "declaration": "export interface WcsTabChangeEvent {\r\n    tabName: string;\r\n    tabIndex: number;\r\n    selectedKey: any;\r\n}",
      "docstring": "",
      "path": "src/components/tabs/tabs-interface.ts"
    },
    "src/components/textarea/textarea-interface.ts::WcsTextareaInputMode": {
      "declaration": "export type WcsTextareaInputMode = 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';",
      "docstring": "",
      "path": "src/components/textarea/textarea-interface.ts"
    },
    "src/components/textarea/textarea-interface.ts::WcsTextareaEnterKeyHint": {
      "declaration": "export type WcsTextareaEnterKeyHint = 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';",
      "docstring": "",
      "path": "src/components/textarea/textarea-interface.ts"
    },
    "src/components/textarea/textarea-interface.ts::WcsTextareaInputState": {
      "declaration": "export type WcsTextareaInputState = 'initial' | 'error';",
      "docstring": "",
      "path": "src/components/textarea/textarea-interface.ts"
    },
    "src/components/textarea/textarea-interface.ts::WcsTextareaWrap": {
      "declaration": "export type WcsTextareaWrap = 'hard' | 'soft' | 'off';",
      "docstring": "",
      "path": "src/components/textarea/textarea-interface.ts"
    },
    "src/components/textarea/textarea-interface.ts::WcsTextareaResize": {
      "declaration": "export type WcsTextareaResize = 'both' | 'none' | 'vertical' | 'horizontal';",
      "docstring": "",
      "path": "src/components/textarea/textarea-interface.ts"
    },
    "src/components/textarea/textarea-interface.ts::TextareaChangeEventDetail": {
      "declaration": "export interface TextareaChangeEventDetail {\r\n    value: string | undefined | null;\r\n}",
      "docstring": "",
      "path": "src/components/textarea/textarea-interface.ts"
    },
    "src/components/tooltip/tooltip-interface.ts::WcsTooltipPosition": {
      "declaration": "export type WcsTooltipPosition = 'top' | 'bottom' | 'right' | 'left';",
      "docstring": "",
      "path": "src/components/tooltip/tooltip-interface.ts"
    },
    "src/components/tooltip/tooltip-interface.ts::WcsTooltipAppendTo": {
      "declaration": "export type WcsTooltipAppendTo = Element | 'parent' | ((ref: Element) => Element);",
      "docstring": "",
      "path": "src/components/tooltip/tooltip-interface.ts"
    }
  }
}
