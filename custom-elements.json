{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./shared-types"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "shared-types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "utils/accessibility.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "isElementFocused",
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "HTMLElement"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "wcsFocusableElements",
          "type": {
            "text": "array"
          },
          "default": "[\r\n    'wcs-select',\r\n    'wcs-select-option',\r\n    'wcs-dropdown',\r\n    'wcs-dropdown-item',\r\n    'wcs-nav-item',\r\n    'wcs-button',\r\n    'wcs-input',\r\n    'wcs-textarea',\r\n    'wcs-checkbox',\r\n    'wcs-radio',\r\n    'wcs-switch',\r\n    'wcs-tab',\r\n    'wcs-counter',\r\n]"
        },
        {
          "kind": "function",
          "name": "isFocusable",
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "any"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isElementFocused",
          "declaration": {
            "name": "isElementFocused",
            "module": "utils/accessibility.ts"
          }
        },
        {
          "kind": "js",
          "name": "wcsFocusableElements",
          "declaration": {
            "name": "wcsFocusableElements",
            "module": "utils/accessibility.ts"
          }
        },
        {
          "kind": "js",
          "name": "isFocusable",
          "declaration": {
            "name": "isFocusable",
            "module": "utils/accessibility.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "utils/helpers.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "isElement",
          "return": {
            "type": {
              "text": "element is Element"
            }
          },
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "any"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "hasShadowDom",
          "parameters": [
            {
              "name": "el",
              "type": {
                "text": "HTMLElement"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "debounceEvent",
          "return": {
            "type": {
              "text": "EventEmitter"
            }
          },
          "parameters": [
            {
              "name": "event",
              "type": {
                "text": "EventEmitter"
              }
            },
            {
              "name": "wait",
              "type": {
                "text": "number"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "debounce",
          "parameters": [
            {
              "name": "func",
              "type": {
                "text": "(...args: any[]) => void"
              }
            },
            {
              "name": "wait",
              "default": "0"
            }
          ]
        },
        {
          "kind": "function",
          "name": "inheritAttributes",
          "parameters": [
            {
              "name": "el",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "name": "attributes",
              "default": "[]",
              "type": {
                "text": "string[]"
              }
            }
          ],
          "description": "Elements inside of web components sometimes need to inherit global attributes\r\nset on the host. For example, the inner input in `wcs-input` should inherit\r\nthe `title` attribute that developers set directly on `wcs-input`. This\r\nhelper function should be called in componentWillLoad and assigned to a variable\r\nthat is later used in the render function.\r\n\r\nThis does not need to be reactive as changing attributes on the host element\r\ndoes not trigger a re-render."
        },
        {
          "kind": "function",
          "name": "inheritAriaAttributes",
          "parameters": [
            {
              "name": "el",
              "type": {
                "text": "HTMLElement"
              },
              "description": "The element that the attributes should be copied from."
            },
            {
              "name": "ignoreList",
              "optional": true,
              "type": {
                "text": "string[]"
              },
              "description": "The list of aria-attributes to ignore reflecting and removing from the host.\r\nUse this in instances where we manually specify aria attributes on the `<Host>` element."
            }
          ],
          "description": "Returns an array of aria attributes that should be copied from\r\nthe shadow host element to a target within the light DOM."
        },
        {
          "kind": "function",
          "name": "findItemLabel",
          "return": {
            "type": {
              "text": "HTMLWcsLabelElement | null"
            }
          },
          "parameters": [
            {
              "name": "componentEl",
              "type": {
                "text": "HTMLElement"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "raf",
          "parameters": [
            {
              "name": "h",
              "type": {
                "text": "any"
              }
            }
          ],
          "description": "Patched version of requestAnimationFrame that avoids ngzone\r\nUse only when you know ngzone should not run"
        },
        {
          "kind": "function",
          "name": "clickInsideElement",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "event",
              "type": {
                "text": "MouseEvent"
              }
            },
            {
              "name": "element",
              "type": {
                "text": "HTMLElement"
              }
            }
          ],
          "description": "Return true if the mouseEvent click is inside the given HTML element"
        },
        {
          "kind": "function",
          "name": "clickTargetIsElementOrChildren",
          "parameters": [
            {
              "name": "mouseEvent",
              "type": {
                "text": "MouseEvent"
              }
            },
            {
              "name": "element",
              "type": {
                "text": "HTMLElement"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "generateUniqueId",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "componentName",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isKeyup",
          "parameters": [
            {
              "name": "evt",
              "type": {
                "text": "KeyboardEvent"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isKeydown",
          "parameters": [
            {
              "name": "evt",
              "type": {
                "text": "KeyboardEvent"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isEscapeKey",
          "parameters": [
            {
              "name": "evt",
              "type": {
                "text": "KeyboardEvent"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isSpaceKey",
          "parameters": [
            {
              "name": "evt",
              "type": {
                "text": "KeyboardEvent"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isEnterKey",
          "parameters": [
            {
              "name": "evt",
              "type": {
                "text": "KeyboardEvent"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isHomeKey",
          "parameters": [
            {
              "name": "evt",
              "type": {
                "text": "KeyboardEvent"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isEndKey",
          "parameters": [
            {
              "name": "evt",
              "type": {
                "text": "KeyboardEvent"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isUpArrowKey",
          "parameters": [
            {
              "name": "evt",
              "type": {
                "text": "KeyboardEvent"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isDownArrowKey",
          "parameters": [
            {
              "name": "evt",
              "type": {
                "text": "KeyboardEvent"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isLeftArrowKey",
          "parameters": [
            {
              "name": "evt",
              "type": {
                "text": "KeyboardEvent"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isRightArrowKey",
          "parameters": [
            {
              "name": "evt",
              "type": {
                "text": "KeyboardEvent"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isPageDownKey",
          "parameters": [
            {
              "name": "evt",
              "type": {
                "text": "KeyboardEvent"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isPageUpKey",
          "parameters": [
            {
              "name": "evt",
              "type": {
                "text": "KeyboardEvent"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isTabKey",
          "parameters": [
            {
              "name": "evt",
              "type": {
                "text": "KeyboardEvent"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isElement",
          "declaration": {
            "name": "isElement",
            "module": "utils/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "hasShadowDom",
          "declaration": {
            "name": "hasShadowDom",
            "module": "utils/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "debounceEvent",
          "declaration": {
            "name": "debounceEvent",
            "module": "utils/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "debounce",
          "declaration": {
            "name": "debounce",
            "module": "utils/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "inheritAttributes",
          "declaration": {
            "name": "inheritAttributes",
            "module": "utils/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "inheritAriaAttributes",
          "declaration": {
            "name": "inheritAriaAttributes",
            "module": "utils/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "findItemLabel",
          "declaration": {
            "name": "findItemLabel",
            "module": "utils/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "raf",
          "declaration": {
            "name": "raf",
            "module": "utils/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "clickInsideElement",
          "declaration": {
            "name": "clickInsideElement",
            "module": "utils/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "clickTargetIsElementOrChildren",
          "declaration": {
            "name": "clickTargetIsElementOrChildren",
            "module": "utils/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "generateUniqueId",
          "declaration": {
            "name": "generateUniqueId",
            "module": "utils/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "isKeyup",
          "declaration": {
            "name": "isKeyup",
            "module": "utils/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "isKeydown",
          "declaration": {
            "name": "isKeydown",
            "module": "utils/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "isEscapeKey",
          "declaration": {
            "name": "isEscapeKey",
            "module": "utils/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "isSpaceKey",
          "declaration": {
            "name": "isSpaceKey",
            "module": "utils/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "isEnterKey",
          "declaration": {
            "name": "isEnterKey",
            "module": "utils/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "isHomeKey",
          "declaration": {
            "name": "isHomeKey",
            "module": "utils/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "isEndKey",
          "declaration": {
            "name": "isEndKey",
            "module": "utils/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "isUpArrowKey",
          "declaration": {
            "name": "isUpArrowKey",
            "module": "utils/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "isDownArrowKey",
          "declaration": {
            "name": "isDownArrowKey",
            "module": "utils/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "isLeftArrowKey",
          "declaration": {
            "name": "isLeftArrowKey",
            "module": "utils/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "isRightArrowKey",
          "declaration": {
            "name": "isRightArrowKey",
            "module": "utils/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "isPageDownKey",
          "declaration": {
            "name": "isPageDownKey",
            "module": "utils/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "isPageUpKey",
          "declaration": {
            "name": "isPageUpKey",
            "module": "utils/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "isTabKey",
          "declaration": {
            "name": "isTabKey",
            "module": "utils/helpers.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "utils/mutable-aria-attribute.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "isMutableAriaAttribute",
          "return": {
            "type": {
              "text": "el is MutableAriaAttribute"
            }
          },
          "parameters": [
            {
              "name": "el",
              "type": {
                "text": "any"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isMutableAriaAttribute",
          "declaration": {
            "name": "isMutableAriaAttribute",
            "module": "utils/mutable-aria-attribute.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "utils/overlay.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getOverlay"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getOverlay",
          "declaration": {
            "name": "getOverlay",
            "module": "utils/overlay.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "utils/tests.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "findFocusedNode",
          "return": {
            "type": {
              "text": "SerializedAXNode"
            }
          },
          "parameters": [
            {
              "name": "node",
              "type": {
                "text": "SerializedAXNode"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "findFocusedNode",
          "declaration": {
            "name": "findFocusedNode",
            "module": "utils/tests.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/accordion/accordion.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Accordion",
          "members": [
            {
              "kind": "field",
              "name": "el",
              "type": {
                "text": "HTMLWcsAccordionElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "accordionPanels",
              "type": {
                "text": "HTMLWcsAccordionPanelElement[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "hideActionText",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specifies whether accordion-panel components should display the open/close text.\r\nif false, it won't show the open/close text in all accordion-panel."
            },
            {
              "kind": "field",
              "name": "highlight",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specifies whether accordion-panel components should highlight when open with primary color.\r\nif true, the background color of the accordion-panel will be the primary color.\r\nif false, the background color of the accordion-panel will be wcs-light."
            },
            {
              "kind": "field",
              "name": "groupContentWithHeader",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specifies wether accordion-panel components should group the content with header in one card\r\nif true, there will be only one card with the header and the content\r\nNothing change when the panel is close"
            },
            {
              "kind": "method",
              "name": "wcsOpenChangeHandler",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<boolean>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateHideActiontextOnPanel",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateHighlightOnPanel",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateGroupContentWithHeader",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "method",
              "name": "getAllAccordionPanelsFromHostElement",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLWcsAccordionPanelElement[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "closeAllAccordionsExcept",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "eventTarget",
                  "type": {
                    "text": "EventTarget"
                  }
                }
              ],
              "description": "Close all accordion panels except the one that match the eventTarget reference"
            }
          ],
          "attributes": [
            {
              "name": "hide-action-text",
              "fieldName": "hideActionText",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "highlight",
              "fieldName": "highlight",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "group-content-with-header",
              "fieldName": "groupContentWithHeader",
              "type": {
                "text": "boolean"
              }
            }
          ],
          "tagName": "wcs-accordion",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Accordion",
          "declaration": {
            "name": "Accordion",
            "module": "components/accordion/accordion.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-accordion",
          "declaration": {
            "name": "Accordion",
            "module": "components/accordion/accordion.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/accordion-content/accordion-content.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AccordionContent",
          "members": [
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "tagName": "wcs-accordion-content",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AccordionContent",
          "declaration": {
            "name": "AccordionContent",
            "module": "components/accordion-content/accordion-content.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-accordion-content",
          "declaration": {
            "name": "AccordionContent",
            "module": "components/accordion-content/accordion-content.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/accordion-header/accordion-header.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AccordionHeader",
          "members": [
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "tagName": "wcs-accordion-header",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AccordionHeader",
          "declaration": {
            "name": "AccordionHeader",
            "module": "components/accordion-header/accordion-header.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-accordion-header",
          "declaration": {
            "name": "AccordionHeader",
            "module": "components/accordion-header/accordion-header.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/accordion-panel/accordion-panel.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AccordionPanel",
          "members": [
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hideActionText",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specifies whether the component should display the open/close text.\r\nif false, it won't show the open/close text."
            },
            {
              "kind": "field",
              "name": "highlight",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specifies whether the component should highlight when open with primary color.\r\nif true, the background color will be the primary color.\r\nif false, the background color will be wcs-light."
            },
            {
              "kind": "field",
              "name": "groupContentWithHeader",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specifies wether the component should group the content with header in one card\r\nif true, there will be only one card with the header and the content\r\nNothing change when the panel is close"
            },
            {
              "kind": "method",
              "name": "openChange",
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "close"
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "attributes": [
            {
              "name": "open",
              "fieldName": "open"
            },
            {
              "name": "hide-action-text",
              "fieldName": "hideActionText",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "highlight",
              "fieldName": "highlight",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "group-content-with-header",
              "fieldName": "groupContentWithHeader",
              "type": {
                "text": "boolean"
              }
            }
          ],
          "tagName": "wcs-accordion-panel",
          "events": [
            {
              "name": "wcsOpenChange",
              "type": {
                "text": "EventEmitter<boolean>"
              }
            }
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AccordionPanel",
          "declaration": {
            "name": "AccordionPanel",
            "module": "components/accordion-panel/accordion-panel.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-accordion-panel",
          "declaration": {
            "name": "AccordionPanel",
            "module": "components/accordion-panel/accordion-panel.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/action-bar/action-bar.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ActionBar",
          "members": [
            {
              "kind": "field",
              "name": "el",
              "type": {
                "text": "HTMLWcsActionBarElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "gutter",
              "type": {
                "text": "boolean"
              },
              "description": "Determines if the action bar should have a border at the bottom.\r\nYou should not use this property if a gutter is already present on tabs"
            },
            {
              "kind": "field",
              "name": "hasTabs",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "attributes": [
            {
              "name": "gutter",
              "fieldName": "gutter",
              "type": {
                "text": "boolean"
              }
            }
          ],
          "tagName": "wcs-action-bar",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ActionBar",
          "declaration": {
            "name": "ActionBar",
            "module": "components/action-bar/action-bar.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-action-bar",
          "declaration": {
            "name": "ActionBar",
            "module": "components/action-bar/action-bar.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/app/app.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "App",
          "members": [
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "tagName": "wcs-app",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "App",
          "declaration": {
            "name": "App",
            "module": "components/app/app.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-app",
          "declaration": {
            "name": "App",
            "module": "components/app/app.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/badge/badge-interface.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "components/badge/badge.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Badge",
          "members": [
            {
              "kind": "field",
              "name": "shape",
              "type": {
                "text": "BadgeShape"
              },
              "default": "'normal'",
              "description": "Define the shape of the badge"
            },
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "BadgeColor"
              },
              "default": "'initial'",
              "description": "Allows you to change the color of the badge to make it less bright (based on the color chosen by the CSS class)."
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "fieldName": "shape",
              "type": {
                "text": "BadgeShape"
              }
            },
            {
              "name": "color",
              "fieldName": "color",
              "type": {
                "text": "BadgeColor"
              }
            }
          ],
          "tagName": "wcs-badge",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Badge",
          "declaration": {
            "name": "Badge",
            "module": "components/badge/badge.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-badge",
          "declaration": {
            "name": "Badge",
            "module": "components/badge/badge.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/button/button-interface.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "WcsButtonSizeValues",
          "type": {
            "text": "['s', 'm', 'l']"
          },
          "default": "['s', 'm', 'l']"
        },
        {
          "kind": "function",
          "name": "isWcsButtonSize",
          "return": {
            "type": {
              "text": "size is WcsButtonSize"
            }
          },
          "parameters": [
            {
              "name": "size",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WcsButtonSizeValues",
          "declaration": {
            "name": "WcsButtonSizeValues",
            "module": "components/button/button-interface.ts"
          }
        },
        {
          "kind": "js",
          "name": "isWcsButtonSize",
          "declaration": {
            "name": "isWcsButtonSize",
            "module": "components/button/button-interface.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/button/button.e2e.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "components/button/button.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "Button component, can also be a link when specifying href.\r\n\r\n## Click event\r\n\r\nThe WCS button relies on the native click event to pass a user click to your app.\r\nFor now, it's not possible for us to prevent the click event to be fired when the button's disabled attribute is true.\r\nThis means you'll receive click events on a disabled wcs button.\r\nIf you're using the button with a library like Angular or React, they have internal mechanisms to prevent this behavior. Your callbacks will therefore not be called.\r\nTo fix this problem, we plan to provide a wcsClick event in addition to the native click for applications developed without frameworks.",
          "name": "Button",
          "members": [
            {
              "kind": "field",
              "name": "el",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "WcsButtonType"
              },
              "default": "'button'",
              "description": "Specify the button type."
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "description": "Set a URL to point to.<br/>\r\nIf specified use a `a` tag instead of `btn`."
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_blank' | '_self' | undefined"
              },
              "description": "Specifies where to open the linked document when using href (see prop above)<br/>\r\nDefault '_self' will open the linked document in the same frame as it was clicked"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the button is disabled or not."
            },
            {
              "kind": "field",
              "name": "ripple",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Specify whether the button should have a ripple effect or not."
            },
            {
              "kind": "field",
              "name": "mdcRipple",
              "type": {
                "text": "MDCRipple"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "WcsButtonSize"
              },
              "default": "'m'",
              "description": "Specify the size of the button."
            },
            {
              "kind": "field",
              "name": "shape",
              "type": {
                "text": "WcsButtonShape"
              },
              "default": "'normal'",
              "description": "Specify the shape of the button."
            },
            {
              "kind": "field",
              "name": "mode",
              "type": {
                "text": "WcsButtonMode"
              },
              "default": "'plain'",
              "description": "This attribute specify the appearance of the button."
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flag to display spinner until the end of action"
            },
            {
              "kind": "method",
              "name": "onClick",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Native event click is emit event if we decide to stop propagation of it"
            },
            {
              "kind": "method",
              "name": "enabledRippleEffect",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "disabledRippleEffect",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getTagName",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onRippleChange",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "attributes": [
            {
              "name": "type",
              "fieldName": "type",
              "type": {
                "text": "WcsButtonType"
              }
            },
            {
              "name": "href",
              "fieldName": "href",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "target",
              "fieldName": "target",
              "type": {
                "text": "'_blank' | '_self'"
              }
            },
            {
              "name": "disabled",
              "fieldName": "disabled"
            },
            {
              "name": "ripple",
              "fieldName": "ripple"
            },
            {
              "name": "size",
              "fieldName": "size",
              "type": {
                "text": "WcsButtonSize"
              }
            },
            {
              "name": "shape",
              "fieldName": "shape",
              "type": {
                "text": "WcsButtonShape"
              }
            },
            {
              "name": "mode",
              "fieldName": "mode",
              "type": {
                "text": "WcsButtonMode"
              }
            },
            {
              "name": "loading",
              "fieldName": "loading",
              "type": {
                "text": "boolean"
              }
            }
          ],
          "tagName": "wcs-button",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Button",
          "declaration": {
            "name": "Button",
            "module": "components/button/button.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-button",
          "declaration": {
            "name": "Button",
            "module": "components/button/button.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/card/card-interface.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "components/card/card.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Card",
          "members": [
            {
              "kind": "field",
              "name": "mode",
              "type": {
                "text": "CardMode"
              },
              "default": "'raised'"
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "attributes": [
            {
              "name": "mode",
              "fieldName": "mode",
              "type": {
                "text": "CardMode"
              }
            }
          ],
          "tagName": "wcs-card",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Card",
          "declaration": {
            "name": "Card",
            "module": "components/card/card.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-card",
          "declaration": {
            "name": "Card",
            "module": "components/card/card.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/card-body/card-body.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CardBody",
          "members": [
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "tagName": "wcs-card-body",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CardBody",
          "declaration": {
            "name": "CardBody",
            "module": "components/card-body/card-body.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-card-body",
          "declaration": {
            "name": "CardBody",
            "module": "components/card-body/card-body.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/checkbox/checkbox-interface.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "components/checkbox/checkbox.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Checkbox",
          "members": [
            {
              "kind": "field",
              "name": "checkboxId",
              "privacy": "private",
              "default": "`wcs-checkbox-${checkboxIds++}`"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "name"
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If `true` the checkbox is in indeterminate state."
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If `true`, the checkbox is selected."
            },
            {
              "kind": "field",
              "name": "labelAlignment",
              "type": {
                "text": "CheckboxLabelAlignment"
              },
              "default": "'center'",
              "description": "Specifie the alignment of the checkbox with the label content"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify wether the checkbox is disabled or not."
            },
            {
              "kind": "method",
              "name": "setAriaAttribute",
              "parameters": [
                {
                  "name": "attr",
                  "type": {
                    "text": "AriaAttributeName"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleChange",
              "parameters": [
                {
                  "name": "_event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "fieldName": "name"
            },
            {
              "name": "indeterminate",
              "fieldName": "indeterminate"
            },
            {
              "name": "checked",
              "fieldName": "checked"
            },
            {
              "name": "label-alignment",
              "fieldName": "labelAlignment",
              "type": {
                "text": "CheckboxLabelAlignment"
              }
            },
            {
              "name": "disabled",
              "fieldName": "disabled",
              "type": {
                "text": "boolean"
              }
            }
          ],
          "tagName": "wcs-checkbox",
          "events": [
            {
              "name": "wcsChange",
              "type": {
                "text": "EventEmitter<CheckboxChangeEventDetail>"
              },
              "description": "Emitted when the checked property has changed."
            }
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Checkbox",
          "declaration": {
            "name": "Checkbox",
            "module": "components/checkbox/checkbox.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-checkbox",
          "declaration": {
            "name": "Checkbox",
            "module": "components/checkbox/checkbox.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/com-nav/com-nav-interface.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "components/com-nav/com-nav-utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "registerCloseHandlerForFocusOutEventOn",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "navigableItems",
              "type": {
                "text": "NodeListOf<Element>"
              },
              "description": "items on which focusout event listeners must be added"
            },
            {
              "name": "nodeNameToClose",
              "type": {
                "text": "string"
              },
              "description": "nodeName of the element we want to close in the event path"
            }
          ],
          "description": "This function add event handlers on the navigableItems list. The handlers call the function close() on the nodeName.\r\n\r\nT: type class of the nodeNameToClose param (must have a close function)"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "registerCloseHandlerForFocusOutEventOn",
          "declaration": {
            "name": "registerCloseHandlerForFocusOutEventOn",
            "module": "components/com-nav/com-nav-utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/com-nav/com-nav.e2e.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "components/com-nav/com-nav.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ComNav",
          "members": [
            {
              "kind": "field",
              "name": "el",
              "type": {
                "text": "HTMLWcsComNavElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "appName",
              "type": {
                "text": "string"
              },
              "description": "Name of the application to be displayed in the menu bar"
            },
            {
              "kind": "field",
              "name": "mobileMenuOpen",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "currentActiveSizing",
              "type": {
                "text": "'desktop' | 'mobile'"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "resizeObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hasAlreadyRegisteredClickHandlerOnSlottedLink",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "mobileMenuIconClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "registerHandlerToCloseMobileMenuOnClickOnSlottedLinkTag",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onClickOnFinalAction"
            },
            {
              "kind": "method",
              "name": "onClickOnFinalActionCat"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "method",
              "name": "mobileMenuIconOnKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "evt",
                  "type": {
                    "text": "KeyboardEvent"
                  },
                  "description": "The keydown event."
                }
              ],
              "description": "Handle the keydown event on the mobile menu icon. Open the menu if the user press space or enter."
            },
            {
              "kind": "method",
              "name": "exitMobileMenuOnKeyDown",
              "parameters": [
                {
                  "name": "evt",
                  "type": {
                    "text": "KeyboardEvent"
                  },
                  "description": "keydown event on window target."
                }
              ],
              "description": "Close the mobile menu if the user press escape."
            }
          ],
          "attributes": [
            {
              "name": "app-name",
              "fieldName": "appName",
              "type": {
                "text": "string"
              }
            }
          ],
          "tagName": "wcs-com-nav",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ComNav",
          "declaration": {
            "name": "ComNav",
            "module": "components/com-nav/com-nav.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-com-nav",
          "declaration": {
            "name": "ComNav",
            "module": "components/com-nav/com-nav.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/com-nav-category/com-nav-category.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ComNavCategory",
          "members": [
            {
              "kind": "field",
              "name": "el",
              "type": {
                "text": "HTMLWcsComNavCategoryElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "categoryOpen",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "onWindowClickEvent",
              "parameters": [
                {
                  "name": "_",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onSubmenuOpened",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<CategoryOpenedEventDetail>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMenuKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "_event",
                  "type": {
                    "text": "KeyboardEvent"
                  },
                  "description": "the keyboard event"
                }
              ],
              "description": "Open the menu if it is closed and closed the menu if it is already opened"
            },
            {
              "kind": "method",
              "name": "handleCategoryItemsKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "_event",
                  "type": {
                    "text": "KeyboardEvent"
                  },
                  "description": "the keyboard event"
                }
              ],
              "description": "Handle key down on category items"
            },
            {
              "kind": "method",
              "name": "close",
              "description": "Close the category"
            },
            {
              "kind": "method",
              "name": "open",
              "description": "Opens the category"
            },
            {
              "kind": "method",
              "name": "onClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "evt",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "description": "When the user clicks on the menu, we do not propagate the native event and we launch a custom event to manage\r\nthe closing of the menu correctly"
            },
            {
              "kind": "method",
              "name": "handleItemClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "evt",
                  "type": {
                    "text": "UIEvent"
                  }
                }
              ],
              "description": "Close the category and fire item click if we detect a mouse click on a slotted `a` element."
            },
            {
              "kind": "method",
              "name": "render",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "label",
              "fieldName": "label",
              "type": {
                "text": "string"
              }
            }
          ],
          "tagName": "wcs-com-nav-category",
          "events": [
            {
              "name": "wcsCategoryOpened",
              "type": {
                "text": "EventEmitter<CategoryOpenedEventDetail>"
              }
            },
            {
              "name": "wcsCategoryItemClicked",
              "type": {
                "text": "EventEmitter<UIEvent>"
              }
            }
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ComNavCategory",
          "declaration": {
            "name": "ComNavCategory",
            "module": "components/com-nav-category/com-nav-category.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-com-nav-category",
          "declaration": {
            "name": "ComNavCategory",
            "module": "components/com-nav-category/com-nav-category.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/com-nav-submenu/com-nav-submenu.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ComNavSubmenu",
          "members": [
            {
              "kind": "field",
              "name": "el",
              "type": {
                "text": "HTMLWcsComNavSubmenuElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "panelTitle",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "panelDescription",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "menuOpen",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "onWindowClickEvent",
              "parameters": [
                {
                  "name": "_",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "description": "If the user clicks outside the menu, we close it"
            },
            {
              "kind": "method",
              "name": "onSubmenuOpened",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<MenuOpenedEventDetail>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onEscapeKeyDown",
              "parameters": [
                {
                  "name": "_event",
                  "type": {
                    "text": "KeyboardEvent"
                  },
                  "description": "keydown event"
                }
              ],
              "description": "Close the menu when escape is pressed"
            },
            {
              "kind": "method",
              "name": "close",
              "description": "Close the menu"
            },
            {
              "kind": "method",
              "name": "open",
              "description": "Opens the menu"
            },
            {
              "kind": "method",
              "name": "onClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "evt",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "description": "When the user clicks on the menu, we do not propagate the native event and we launch a custom event to manage\r\nthe closing of the menu correctly"
            },
            {
              "kind": "method",
              "name": "handleMenuItemsKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "_event",
                  "type": {
                    "text": "KeyboardEvent"
                  },
                  "description": "the keyboard event"
                }
              ],
              "description": "Handle key down on menu items"
            },
            {
              "kind": "method",
              "name": "handleMenuKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "_event",
                  "type": {
                    "text": "KeyboardEvent"
                  },
                  "description": "the keyboard event"
                }
              ],
              "description": "Open the menu if it is closed and closed the menu if it is already opened"
            },
            {
              "kind": "method",
              "name": "handleMenuItemsClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "evt",
                  "type": {
                    "text": "UIEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "wcsCategoryItemClickedHandler",
              "privacy": "private",
              "parameters": [
                {
                  "name": "_",
                  "type": {
                    "text": "CustomEvent<UIEvent>"
                  }
                }
              ],
              "description": "handle category item click to close the submenu"
            },
            {
              "kind": "method",
              "name": "render",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "label",
              "fieldName": "label",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "panel-title",
              "fieldName": "panelTitle",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "panel-description",
              "fieldName": "panelDescription",
              "type": {
                "text": "string"
              }
            }
          ],
          "tagName": "wcs-com-nav-submenu",
          "events": [
            {
              "name": "wcsSubmenuOpened",
              "type": {
                "text": "EventEmitter<MenuOpenedEventDetail>"
              }
            },
            {
              "name": "wcsClickOnFinalAction",
              "type": {
                "text": "EventEmitter<void>"
              },
              "description": "Emitted when a user click on a final navigation action.\r\n\r\nUsed by the com-nav component to close the mobile menu overlay when a user click on a final action."
            }
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ComNavSubmenu",
          "declaration": {
            "name": "ComNavSubmenu",
            "module": "components/com-nav-submenu/com-nav-submenu.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-com-nav-submenu",
          "declaration": {
            "name": "ComNavSubmenu",
            "module": "components/com-nav-submenu/com-nav-submenu.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/counter/counter-interface.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "WcsCounterSizeValues",
          "type": {
            "text": "['m', 'l']"
          },
          "default": "['m', 'l']"
        },
        {
          "kind": "function",
          "name": "isWcsCounterSize",
          "return": {
            "type": {
              "text": "size is WcsCounterSize"
            }
          },
          "parameters": [
            {
              "name": "size",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WcsCounterSizeValues",
          "declaration": {
            "name": "WcsCounterSizeValues",
            "module": "components/counter/counter-interface.ts"
          }
        },
        {
          "kind": "js",
          "name": "isWcsCounterSize",
          "declaration": {
            "name": "isWcsCounterSize",
            "module": "components/counter/counter-interface.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/counter/counter.e2e.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "components/counter/counter.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "Counter component, meant to be used for small range of values (e.g : 0 - 5).<br>\r\nFor larger or specific ranges, please use [wcs-input (type number)](.?path=/docs/components-input--documentation)",
          "name": "Counter",
          "members": [
            {
              "kind": "field",
              "name": "el",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "spinButton",
              "type": {
                "text": "HTMLSpanElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "WcsCounterSize"
              },
              "default": "'m'",
              "description": "Specify the size (height) of the counter."
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label of the counter.<br/>\r\ne.g. Number of passengers, train carriages, railroad tracks..."
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number | undefined"
              },
              "description": "The minimum value of the counter.\r\nIf the value of the min attribute isn't set, then the element has no minimum value."
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number | undefined"
              },
              "description": "The maximum value of the counter.\r\nIf the value of the max attribute isn't set, then the element has no maximum value."
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Defines by how much the counter will be incremented or decremented."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "description": "The current value of the counter."
            },
            {
              "kind": "field",
              "name": "displayedValue",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "description": "Only for animation and display purpose"
            },
            {
              "kind": "field",
              "name": "animateRunning",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "setAriaAttribute",
              "parameters": [
                {
                  "name": "attr",
                  "type": {
                    "text": "AriaAttributeName"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "valueChange",
              "parameters": [
                {
                  "name": "newVal",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "oldVal",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "description": "Current value change => handle event and interval"
            },
            {
              "kind": "method",
              "name": "handleValueChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateDisplayValueIfNoAnimationRunning",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "ensureValueIsNotOutOfMinMax",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setMinimumIfValueIsUndefinedOrNull",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onKeyDown",
              "parameters": [
                {
                  "name": "_event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "notifyChange",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "getCounterContainer",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDecrement",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleIncrement",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "animate",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "attributes": [
            {
              "name": "size",
              "fieldName": "size",
              "type": {
                "text": "WcsCounterSize"
              }
            },
            {
              "name": "label",
              "fieldName": "label",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "min",
              "fieldName": "min",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "max",
              "fieldName": "max",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "step",
              "fieldName": "step",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "value",
              "fieldName": "value",
              "type": {
                "text": "number"
              }
            }
          ],
          "tagName": "wcs-counter",
          "events": [
            {
              "name": "wcsChange",
              "type": {
                "text": "EventEmitter<CounterChangeEventDetail>"
              },
              "description": "Emitted when the value of the counter has changed."
            },
            {
              "name": "wcsBlur",
              "type": {
                "text": "EventEmitter<FocusEvent>"
              },
              "description": "Emitted when the counter loses focus."
            }
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Counter",
          "declaration": {
            "name": "Counter",
            "module": "components/counter/counter.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-counter",
          "declaration": {
            "name": "Counter",
            "module": "components/counter/counter.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/divider/divider.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Divider",
          "members": [
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "tagName": "wcs-divider",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Divider",
          "declaration": {
            "name": "Divider",
            "module": "components/divider/divider.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-divider",
          "declaration": {
            "name": "Divider",
            "module": "components/divider/divider.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/dropdown-divider/dropdown-divider.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "You can add a divider between groups of items",
          "name": "DropdownDivider",
          "members": [
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "tagName": "wcs-dropdown-divider",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DropdownDivider",
          "declaration": {
            "name": "DropdownDivider",
            "module": "components/dropdown-divider/dropdown-divider.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-dropdown-divider",
          "declaration": {
            "name": "DropdownDivider",
            "module": "components/dropdown-divider/dropdown-divider.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/dropdown/dropdown-interface.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "components/dropdown/dropdown.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "The dropdown component use a wcs-button under the hood, so you can use the same css classes as the button to style the\r\ndropdown.",
          "name": "Dropdown",
          "slots": [
            {
              "description": "The slot containing the placeholder displayed in button",
              "name": "placeholder"
            },
            {
              "description": "The slot container the list of `wcs-dropdown-item` elements",
              "name": "item"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "el",
              "type": {
                "text": "HTMLWcsDropdownElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "noArrow",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the arrow in the button"
            },
            {
              "kind": "field",
              "name": "mode",
              "type": {
                "text": "WcsButtonMode"
              },
              "default": "'stroked'",
              "description": "Dropdown's button mode"
            },
            {
              "kind": "field",
              "name": "shape",
              "type": {
                "text": "WcsButtonShape"
              },
              "default": "'normal'",
              "description": "Dropdown's button shape"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specifies whether the dropdown button is clickable or not"
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "WcsDropdownPlacement"
              },
              "default": "'bottom-end'",
              "description": "placement of the dropdown's popover"
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "popper",
              "type": {
                "text": "Instance"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "buttonTextColor",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "placementChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "fixForFirefoxBelow63",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onButtonClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onWindowClickEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "dropdownItemClick",
              "parameters": [
                {
                  "name": "_",
                  "type": {
                    "text": "CustomEvent<void>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onKeyDown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "evt",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "focusFirstItemIfPresent",
              "privacy": "private",
              "parameters": [
                {
                  "name": "items",
                  "type": {
                    "text": "T[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "moveFocusedItemByDirection",
              "privacy": "private",
              "parameters": [
                {
                  "name": "items",
                  "type": {
                    "text": "T[]"
                  }
                },
                {
                  "name": "currentFocusedItemIndex",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "direction",
                  "type": {
                    "text": "'up' | 'down'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "closeOverlayAndFocusButton",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "attributes": [
            {
              "name": "no-arrow",
              "fieldName": "noArrow",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "mode",
              "fieldName": "mode",
              "type": {
                "text": "WcsButtonMode"
              }
            },
            {
              "name": "shape",
              "fieldName": "shape",
              "type": {
                "text": "WcsButtonShape"
              }
            },
            {
              "name": "disabled",
              "fieldName": "disabled",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "placement",
              "fieldName": "placement",
              "type": {
                "text": "WcsDropdownPlacement"
              }
            }
          ],
          "tagName": "wcs-dropdown",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Dropdown",
          "declaration": {
            "name": "Dropdown",
            "module": "components/dropdown/dropdown.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-dropdown",
          "declaration": {
            "name": "Dropdown",
            "module": "components/dropdown/dropdown.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/dropdown-header/dropdown-header.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "You can add `wcs-dropdown-header` before a group of items to describe it",
          "name": "DropdownHeader",
          "slots": [
            {
              "description": "the slot that contains the header's name",
              "name": "<no-name>"
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "tagName": "wcs-dropdown-header",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DropdownHeader",
          "declaration": {
            "name": "DropdownHeader",
            "module": "components/dropdown-header/dropdown-header.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-dropdown-header",
          "declaration": {
            "name": "DropdownHeader",
            "module": "components/dropdown-header/dropdown-header.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/dropdown-item/dropdown-item.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "You must add `wcs-dropdown-item` to `wcs-dropdown`",
          "name": "DropdownItem",
          "slots": [
            {
              "description": "the slot that contains the item's name",
              "name": "<no-name>"
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "onMouseDown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onKeyDown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "evt",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "tagName": "wcs-dropdown-item",
          "events": [
            {
              "name": "wcsDropdownItemClick",
              "type": {
                "text": "EventEmitter<void>"
              },
              "description": "Event emitted when the dropdown item is clicked"
            }
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DropdownItem",
          "declaration": {
            "name": "DropdownItem",
            "module": "components/dropdown-item/dropdown-item.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-dropdown-item",
          "declaration": {
            "name": "DropdownItem",
            "module": "components/dropdown-item/dropdown-item.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/editable-field/editable-field-interface.tsx",
      "declarations": [
        {
          "kind": "variable",
          "name": "WcsEditableFieldSizeValues",
          "type": {
            "text": "['m', 'l']"
          },
          "default": "['m', 'l']"
        },
        {
          "kind": "function",
          "name": "isWcsEditableFieldSize",
          "return": {
            "type": {
              "text": "size is WcsEditableFieldSize"
            }
          },
          "parameters": [
            {
              "name": "size",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WcsEditableFieldSizeValues",
          "declaration": {
            "name": "WcsEditableFieldSizeValues",
            "module": "components/editable-field/editable-field-interface.tsx"
          }
        },
        {
          "kind": "js",
          "name": "isWcsEditableFieldSize",
          "declaration": {
            "name": "isWcsEditableFieldSize",
            "module": "components/editable-field/editable-field-interface.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/editable-field/editable-field.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "EditableField",
          "members": [
            {
              "kind": "field",
              "name": "el",
              "type": {
                "text": "HTMLWcsEditableFieldElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "currentState",
              "type": {
                "text": "EditableComponentState"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "EditableFieldType"
              },
              "default": "'input'",
              "description": "Specifies which component is used for editing"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Label of the field"
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the field is editable or not"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "any"
              },
              "description": "Initial value of the field"
            },
            {
              "kind": "field",
              "name": "validateFn",
              "type": {
                "text": "ValidateFn<any>"
              },
              "description": "Function to customize the validation of the data during the update"
            },
            {
              "kind": "field",
              "name": "formatFn",
              "type": {
                "text": "FormatFn<any>"
              },
              "description": "Function used to format the value"
            },
            {
              "kind": "field",
              "name": "errorMsg",
              "type": {
                "text": "string"
              },
              "default": "null",
              "description": "Error message displayed under the field if validation failed."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "WcsEditableFieldSize"
              },
              "default": "'m'",
              "description": "Specify the size (height) of the editable field."
            },
            {
              "kind": "field",
              "name": "isError",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "spiedElement",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "currentValue",
              "type": {
                "text": "any"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "method",
              "name": "initWithInput",
              "privacy": "private",
              "parameters": [
                {
                  "name": "assignedElements",
                  "type": {
                    "text": "Element[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "initWithTextArea",
              "privacy": "private",
              "parameters": [
                {
                  "name": "assignedElements",
                  "type": {
                    "text": "Element[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "initWithSelect",
              "privacy": "private",
              "parameters": [
                {
                  "name": "assignedElements",
                  "type": {
                    "text": "Element[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addChangeHandlerForWcsComponents",
              "privacy": "private",
              "parameters": [
                {
                  "name": "elt",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "the element to subscribe to"
                }
              ],
              "description": "This method subscribes the component to the change events produced by the other WCS components\r\n(provided by the user in slot)"
            },
            {
              "kind": "method",
              "name": "addInputHandlerForWcsComponents",
              "privacy": "private",
              "parameters": [
                {
                  "name": "elt",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "the element to subscribe to"
                }
              ],
              "description": "This method subscribes the component to the input events produced by the other WCS components"
            },
            {
              "kind": "method",
              "name": "sendCurrentValue",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "discardChanges",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "forceDisplayStateAndValidate"
            },
            {
              "kind": "method",
              "name": "onWindowClickEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "clickInsideComponent",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "errorHandler",
              "description": "discard changes and force component state to DISPLAY\r\n<br/>\r\nThis method must be call when component is in LOAD state"
            },
            {
              "kind": "method",
              "name": "onValueChange",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "onDisplayContainerClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "getReadonlySvgIcon",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "formatValues",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "type",
              "fieldName": "type",
              "type": {
                "text": "EditableFieldType"
              }
            },
            {
              "name": "label",
              "fieldName": "label",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "readonly",
              "fieldName": "readonly",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "value",
              "fieldName": "value",
              "type": {
                "text": "any"
              }
            },
            {
              "name": "validate-fn",
              "fieldName": "validateFn",
              "type": {
                "text": "ValidateFn<any>"
              }
            },
            {
              "name": "format-fn",
              "fieldName": "formatFn",
              "type": {
                "text": "FormatFn<any>"
              }
            },
            {
              "name": "error-msg",
              "fieldName": "errorMsg",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "size",
              "fieldName": "size",
              "type": {
                "text": "WcsEditableFieldSize"
              }
            }
          ],
          "tagName": "wcs-editable-field",
          "events": [
            {
              "name": "wcsChange",
              "type": {
                "text": "EventEmitter<EditableComponentUpdateEvent>"
              },
              "description": "event called at each (valid) update of the field."
            }
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EditableField",
          "declaration": {
            "name": "EditableField",
            "module": "components/editable-field/editable-field.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-editable-field",
          "declaration": {
            "name": "EditableField",
            "module": "components/editable-field/editable-field.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/error/error.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Label",
          "members": [
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "tagName": "wcs-error",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "components/error/error.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-error",
          "declaration": {
            "name": "Label",
            "module": "components/error/error.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/field/field.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Field",
          "slots": [
            {
              "description": "Label of the field",
              "name": "label"
            },
            {
              "description": "Content of the field",
              "name": "content"
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "tagName": "wcs-field",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Field",
          "declaration": {
            "name": "Field",
            "module": "components/field/field.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-field",
          "declaration": {
            "name": "Field",
            "module": "components/field/field.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/field-content/field-content.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FieldContent",
          "members": [
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "tagName": "wcs-field-content",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FieldContent",
          "declaration": {
            "name": "FieldContent",
            "module": "components/field-content/field-content.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-field-content",
          "declaration": {
            "name": "FieldContent",
            "module": "components/field-content/field-content.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/field-label/field-label.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FieldLabel",
          "members": [
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "tagName": "wcs-field-label",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FieldLabel",
          "declaration": {
            "name": "FieldLabel",
            "module": "components/field-label/field-label.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-field-label",
          "declaration": {
            "name": "FieldLabel",
            "module": "components/field-label/field-label.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/footer/footer.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Footer",
          "slots": [
            {
              "description": "Main container slot",
              "name": "<no-name>"
            },
            {
              "description": "Bottom-left part of the footer",
              "name": "end-left"
            },
            {
              "description": "Bottom-right part of the footer",
              "name": "end-right"
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "render",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            }
          ],
          "tagName": "wcs-footer",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Footer",
          "declaration": {
            "name": "Footer",
            "module": "components/footer/footer.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-footer",
          "declaration": {
            "name": "Footer",
            "module": "components/footer/footer.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/form-field/form-field.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "TODO:\r\n- [ ] Suffix button style",
          "name": "FormField",
          "members": [
            {
              "kind": "field",
              "name": "el",
              "type": {
                "text": "HTMLWcsFormFieldElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "isError",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specifies whether the form field is in an error state. Displays the field border in red and the message contained in the wcs-error component"
            },
            {
              "kind": "field",
              "name": "hasPrefix",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hasSuffix",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "spiedElement",
              "type": {
                "text": "Element"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "observer",
              "type": {
                "text": "MutationObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "isErrorChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateErrorStateOnInput",
              "privacy": "private",
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "spiedElementIsOfType",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "types",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "This function return true if the form field contains an element with tagName matches a value of the types param"
            },
            {
              "kind": "method",
              "name": "addRequiredMarkerToLabel",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "initSpiedElement",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateAriaAttributes",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "label",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "description",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "error",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "updateLabelRequiredFlag",
              "privacy": "private",
              "parameters": [
                {
                  "name": "isRequired",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "label",
                  "type": {
                    "text": "Element"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "method",
              "name": "onFormInputSlotChange",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "is-error",
              "fieldName": "isError"
            }
          ],
          "tagName": "wcs-form-field",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormField",
          "declaration": {
            "name": "FormField",
            "module": "components/form-field/form-field.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-form-field",
          "declaration": {
            "name": "FormField",
            "module": "components/form-field/form-field.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/galactic/galactic.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Galactic",
          "members": [
            {
              "kind": "field",
              "name": "text",
              "type": {
                "text": "string"
              },
              "description": "Text to display in the bar"
            },
            {
              "kind": "field",
              "name": "show",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "method",
              "name": "render",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "text",
              "fieldName": "text",
              "type": {
                "text": "string"
              }
            }
          ],
          "tagName": "wcs-galactic",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Galactic",
          "declaration": {
            "name": "Galactic",
            "module": "components/galactic/galactic.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-galactic",
          "declaration": {
            "name": "Galactic",
            "module": "components/galactic/galactic.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/galactic-menu/galactic-menu.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Galactic",
          "members": [
            {
              "kind": "field",
              "name": "el",
              "type": {
                "text": "HTMLWcsGalacticMenuElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "showPopoverMenu",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "popper",
              "type": {
                "text": "Instance"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "text",
              "type": {
                "text": "string"
              },
              "description": "Text to be displayed in the galactic bar"
            },
            {
              "kind": "field",
              "name": "menu",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "tooltip",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onWindowClickEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toogleMenu",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "text",
              "fieldName": "text",
              "type": {
                "text": "string"
              }
            }
          ],
          "tagName": "wcs-galactic-menu",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Galactic",
          "declaration": {
            "name": "Galactic",
            "module": "components/galactic-menu/galactic-menu.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-galactic-menu",
          "declaration": {
            "name": "Galactic",
            "module": "components/galactic-menu/galactic-menu.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/grid/grid-interface.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getSortOrderInteger",
          "parameters": [
            {
              "name": "sortOrder",
              "type": {
                "text": "WcsSortOrder"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getSortOrderInteger",
          "declaration": {
            "name": "getSortOrderInteger",
            "module": "components/grid/grid-interface.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/grid/grid.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "The grid component is a complex component used as an HTML table to display collections of data.",
          "name": "Grid",
          "cssProperties": [
            {
              "description": "Color for selected rows",
              "name": "--wcs-grid-highlight-color"
            },
            {
              "description": "Left border of all grid headers",
              "name": "--wcs-grid-column-border-left"
            }
          ],
          "slots": [
            {
              "description": "The slot containing the column of the grid in the `<thead>`",
              "name": "grid-column"
            },
            {
              "description": "The slot containing the pagination of the grid below the `<table>`",
              "name": "grid-pagination"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "el",
              "type": {
                "text": "HTMLWcsGridElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "serverMode",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Manage sort and pagination with a backend server when set to `true`"
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "any[]"
              },
              "description": "Contains the data to display in the table from a js object"
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "description": "Flag to display a spinner during data loading"
            },
            {
              "kind": "field",
              "name": "selectionConfig",
              "type": {
                "text": "WcsGridSelectionConfig"
              },
              "default": "'none'",
              "description": "Used to manage grid's row selection.  \r\n\"none\": no row can be selected.  \r\n\"multiple\": several rows can be selected.  \r\n\"single\": one row only can be selected."
            },
            {
              "kind": "field",
              "name": "selectedItems",
              "type": {
                "text": "any | any[]"
              },
              "default": "[]",
              "description": "Set the selected items (rows)"
            },
            {
              "kind": "field",
              "name": "wcsGridPaginationId",
              "type": {
                "text": "string"
              },
              "description": "Automatically set by the component to reference the wcs-grid-pagination HTML element by its id."
            },
            {
              "kind": "field",
              "name": "rowIdPath",
              "type": {
                "text": "string"
              },
              "description": "Name of the object's key that will be used to display the cells whose `keyValue` attribute matches to the\r\nobject's value for this key."
            },
            {
              "kind": "field",
              "name": "columns",
              "type": {
                "text": "HTMLWcsGridColumnElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "paginationEl",
              "type": {
                "text": "HTMLWcsGridPaginationElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "rows",
              "type": {
                "text": "WcsGridRow[]"
              },
              "privacy": "private",
              "default": "[]",
              "description": "Rows to display, contains user data and meta data"
            },
            {
              "kind": "method",
              "name": "onDataChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "any[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onSelectedItemsPropertyChange",
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "any | any[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onHiddenColumnChange",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "updateSelectionWithValues",
              "privacy": "private",
              "parameters": [
                {
                  "name": "values",
                  "type": {
                    "text": "any | any[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "wcsGridRowToWcsGridRowData",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "WcsGridRowData"
                }
              },
              "parameters": [
                {
                  "name": "row",
                  "type": {
                    "text": "WcsGridRow"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateGridRows",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "any[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "refreshSort",
              "privacy": "private",
              "parameters": [
                {
                  "name": "refreshOthersColmumnsSortOrderState",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Handle existing column's filters (defined before the grid is instantiated)"
            },
            {
              "kind": "method",
              "name": "disableSortOrderForColumns",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "columns",
                  "type": {
                    "text": "HTMLWcsGridColumnElement[] | null | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getGridColumnsFromTemplate",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLWcsGridColumnElement[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "getGridPaginationsFromTemplate",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLWcsGridPaginationElement[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "sortChangeEventHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<WcsGridColumnSortChangeEventDetails>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "sortBy",
              "privacy": "private",
              "parameters": [
                {
                  "name": "colmun",
                  "type": {
                    "text": "HTMLWcsGridColumnElement"
                  },
                  "description": "Column from which to extract the sorting configuration"
                }
              ],
              "description": "Sorts the grid rows according to the given column's configuration"
            },
            {
              "kind": "method",
              "name": "updatePageIndex",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Update the page's number of all rows"
            },
            {
              "kind": "method",
              "name": "paginationChangeEventHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "paginationChangeEventHandlerOutside",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<WcsGridPaginationChangeEventDetails>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onPaginationChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "onRowSelection",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "row",
                  "type": {
                    "text": "WcsGridRow"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectAllRows",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "allRowsAreSelected",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "getRowsForCurrentPage",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "WcsGridRow[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderSelectionColumn",
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "parameters": [
                {
                  "name": "row",
                  "type": {
                    "text": "WcsGridRow"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getCellContent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLElement | HTMLElement[] | string | void"
                }
              },
              "parameters": [
                {
                  "name": "row",
                  "type": {
                    "text": "WcsGridRow"
                  }
                },
                {
                  "name": "cell",
                  "type": {
                    "text": "WcsGridCell"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "totalColumnCount",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderRow",
              "privacy": "private",
              "parameters": [
                {
                  "name": "row",
                  "type": {
                    "text": "WcsGridRow"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "server-mode",
              "fieldName": "serverMode",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "data",
              "fieldName": "data",
              "type": {
                "text": "any[]"
              }
            },
            {
              "name": "loading",
              "fieldName": "loading",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "selection-config",
              "fieldName": "selectionConfig",
              "type": {
                "text": "WcsGridSelectionConfig"
              }
            },
            {
              "name": "selected-items",
              "fieldName": "selectedItems",
              "type": {
                "text": "any | any[]"
              }
            },
            {
              "name": "wcs-grid-pagination-id",
              "fieldName": "wcsGridPaginationId",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "row-id-path",
              "fieldName": "rowIdPath",
              "type": {
                "text": "string"
              }
            }
          ],
          "tagName": "wcs-grid",
          "events": [
            {
              "name": "wcsGridSelectionChange",
              "type": {
                "text": "EventEmitter<WcsGridRowSelectedEventDetails>"
              },
              "description": "Event emitted when a row is selected or unselected"
            },
            {
              "name": "wcsGridAllSelectionChange",
              "type": {
                "text": "EventEmitter<WcsGridAllRowSelectedEventDetails>"
              },
              "description": "Event emitted when all rows are selected or unselected"
            }
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Grid",
          "declaration": {
            "name": "Grid",
            "module": "components/grid/grid.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-grid",
          "declaration": {
            "name": "Grid",
            "module": "components/grid/grid.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/grid-column/grid-column.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "The grid column is a subcomponent of `wcs-grid` that represents a column of the table.",
          "name": "GridColumn",
          "cssProperties": [
            {
              "description": "Border separator between column names",
              "name": "--wcs-grid-column-border-left"
            }
          ],
          "cssParts": [
            {
              "description": "CSS part for each column for styling. e.g: first_name-column, email-column",
              "name": "[path]-column"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "el",
              "type": {
                "text": "HTMLWcsGridColumnElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "string"
              },
              "description": "Represents the name of the field from the `data` object (e.g: first_name, last_name, email, ...)"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the column displayed on the table (e.g: First Name, Last Name, Email, ...)"
            },
            {
              "kind": "field",
              "name": "sort",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Make the column sortable."
            },
            {
              "kind": "field",
              "name": "sortFn",
              "type": {
                "text": "WcsSortFn"
              },
              "description": "Customizable sort function to change the comparison of values."
            },
            {
              "kind": "field",
              "name": "formatter",
              "type": {
                "text": "WcsCellFormatter"
              },
              "description": "Customizable formatter function to render the cell differently."
            },
            {
              "kind": "field",
              "name": "sortOrder",
              "type": {
                "text": "WcsSortOrder"
              },
              "default": "'none'",
              "description": "Defines if the column sort is ascending or descending.  \r\n`none` = the column is not sorted."
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "string"
              },
              "description": "Set the column `<th>` element width."
            },
            {
              "kind": "field",
              "name": "customCells",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Set to true if using a `wcs-custom-cell` linked to it."
            },
            {
              "kind": "field",
              "name": "hidden",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flag to hide the column."
            },
            {
              "kind": "method",
              "name": "parseMyObjectProp",
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "sortOrderChange",
              "parameters": [
                {
                  "name": "_",
                  "type": {
                    "text": "WcsSortOrder"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emitSortConfig"
            },
            {
              "kind": "method",
              "name": "render",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "onSortClick",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "path",
              "fieldName": "path",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "name",
              "fieldName": "name",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "sort",
              "fieldName": "sort",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "sort-fn",
              "fieldName": "sortFn",
              "type": {
                "text": "WcsSortFn"
              }
            },
            {
              "name": "formatter",
              "fieldName": "formatter",
              "type": {
                "text": "WcsCellFormatter"
              }
            },
            {
              "name": "sort-order",
              "fieldName": "sortOrder",
              "type": {
                "text": "WcsSortOrder"
              }
            },
            {
              "name": "width",
              "fieldName": "width",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "custom-cells",
              "fieldName": "customCells",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "hidden",
              "fieldName": "hidden",
              "type": {
                "text": "boolean"
              }
            }
          ],
          "tagName": "wcs-grid-column",
          "events": [
            {
              "name": "wcsSortChange",
              "type": {
                "text": "EventEmitter<WcsGridColumnSortChangeEventDetails>"
              },
              "description": "Event emitted when the sort of the column is changed."
            },
            {
              "name": "wcsHiddenChange",
              "type": {
                "text": "EventEmitter<boolean>"
              },
              "description": "Event emitted if the column is dynamically switching visibility."
            }
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridColumn",
          "declaration": {
            "name": "GridColumn",
            "module": "components/grid-column/grid-column.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-grid-column",
          "declaration": {
            "name": "GridColumn",
            "module": "components/grid-column/grid-column.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/grid-column/grid-sort-arrow.tsx",
      "declarations": [
        {
          "kind": "function",
          "name": "GridSortArrow",
          "parameters": [
            {
              "name": "{ state }"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridSortArrow",
          "declaration": {
            "name": "GridSortArrow",
            "module": "components/grid-column/grid-sort-arrow.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/grid-custom-cell/grid-custom-cell.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "The grid custom cell is a subcomponent of `wcs-grid`.",
          "name": "GridCustomCell",
          "members": [
            {
              "kind": "field",
              "name": "columnId",
              "type": {
                "text": "string"
              },
              "description": "ID of the column for which to render the cell"
            },
            {
              "kind": "field",
              "name": "rowId",
              "type": {
                "text": "any"
              },
              "description": "Key value of the object rendered for the cell's row"
            },
            {
              "kind": "method",
              "name": "render",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "column-id",
              "fieldName": "columnId",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "row-id",
              "fieldName": "rowId",
              "type": {
                "text": "any"
              }
            }
          ],
          "tagName": "wcs-grid-custom-cell",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridCustomCell",
          "declaration": {
            "name": "GridCustomCell",
            "module": "components/grid-custom-cell/grid-custom-cell.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-grid-custom-cell",
          "declaration": {
            "name": "GridCustomCell",
            "module": "components/grid-custom-cell/grid-custom-cell.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/grid-pagination/grid-pagination-arrow.tsx",
      "declarations": [
        {
          "kind": "function",
          "name": "GridPaginationArrow",
          "parameters": [
            {
              "name": "{ active, order, double = false }"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridPaginationArrow",
          "declaration": {
            "name": "GridPaginationArrow",
            "module": "components/grid-pagination/grid-pagination-arrow.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/grid-pagination/grid-pagination.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "The grid pagination is a subcomponent of `wcs-grid`, slotted in `grid-pagination` under the `<table>` element.",
          "name": "GridPagination",
          "members": [
            {
              "kind": "field",
              "name": "INDEX_FIRST_PAGE",
              "type": {
                "text": "number"
              },
              "static": true,
              "readonly": true,
              "default": "0"
            },
            {
              "kind": "field",
              "name": "availablePageSizes",
              "type": {
                "text": "number[]"
              },
              "default": "[10, 20, 50]",
              "description": "Set the available page sizes in the pagination dropdown on the left."
            },
            {
              "kind": "field",
              "name": "currentPage",
              "type": {
                "text": "number"
              },
              "description": "The current page of the pagination. First page starts at index 0."
            },
            {
              "kind": "field",
              "name": "pageSize",
              "type": {
                "text": "number"
              },
              "default": "this.availablePageSizes[0]",
              "description": "Maximum number of elements shown per page.  \r\nDefault is the first value of `availablePageSizes`."
            },
            {
              "kind": "field",
              "name": "itemsCount",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Total elements in the grid.  \r\n- **Grid in `Server mode`** : You have to set `itemsCount` = your total data length.  \r\n- **Grid not in Server mode** : Do not set it manually : itemsCount is set and updated every pagination refresh."
            },
            {
              "kind": "field",
              "name": "pageCount",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Max number of pages.  \r\n- **Grid in `Server mode`** : You have to set `pageCount` = `itemsCount` divided by `pageSize`.  \r\n- **Grid not in Server mode** : Do not set it manually : pageCount is set and updated every pagination refresh."
            },
            {
              "kind": "method",
              "name": "lastPage",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "nextPage",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "canGoToNextPage",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "previousPage",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "canGoToPreviousPage",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "firstPage",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "onChangePagesize",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<SelectChangeEventDetail>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emitPaginationChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "render",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "available-page-sizes",
              "fieldName": "availablePageSizes",
              "type": {
                "text": "number[]"
              }
            },
            {
              "name": "current-page",
              "fieldName": "currentPage",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "page-size",
              "fieldName": "pageSize",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "items-count",
              "fieldName": "itemsCount",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "page-count",
              "fieldName": "pageCount",
              "type": {
                "text": "number"
              }
            }
          ],
          "tagName": "wcs-grid-pagination",
          "events": [
            {
              "name": "wcsGridPaginationChange",
              "type": {
                "text": "EventEmitter<WcsGridPaginationChangeEventDetails>"
              },
              "description": "Event emitted when the pagination changes."
            }
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridPagination",
          "declaration": {
            "name": "GridPagination",
            "module": "components/grid-pagination/grid-pagination.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-grid-pagination",
          "declaration": {
            "name": "GridPagination",
            "module": "components/grid-pagination/grid-pagination.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/header/header.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Header",
          "slots": [
            {
              "description": "SNCF Logo",
              "name": "logo"
            },
            {
              "description": "Title of your application",
              "name": "title"
            },
            {
              "description": "Actions such as buttons, dropdown or any useful information to always display on your application",
              "name": "actions"
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "hostData"
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "tagName": "wcs-header",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Header",
          "declaration": {
            "name": "Header",
            "module": "components/header/header.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-header",
          "declaration": {
            "name": "Header",
            "module": "components/header/header.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/hint/hint.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Hint",
          "members": [
            {
              "kind": "field",
              "name": "small",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the component should display the small version of the hint"
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "attributes": [
            {
              "name": "small",
              "fieldName": "small",
              "type": {
                "text": "boolean"
              }
            }
          ],
          "tagName": "wcs-hint",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Hint",
          "declaration": {
            "name": "Hint",
            "module": "components/hint/hint.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-hint",
          "declaration": {
            "name": "Hint",
            "module": "components/hint/hint.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/horizontal-stepper/horizontal-step.tsx",
      "declarations": [
        {
          "kind": "function",
          "name": "HorizontalStep",
          "parameters": [
            {
              "name": "{\r\n        step,\r\n        checkOnComplete,\r\n        complete,\r\n        passed,\r\n        active,\r\n        first,\r\n        disable,\r\n        onClick\r\n    }"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "HorizontalStep",
          "declaration": {
            "name": "HorizontalStep",
            "module": "components/horizontal-stepper/horizontal-step.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/horizontal-stepper/horizontal-stepper-interface.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "components/horizontal-stepper/horizontal-stepper.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "HorizontalStepper",
          "members": [
            {
              "kind": "field",
              "name": "el",
              "type": {
                "text": "HTMLWcsHorizontalStepperElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "currentStep",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "index of the active step. The index corresponds to the index of the step in the 'steps' list"
            },
            {
              "kind": "field",
              "name": "steps",
              "type": {
                "text": "HorizontalStepConfig[]"
              },
              "description": "steps to display"
            },
            {
              "kind": "field",
              "name": "mode",
              "type": {
                "text": "HorizontalStepperMode"
              },
              "default": "'nonLinear'",
              "description": "Specifies if the stepper is in linear mode (the user can only click on the next step)\r\nor non-linear (the user can click on any step)"
            },
            {
              "kind": "field",
              "name": "checkOnComplete",
              "type": {
                "text": "boolean"
              },
              "description": "Specifies whether a check should be displayed when a step is passed."
            },
            {
              "kind": "field",
              "name": "internalCurrentStep",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onCurrentStepChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "oldValue",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "previous"
            },
            {
              "kind": "method",
              "name": "next"
            },
            {
              "kind": "method",
              "name": "navigateToIndex",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "direction",
                  "type": {
                    "text": "'backward' | 'forward'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "render",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "isComplete",
              "privacy": "private",
              "parameters": [
                {
                  "name": "step",
                  "type": {
                    "text": "HorizontalStepConfig"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderLabels",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "isDisable",
              "privacy": "private",
              "parameters": [
                {
                  "name": "step"
                },
                {
                  "name": "index"
                }
              ]
            },
            {
              "kind": "method",
              "name": "isNextPossibleStep",
              "privacy": "private",
              "parameters": [
                {
                  "name": "index"
                }
              ]
            },
            {
              "kind": "method",
              "name": "previousStepIsCompleteAndNotActive",
              "privacy": "private",
              "parameters": [
                {
                  "name": "index"
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "current-step",
              "fieldName": "currentStep",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "steps",
              "fieldName": "steps",
              "type": {
                "text": "HorizontalStepConfig[]"
              }
            },
            {
              "name": "mode",
              "fieldName": "mode",
              "type": {
                "text": "HorizontalStepperMode"
              }
            },
            {
              "name": "check-on-complete",
              "fieldName": "checkOnComplete",
              "type": {
                "text": "boolean"
              }
            }
          ],
          "tagName": "wcs-horizontal-stepper",
          "events": [
            {
              "name": "wcsHorizontalStepClick",
              "type": {
                "text": "EventEmitter<HorizontalStepClickEvent>"
              },
              "description": "Emits when the user selects a new step."
            }
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "HorizontalStepper",
          "declaration": {
            "name": "HorizontalStepper",
            "module": "components/horizontal-stepper/horizontal-stepper.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-horizontal-stepper",
          "declaration": {
            "name": "HorizontalStepper",
            "module": "components/horizontal-stepper/horizontal-stepper.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/icon/icon.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Icon",
          "members": [
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'x5' | 'x75' | '1x' | '1x2' | '1x5' | '1x7' | '2x' | '3x' | '30px' | '50px' | '66px' | '90px' | '96px' | '140px'"
              }
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "attributes": [
            {
              "name": "icon",
              "fieldName": "icon",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "size",
              "fieldName": "size",
              "type": {
                "text": "'x5' | 'x75' | '1x' | '1x2' | '1x5' | '1x7' | '2x' | '3x' | '30px' | '50px' | '66px' | '90px' | '96px' | '140px'"
              }
            }
          ],
          "tagName": "wcs-icon",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Icon",
          "declaration": {
            "name": "Icon",
            "module": "components/icon/icon.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-icon",
          "declaration": {
            "name": "Icon",
            "module": "components/icon/icon.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/input/input-interface.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "WcsInputSizeValues",
          "type": {
            "text": "['s', 'm', 'l']"
          },
          "default": "['s', 'm', 'l']"
        },
        {
          "kind": "function",
          "name": "isWcsInputSize",
          "return": {
            "type": {
              "text": "size is WcsInputSize"
            }
          },
          "parameters": [
            {
              "name": "size",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WcsInputSizeValues",
          "declaration": {
            "name": "WcsInputSizeValues",
            "module": "components/input/input-interface.ts"
          }
        },
        {
          "kind": "js",
          "name": "isWcsInputSize",
          "declaration": {
            "name": "isWcsInputSize",
            "module": "components/input/input-interface.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/input/input.e2e.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "components/input/input.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "The input component is a form control that accepts a single line of text.\r\nImplementation mainly inspired from Ionic Input Component.\r\n\r\n\r\n<details>\r\n    <summary>Accessibility guidelines 💡</summary>\r\n    > - Provide a `<wcs-label>` next to the input\r\n    > - Use the `disabled` prop to add the HTML `disabled` attribute to the `input`\r\n    > - Use the `readonly` prop to add the HTML `readonly` attribute to the `input`\r\n    > - Use the `autofocus` prop to add the HTML `autofocus` attribute to the `input`. Use it if you want your input focus\r\n    automatically when the page load\r\n    > - Adapt the `type` to lets user enter information more easily (_ex: `type=\"number\"` for an input which only accept numbers entry_)\r\n</details>",
          "name": "Input",
          "members": [
            {
              "kind": "field",
              "name": "nativeInput",
              "type": {
                "text": "HTMLInputElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "inputId",
              "privacy": "private",
              "default": "`wcs-input-${inputIds++}`"
            },
            {
              "kind": "field",
              "name": "didBlurAfterEdit",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "inheritedAttributes",
              "type": {
                "text": "{ [k: string]: any }"
              },
              "privacy": "private",
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "iconPassword",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "\"visibility\""
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "passwordReveal",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "el",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "accept",
              "type": {
                "text": "string | undefined"
              },
              "description": "If the value of the type attribute is `\"file\"`, then this attribute will indicate the types of files that the\r\nserver accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers."
            },
            {
              "kind": "field",
              "name": "autocapitalize",
              "type": {
                "text": "string"
              },
              "default": "'off'",
              "description": "Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\r\nAvailable options: `\"off\"`, `\"none\"`, `\"on\"`, `\"sentences\"`, `\"words\"`, `\"characters\"`."
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "AutocompleteTypes"
              },
              "default": "'off'",
              "description": "Indicates whether the value of the control can be automatically completed by the browser."
            },
            {
              "kind": "field",
              "name": "autocorrect",
              "type": {
                "text": "'on' | 'off'"
              },
              "default": "'off'",
              "description": "Whether auto correction should be enabled when the user is entering/editing the text value."
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This Boolean attribute lets you specify that a form control should have input focus when the page loads."
            },
            {
              "kind": "field",
              "name": "clearInput",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input."
            },
            {
              "kind": "field",
              "name": "clearOnEdit",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If `true`, the value will be cleared after focus upon edit.\r\nDefaults to `true` when `type` is `\"password\"`, `false` for all other types."
            },
            {
              "kind": "field",
              "name": "debounce",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Set the amount of time, in milliseconds, to wait to trigger the `wcsChange` event after each keystroke.\r\nThis also impacts form bindings such as `ngModel` or `v-model`."
            },
            {
              "kind": "field",
              "name": "prefixLabel",
              "type": {
                "text": "string"
              },
              "description": "Prefix displayed before the text field contents. This is not included in the value."
            },
            {
              "kind": "field",
              "name": "suffixLabel",
              "type": {
                "text": "string"
              },
              "description": "Suffix displayed after the text field contents. This is not included in the value."
            },
            {
              "kind": "method",
              "name": "debounceChanged",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If `true`, the user cannot interact with the input."
            },
            {
              "kind": "field",
              "name": "enterkeyhint",
              "type": {
                "text": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send' | undefined"
              },
              "description": "A hint to the browser for which enter key to display.\r\nPossible values: `\"enter\"`, `\"done\"`, `\"go\"`, `\"next\"`,\r\n`\"previous\"`, `\"search\"`, and `\"send\"`."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "WcsInputSize"
              },
              "default": "'m'",
              "description": "Specify the size (height) of the input."
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string"
              },
              "description": "Name of the material icon to add to the input"
            },
            {
              "kind": "field",
              "name": "inputmode",
              "type": {
                "text": "'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search' | undefined"
              },
              "description": "A hint to the browser for which keyboard to display.\r\nPossible values: `\"none\"`, `\"text\"`, `\"tel\"`, `\"url\"`,\r\n`\"email\"`, `\"numeric\"`, `\"decimal\"`, and `\"search\"`."
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "string | undefined"
              },
              "description": "The maximum value, which must not be less than its minimum (min attribute) value."
            },
            {
              "kind": "field",
              "name": "maxlength",
              "type": {
                "text": "number | undefined"
              },
              "description": "If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute\r\nspecifies the maximum number of characters that the user can enter."
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "string | undefined"
              },
              "description": "The minimum value, which must not be greater than its maximum (max attribute) value."
            },
            {
              "kind": "field",
              "name": "minlength",
              "type": {
                "text": "number | undefined"
              },
              "description": "If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute\r\nspecifies the minimum number of characters that the user can enter."
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to\r\n`\"email\"` or `\"file\"`, otherwise it is ignored."
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the control, which is submitted with the form data."
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string | undefined"
              },
              "description": "A regular expression that the value is checked against. The pattern must match the entire value, not just some\r\nsubset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value\r\nof the type attribute is `\"text\"`, `\"search\"`, `\"tel\"`, `\"url\"`, `\"email\"`, `\"date\"`, or `\"password\"`, otherwise\r\nit is ignored. When the type attribute is `\"date\"`, `pattern` will only be used in browsers that do not support\r\nthe `\"date\"` input type natively. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date for\r\nmore information."
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string | null | undefined"
              },
              "description": "Instructional text that shows before the input has a value."
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If `true`, the user cannot modify the value."
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If `true`, the user must fill in a value before submitting a form."
            },
            {
              "kind": "field",
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If `true`, the element will have its spelling and grammar checked."
            },
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "'initial' | 'error'"
              },
              "default": "'initial'",
              "description": "Specifies the state of the input. By default the input is in an normal state but you can to set it to 'error'\r\nstate if the data given by the user is not valid."
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "string | undefined"
              },
              "description": "Works with the min and max attributes to limit the increments at which a value can be set.\r\nPossible values are: `\"any\"` or a positive floating point number."
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "TextFieldTypes"
              },
              "default": "'text'",
              "description": "The type of control to display. The default type is text."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | number | null | undefined"
              },
              "default": "''",
              "description": "The value of the input."
            },
            {
              "kind": "method",
              "name": "setFocus",
              "deprecated": "use the native focus method instead\r\nSets focus on the native `input` in `wcs-input`."
            },
            {
              "kind": "method",
              "name": "getInputElement",
              "return": {
                "type": {
                  "text": "Promise<HTMLInputElement>"
                }
              },
              "description": "Returns the native `<input>` element used under the hood."
            },
            {
              "kind": "method",
              "name": "setAriaAttribute",
              "parameters": [
                {
                  "name": "attr",
                  "type": {
                    "text": "AriaAttributeName"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "shouldClearOnEdit",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getValueAsString",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "onInput",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "onChange",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "onBlur",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "onFocus",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "onKeydown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "clearTextInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "focusChanged",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "hasValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "passwordRevealIconClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "onPasswordRevealChange",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "attributes": [
            {
              "name": "fire-focus-events",
              "fieldName": "fireFocusEvents"
            },
            {
              "name": "accept",
              "fieldName": "accept",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "autocapitalize",
              "fieldName": "autocapitalize"
            },
            {
              "name": "autocomplete",
              "fieldName": "autocomplete",
              "type": {
                "text": "AutocompleteTypes"
              }
            },
            {
              "name": "autocorrect",
              "fieldName": "autocorrect",
              "type": {
                "text": "'on' | 'off'"
              }
            },
            {
              "name": "autofocus",
              "fieldName": "autofocus"
            },
            {
              "name": "clear-input",
              "fieldName": "clearInput"
            },
            {
              "name": "clear-on-edit",
              "fieldName": "clearOnEdit",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "debounce",
              "fieldName": "debounce"
            },
            {
              "name": "prefix-label",
              "fieldName": "prefixLabel",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "suffix-label",
              "fieldName": "suffixLabel",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "disabled",
              "fieldName": "disabled"
            },
            {
              "name": "enterkeyhint",
              "fieldName": "enterkeyhint",
              "type": {
                "text": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
              }
            },
            {
              "name": "size",
              "fieldName": "size",
              "type": {
                "text": "WcsInputSize"
              }
            },
            {
              "name": "icon",
              "fieldName": "icon",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "inputmode",
              "fieldName": "inputmode",
              "type": {
                "text": "'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'"
              }
            },
            {
              "name": "max",
              "fieldName": "max",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "maxlength",
              "fieldName": "maxlength",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "min",
              "fieldName": "min",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "minlength",
              "fieldName": "minlength",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "multiple",
              "fieldName": "multiple",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "name",
              "fieldName": "name",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "pattern",
              "fieldName": "pattern",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "placeholder",
              "fieldName": "placeholder",
              "type": {
                "text": "string | null"
              }
            },
            {
              "name": "readonly",
              "fieldName": "readonly"
            },
            {
              "name": "required",
              "fieldName": "required"
            },
            {
              "name": "spellcheck",
              "fieldName": "spellcheck"
            },
            {
              "name": "state",
              "fieldName": "state",
              "type": {
                "text": "'initial' | 'error'"
              }
            },
            {
              "name": "step",
              "fieldName": "step",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "type",
              "fieldName": "type",
              "type": {
                "text": "TextFieldTypes"
              }
            },
            {
              "name": "value",
              "fieldName": "value",
              "type": {
                "text": "string | number | null"
              }
            }
          ],
          "tagName": "wcs-input",
          "events": [
            {
              "name": "wcsInput",
              "type": {
                "text": "EventEmitter<KeyboardEvent>"
              },
              "description": "Emitted when a keyboard input occurred. See https://developer.mozilla.org/en-US/docs/Web/Events/input"
            },
            {
              "name": "wcsChange",
              "type": {
                "text": "EventEmitter<InputChangeEventDetail>"
              },
              "description": "Emitted when the value has changed. See https://developer.mozilla.org/en-US/docs/Web/Events/change"
            },
            {
              "name": "wcsBlur",
              "type": {
                "text": "EventEmitter<FocusEvent>"
              },
              "description": "Emitted when the input loses focus."
            },
            {
              "name": "wcsFocus",
              "type": {
                "text": "EventEmitter<FocusEvent>"
              },
              "description": "Emitted when the input has focus."
            }
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Input",
          "declaration": {
            "name": "Input",
            "module": "components/input/input.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-input",
          "declaration": {
            "name": "Input",
            "module": "components/input/input.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/label/label.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Label",
          "members": [
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "attributes": [
            {
              "name": "required",
              "fieldName": "required"
            }
          ],
          "tagName": "wcs-label",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Label",
          "declaration": {
            "name": "Label",
            "module": "components/label/label.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-label",
          "declaration": {
            "name": "Label",
            "module": "components/label/label.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/list-item/list-item.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ListItem",
          "members": [
            {
              "kind": "field",
              "name": "activated",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "True if the item is active. Adds a background color that highlights it."
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "attributes": [
            {
              "name": "activated",
              "fieldName": "activated",
              "type": {
                "text": "boolean"
              }
            }
          ],
          "tagName": "wcs-list-item",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ListItem",
          "declaration": {
            "name": "ListItem",
            "module": "components/list-item/list-item.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-list-item",
          "declaration": {
            "name": "ListItem",
            "module": "components/list-item/list-item.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/list-item-properties/list-item-properties.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ListItemProperties",
          "members": [
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "tagName": "wcs-list-item-properties",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ListItemProperties",
          "declaration": {
            "name": "ListItemProperties",
            "module": "components/list-item-properties/list-item-properties.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-list-item-properties",
          "declaration": {
            "name": "ListItemProperties",
            "module": "components/list-item-properties/list-item-properties.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/list-item-property/list-item-property.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ListItemProperty",
          "members": [
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "tagName": "wcs-list-item-property",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ListItemProperty",
          "declaration": {
            "name": "ListItemProperty",
            "module": "components/list-item-property/list-item-property.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-list-item-property",
          "declaration": {
            "name": "ListItemProperty",
            "module": "components/list-item-property/list-item-property.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/modal/modal-interface.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "components/modal/modal.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "The modal component (also named dialog or popup) is an interface element that appears on top of the page content.\r\nUse it to show a message, a confirmation dialog, or any other content like forms.\r\n\r\n<details>\r\n    <summary>Accessibility guidelines 💡</summary>\r\n    > - Modal element has `role=\"dialog\"` and `aria-modal=\"true\"`\r\n    > - Keyboard navigation is trapped inside the modal\r\n    > - It is mandatory to set the `modalTriggerControlsId` to the id of the element that opens the dialog, in order\r\n    > to focus it upon dialog dismissal.\r\n    > - The modal can be closed at any time by pressing the Escape key.\r\n    >\r\n    > - More info : https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/\r\n</details>",
          "name": "Modal",
          "cssProperties": [
            {
              "description": "Max height of the main container",
              "name": "--wcs-modal-max-height"
            },
            {
              "description": "Overflow-y of the content",
              "name": "--wcs-modal-overflow-y"
            }
          ],
          "slots": [
            {
              "description": "Main container slot",
              "name": "<no-name>"
            },
            {
              "description": "Header container slot (for title)",
              "name": "header"
            },
            {
              "description": "Actions container slot (for buttons)",
              "name": "actions"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "el",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "withoutBackdrop",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specifies whether the component should display a backdrop on the entire page"
            },
            {
              "kind": "field",
              "name": "show",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Displays the modal"
            },
            {
              "kind": "field",
              "name": "showCloseButton",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specifies whether the component should display a close button.\r\nif false, it won't close the modal when the escape key is pressed."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "ModalSize"
              },
              "default": "'m'",
              "description": "There are multiple sizes for modals. The default size is medium (m), however other sizes are available. Select the\r\nsize best suited for the content and screen size displaying the modal. Remember to test responsiveness."
            },
            {
              "kind": "field",
              "name": "hideActions",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specifies whether the component should hide the actions slot or not"
            },
            {
              "kind": "field",
              "name": "modalTriggerControlsId",
              "type": {
                "text": "string"
              },
              "description": "Specifies which element id controls the modal",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "modalId",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "modalIds++",
              "description": "Give an unique id"
            },
            {
              "kind": "field",
              "name": "firstFocusableElement",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "lastFocusableElement",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "showAttributeChangedMarker",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "This attribute is used to determine whether the show attribute has changed since the last rendering. \r\nThis allows us to call the focus method on the first element of the modal when the show attribute changes to true. \r\nThis call is made in the componentDidRender method"
            },
            {
              "kind": "field",
              "name": "hasBeenClosedBefore",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "This attribute is used to determine if the modal has been closed for the first time since its last activation.\r\nIt is set to 'true' when the modal is first closed, and will be reset to 'false' when the modal is shown again.\r\nThis state is important for accessibility reasons in order to focus the modal trigger element (like the button \r\nwhich controls the modal)"
            },
            {
              "kind": "method",
              "name": "onShowChange"
            },
            {
              "kind": "method",
              "name": "updateFocusableElements",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "close",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onCloseButtonClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "_",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSlotContentChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "attributes": [
            {
              "name": "without-backdrop",
              "fieldName": "withoutBackdrop",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "show",
              "fieldName": "show",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "show-close-button",
              "fieldName": "showCloseButton",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "size",
              "fieldName": "size",
              "type": {
                "text": "ModalSize"
              }
            },
            {
              "name": "hide-actions",
              "fieldName": "hideActions",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "modal-trigger-controls-id",
              "fieldName": "modalTriggerControlsId",
              "type": {
                "text": "string"
              }
            }
          ],
          "tagName": "wcs-modal",
          "events": [
            {
              "name": "wcsDialogClosed",
              "type": {
                "text": "EventEmitter<void>"
              },
              "description": "Triggered when the user leaves the dialog with the closing button."
            }
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Modal",
          "declaration": {
            "name": "Modal",
            "module": "components/modal/modal.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-modal",
          "declaration": {
            "name": "Modal",
            "module": "components/modal/modal.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/mat-icon/mat-icon-interface.tsx",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "components/mat-icon/mat-icon.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "MatIcon",
          "members": [
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string"
              },
              "description": "Use the icon name from Material Icons"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "MaterialIconSize"
              },
              "default": "'m'",
              "description": "Size of the icon"
            },
            {
              "kind": "field",
              "name": "family",
              "type": {
                "text": "MaterialIconFamily"
              },
              "default": "'filled'",
              "description": "Family of the icon"
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "attributes": [
            {
              "name": "icon",
              "fieldName": "icon",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "size",
              "fieldName": "size",
              "type": {
                "text": "MaterialIconSize"
              }
            },
            {
              "name": "family",
              "fieldName": "family",
              "type": {
                "text": "MaterialIconFamily"
              }
            }
          ],
          "tagName": "wcs-mat-icon",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MatIcon",
          "declaration": {
            "name": "MatIcon",
            "module": "components/mat-icon/mat-icon.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-mat-icon",
          "declaration": {
            "name": "MatIcon",
            "module": "components/mat-icon/mat-icon.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/native-select/native-select.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "The `wcs-native-select` component is designed to accept a native `<select>` element as a slotted child. This choice\r\nallows developers to bind the `<select>` element using the framework of their choice, without the need to re-expose all the\r\nproperties of the `<select>` and `<option>` elements in this component.\r\n\r\nThe component wraps the native `<select>` element and provides custom styles and behavior, while preserving the native\r\nfunctionality and accessibility.\r\n\r\n### ✅ Guidance\r\n\r\n- To have a placeholder, you must have an option as child which has `selected` attribute and `disabled`\r\nattribute. You can add the `hidden` attribute to don't show the placeholder option in the options overlay.\r\n\r\n### Example usage\r\n\r\n```html\r\n<wcs-native-select>\r\n  <select>\r\n    <option value=\"option1\">Option 1</option>\r\n    <option value=\"option2\">Option 2</option>\r\n    <option value=\"option3\">Option 3</option>\r\n  </select>\r\n</wcs-native-select>\r\n```\r\n\r\n### Note\r\n- We did not find a way to detect when the select is reset, if you want to apply the placeholder style when the\r\nselect is reset, you have to call the `updateStyles()` method manually.\r\n- It is strongly recommended to use select-native when you don't have to support the multi-selection feature",
          "name": "NativeSelect",
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "WcsNativeSelectSize"
              },
              "default": "'m'",
              "description": "The `size` property controls the size of the slotted `select` element by adjusting its padding.\r\nThere are two possible size options:\r\n- 'm': medium size\r\n- 'l': large size\r\n\r\nThe default value is 'm'."
            },
            {
              "kind": "field",
              "name": "el",
              "type": {
                "text": "HTMLWcsNativeSelectElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "selectElement",
              "type": {
                "text": "HTMLSelectElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "observer",
              "type": {
                "text": "MutationObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "SLOTTED_SELECT_TRACKED_ATTRIBUTES_LIST",
              "type": {
                "text": "array"
              },
              "privacy": "private",
              "readonly": true,
              "default": "['disabled']"
            },
            {
              "kind": "method",
              "name": "setAriaAttribute",
              "parameters": [
                {
                  "name": "attr",
                  "type": {
                    "text": "AriaAttributeName"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onSelectedOptionChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_updateStyles",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "isPlaceholderOptionSelected",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "applySelectedOptionStylesOnNativeSlottedSelectElement",
              "privacy": "private",
              "description": "This method should always unset all styles modified by the `applyPlaceholderStylesOnNativeSlottedSelectElement()`"
            },
            {
              "kind": "method",
              "name": "applyPlaceholderStylesOnNativeSlottedSelectElement",
              "privacy": "private",
              "description": "This method apply styles when the placeholder is shown.\r\n\r\nWe use javascript because we cannot achieve that behaviour in pure css when the native select is not required"
            },
            {
              "kind": "method",
              "name": "updateHostAttributeWithSlottedSelect",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateStyles",
              "description": "Use this method to force the component to update its styles. It can be useful when the select is reset (with a placeholder)."
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "attributes": [
            {
              "name": "size",
              "fieldName": "size",
              "type": {
                "text": "WcsNativeSelectSize"
              }
            }
          ],
          "tagName": "wcs-native-select",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NativeSelect",
          "declaration": {
            "name": "NativeSelect",
            "module": "components/native-select/native-select.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-native-select",
          "declaration": {
            "name": "NativeSelect",
            "module": "components/native-select/native-select.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/nav/nav.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Nav",
          "members": [
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "tagName": "wcs-nav",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Nav",
          "declaration": {
            "name": "Nav",
            "module": "components/nav/nav.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-nav",
          "declaration": {
            "name": "Nav",
            "module": "components/nav/nav.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/nav-item/nav-item.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "NavItem",
          "members": [
            {
              "kind": "field",
              "name": "el",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "This attribute specify the text of the item."
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "Attributes mapped to a <a> tag.\r\n\r\nDon't forget to specify [routerLink] if using in conjuction with angular router."
            },
            {
              "kind": "method",
              "name": "onKeyDown",
              "parameters": [
                {
                  "name": "_event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "attributes": [
            {
              "name": "text",
              "fieldName": "text",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "href",
              "fieldName": "href",
              "type": {
                "text": "string"
              }
            }
          ],
          "tagName": "wcs-nav-item",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NavItem",
          "declaration": {
            "name": "NavItem",
            "module": "components/nav-item/nav-item.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-nav-item",
          "declaration": {
            "name": "NavItem",
            "module": "components/nav-item/nav-item.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/progress-bar/progress-bar.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "Component displaying progress as a bar.",
          "name": "ProgressBar",
          "members": [
            {
              "kind": "field",
              "name": "small",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the component display the small version"
            },
            {
              "kind": "field",
              "name": "showLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether it displays a label indicating the percentage of progress above the bar."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The actual value of the progress.\r\nRanging from 0 to 100."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "method",
              "name": "rootClasses",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "small",
              "fieldName": "small",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "show-label",
              "fieldName": "showLabel",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "value",
              "fieldName": "value",
              "type": {
                "text": "number"
              }
            }
          ],
          "tagName": "wcs-progress-bar",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ProgressBar",
          "declaration": {
            "name": "ProgressBar",
            "module": "components/progress-bar/progress-bar.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-progress-bar",
          "declaration": {
            "name": "ProgressBar",
            "module": "components/progress-bar/progress-bar.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/progress-radial/progress-radial.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "The progress-radial component is a circular progress bar that indicates the current completion of a task.",
          "name": "ProgressRadial",
          "members": [
            {
              "kind": "field",
              "name": "backgroundImageSize",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "120",
              "description": "The initial background image size (120x120) as specified in the background-image css property of .progress-circle"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "default": "120",
              "description": "The size of the progress radial (in px)"
            },
            {
              "kind": "field",
              "name": "showLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the component should display the % label inside"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The value of the progress radial. Prefer values between 0 and 100."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "method",
              "name": "getSvgStyle"
            },
            {
              "kind": "method",
              "name": "getSize"
            }
          ],
          "attributes": [
            {
              "name": "size",
              "fieldName": "size",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "show-label",
              "fieldName": "showLabel",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "value",
              "fieldName": "value",
              "type": {
                "text": "number"
              }
            }
          ],
          "tagName": "wcs-progress-radial",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ProgressRadial",
          "declaration": {
            "name": "ProgressRadial",
            "module": "components/progress-radial/progress-radial.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-progress-radial",
          "declaration": {
            "name": "ProgressRadial",
            "module": "components/progress-radial/progress-radial.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/radio/radio-interface.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "components/radio/radio.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Radio",
          "members": [
            {
              "kind": "field",
              "name": "inputId",
              "privacy": "private",
              "default": "`wcs-rb-${radioButtonIds++}`"
            },
            {
              "kind": "field",
              "name": "inputEl",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "el",
              "type": {
                "text": "HTMLWcsRadioElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "mode",
              "type": {
                "text": "RadioGroupMode"
              },
              "default": "'radio'"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "any | any[] | undefined | null"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If `true`, the radio is selected."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If `true`, the user cannot interact with the radio."
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "method",
              "name": "onKeyDown",
              "parameters": [
                {
                  "name": "_event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "checkedChanged",
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emitRadioChangeEvent"
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "attributes": [
            {
              "name": "mode",
              "fieldName": "mode",
              "type": {
                "text": "RadioGroupMode"
              }
            },
            {
              "name": "value",
              "fieldName": "value",
              "type": {
                "text": "any | any[] | undefined | null"
              }
            },
            {
              "name": "label",
              "fieldName": "label",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "checked",
              "fieldName": "checked"
            },
            {
              "name": "disabled",
              "fieldName": "disabled"
            },
            {
              "name": "name",
              "fieldName": "name",
              "type": {
                "text": "string"
              }
            }
          ],
          "tagName": "wcs-radio",
          "events": [
            {
              "name": "wcsRadioClick",
              "type": {
                "text": "EventEmitter<RadioChosedEvent>"
              }
            }
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Radio",
          "declaration": {
            "name": "Radio",
            "module": "components/radio/radio.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-radio",
          "declaration": {
            "name": "Radio",
            "module": "components/radio/radio.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/radio-group/radio-group-interface.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "components/radio-group/radio-group.e2e.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "components/radio-group/radio-group.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "RadioGroup",
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "any | any[] | undefined | null"
              }
            },
            {
              "kind": "field",
              "name": "name"
            },
            {
              "kind": "field",
              "name": "mode",
              "type": {
                "text": "RadioGroupMode"
              },
              "default": "'radio'"
            },
            {
              "kind": "field",
              "name": "el",
              "type": {
                "text": "HTMLWcsRadioGroupElement"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onValueChangeHandler",
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "HTMLWcsRadioElement[]"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "optionsNotDisabled",
              "type": {
                "text": "HTMLWcsRadioElement[]"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "selectedOptionChanged",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<RadioChosedEvent>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyUp",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateOptionsState",
              "privacy": "private",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "markAsChecked",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setAriaAttribute",
              "parameters": [
                {
                  "name": "attr",
                  "type": {
                    "text": "AriaAttributeName"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "fieldName": "value",
              "type": {
                "text": "any | any[] | undefined | null"
              }
            },
            {
              "name": "name",
              "fieldName": "name"
            },
            {
              "name": "mode",
              "fieldName": "mode",
              "type": {
                "text": "RadioGroupMode"
              }
            }
          ],
          "tagName": "wcs-radio-group",
          "events": [
            {
              "name": "wcsChange",
              "type": {
                "text": "EventEmitter<RadioGroupChangeEventDetail>"
              },
              "description": "Emitted when the value has changed."
            }
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RadioGroup",
          "declaration": {
            "name": "RadioGroup",
            "module": "components/radio-group/radio-group.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-radio-group",
          "declaration": {
            "name": "RadioGroup",
            "module": "components/radio-group/radio-group.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/select/select-arrow.tsx",
      "declarations": [
        {
          "kind": "function",
          "name": "SelectArrow",
          "parameters": [
            {
              "name": "{ up, ariaLabel}"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SelectArrow",
          "declaration": {
            "name": "SelectArrow",
            "module": "components/select/select-arrow.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/select/select-chips.tsx",
      "declarations": [
        {
          "kind": "function",
          "name": "SelectChips",
          "parameters": [
            {
              "name": "{disabled, option, onRemove}"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SelectChips",
          "declaration": {
            "name": "SelectChips",
            "module": "components/select/select-chips.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/select/select-interface.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "WcsDefaultSelectFilterFn",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "optionEl",
              "description": "wcs-select-option element"
            },
            {
              "name": "filter",
              "description": "input filter field value"
            }
          ],
          "description": "Default filtering function. Compares the string start of wcs-select-option element's text content\r\nwith your filter input."
        },
        {
          "kind": "variable",
          "name": "WcsSelectSizeValue",
          "type": {
            "text": "['m', 'l']"
          },
          "default": "['m', 'l']"
        },
        {
          "kind": "function",
          "name": "isWcsSelectSize",
          "return": {
            "type": {
              "text": "size is WcsSelectSize"
            }
          },
          "parameters": [
            {
              "name": "size",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WcsDefaultSelectFilterFn",
          "declaration": {
            "name": "WcsDefaultSelectFilterFn",
            "module": "components/select/select-interface.ts"
          }
        },
        {
          "kind": "js",
          "name": "WcsSelectSizeValue",
          "declaration": {
            "name": "WcsSelectSizeValue",
            "module": "components/select/select-interface.ts"
          }
        },
        {
          "kind": "js",
          "name": "isWcsSelectSize",
          "declaration": {
            "name": "isWcsSelectSize",
            "module": "components/select/select-interface.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/select/select-keyboard-event.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getActionForKeyboardEvent",
          "return": {
            "type": {
              "text": "KeyboardEventAssociatedAction[]"
            }
          },
          "parameters": [
            {
              "name": "event",
              "type": {
                "text": "KeyboardEvent"
              }
            },
            {
              "name": "currentState",
              "type": {
                "text": "'closed' | 'opened'"
              }
            },
            {
              "name": "type",
              "type": {
                "text": "'autocomplete_unique' | 'autocomplete_multiple' | 'unique' | 'multiple'"
              }
            }
          ],
          "description": "We follow this https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-select-only/"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getActionForKeyboardEvent",
          "declaration": {
            "name": "getActionForKeyboardEvent",
            "module": "components/select/select-keyboard-event.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/select/select.e2e.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "components/select/select.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "The select component (also named combobox) is a form component that allows users to select one or more options\r\nfrom a list.\r\nUse it with several slotted `wcs-select-option` inside.",
          "name": "Select",
          "slots": [
            {
              "description": "Contains all the options to render",
              "name": "wcs-select-option"
            },
            {
              "description": "Contains the customizable \"No result found\" div (autocomplete mode only).",
              "name": "wcs-select-filter-noresult"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "stateService",
              "type": {
                "text": "Interpreter<any, SelectStateSchema, SelectEvent>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "selectId",
              "privacy": "private",
              "default": "`wcs-select-${selectIds++}`"
            },
            {
              "kind": "field",
              "name": "labelElement",
              "type": {
                "text": "HTMLWcsLabelElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "optionsEl",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "optionsId",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "controlEl",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "values",
              "type": {
                "text": "SelectOptionValue[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "lastModifiedOptionElement",
              "type": {
                "text": "HTMLWcsSelectOptionElement | null"
              },
              "privacy": "private",
              "description": "This attribute mutate when a new option is selected OR unselected"
            },
            {
              "kind": "field",
              "name": "lastFocusedOptionElement",
              "type": {
                "text": "HTMLWcsSelectOptionElement | null"
              },
              "privacy": "private",
              "description": "It serves for accessibility feature: keyboard navigation. It serves to focus the option if defined when the select\r\nis opened based on which key pressed.\r\n\r\nWhen the select is <b>opened</b> user can navigate through options with keyboard:\r\n\r\n- Arrow right | down: `lastFocusedOptionElement` equals to the next option of `lastFocusedOptionElement` or\r\nthe first if `lastFocusedOptionElement` is not defined\r\n- Arrow left | top: `lastFocusedOptionElement` equals to the previous enabled option of `lastFocusedOptionElement`\r\nor the first if `lastFocusedOptionElement` is not defined\r\n- Page up: `lastFocusedOptionElement` equals to the first enabled option\r\n- Page down: `lastFocusedOptionElement` equals to the last enabled option"
            },
            {
              "kind": "field",
              "name": "lastHighlightedOptionElement",
              "type": {
                "text": "HTMLWcsSelectOptionElement | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "autocompleteInput",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "el",
              "type": {
                "text": "HTMLWcsSelectElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "Wether the select is expanded"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "WcsSelectSize"
              },
              "default": "'m'",
              "description": "Specify the size (height) of the select."
            },
            {
              "kind": "field",
              "name": "hasLoaded",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "Wether the component is fully loaded in the DOM."
            },
            {
              "kind": "field",
              "name": "displayText",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "description": "Text to display for the selected option, when no option is selected, the value is undefined."
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "description": "When the host is focused."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "any | null | undefined"
              },
              "description": "The currently selected value."
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string | null | undefined"
              },
              "description": "The text to display when the select is empty."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If `true`, the user cannot interact with the select."
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If `true`, the user can select multiple values at once."
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If `true`, the select acts as an autocomplete field to filter your results."
            },
            {
              "kind": "field",
              "name": "filterFn",
              "type": {
                "text": "WcsSelectFilterFn"
              },
              "description": "Customizable sort function to change the comparison of values. If not provided, uses the default behavior :\r\n`option.textContent.toLowerCase().startsWith(filter.toLowerCase())`"
            },
            {
              "kind": "field",
              "name": "chips",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If `true`, selected items are shown in chips mode."
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the control, which is submitted with the form data."
            },
            {
              "kind": "field",
              "name": "compareWith",
              "type": {
                "text": "(optionValue: any, selectedValue: any) => boolean | undefined"
              },
              "description": "Function used to compare options, default : deep comparison."
            },
            {
              "kind": "field",
              "name": "popper",
              "type": {
                "text": "Instance"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "showNoResultFoundLabel",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "Boolean to toggle the text \"No result found\" (only for autocomplete with filter)"
            },
            {
              "kind": "field",
              "name": "autocompleteValue",
              "privacy": "private",
              "default": "undefined",
              "description": "Value of the autocomplete input field"
            },
            {
              "kind": "field",
              "name": "overlayDirection",
              "type": {
                "text": "'bottom' | 'top'"
              },
              "privacy": "private",
              "default": "'bottom'"
            },
            {
              "kind": "method",
              "name": "open",
              "description": "Open the component."
            },
            {
              "kind": "method",
              "name": "close",
              "description": "Close the component."
            },
            {
              "kind": "method",
              "name": "onValueChangeHandler",
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateSelectedValue",
              "privacy": "private",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "reset",
              "privacy": "private",
              "description": "Reset the select: unselects all options for multiple mode and displays the placeholder"
            },
            {
              "kind": "method",
              "name": "createPopperInstance",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "emitChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "replaceOptions_firefoxBefore63",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "listenDomUpdate_firefoxBefore63",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setAriaAttribute",
              "parameters": [
                {
                  "name": "attr",
                  "type": {
                    "text": "AriaAttributeName"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "HTMLWcsSelectOptionElement[]"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "notDisabledOptions",
              "type": {
                "text": "HTMLWcsSelectOptionElement[]"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "initMachineOptions",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Partial<MachineOptions<any, SelectEvent>>"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleOptionSelectedOnMultiple",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "SelectOptionChosedEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateValueWithValues",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleOptionSelectedOnSingle",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "SelectOptionChosedEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addRippleEffect",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hasValue",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "onMouseDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onWindowClickEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onKeyDown",
              "parameters": [
                {
                  "name": "_event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "doActionFromKeyboardEventAssociatedAction",
              "parameters": [
                {
                  "name": "actionFromKeyboardEvent",
                  "type": {
                    "text": "KeyboardEventAssociatedAction"
                  }
                },
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getClosestActiveOptionIndexForState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number | 'nothing'"
                }
              },
              "parameters": [
                {
                  "name": "direction",
                  "type": {
                    "text": "'next' | 'previous'"
                  }
                },
                {
                  "name": "state",
                  "type": {
                    "text": "'highlighted' | 'focused' | 'modified'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectOption",
              "privacy": "private",
              "parameters": [
                {
                  "name": "indexToSelect",
                  "type": {
                    "text": "number"
                  },
                  "description": "Option index within non-deactivated options list"
                },
                {
                  "name": "fromKeyboard",
                  "default": "false"
                }
              ],
              "description": "Selects the non-disabled option with the index passed as a parameter.\r\nThe method sends an event to the state machine (the same as when clicking on an option with the mouse)"
            },
            {
              "kind": "method",
              "name": "selectClosestOption",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "direction",
                  "type": {
                    "text": "'next' | 'previous'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectFirstOption",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "selectLastOption",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "focusOption",
              "privacy": "private",
              "parameters": [
                {
                  "name": "indexToFocus",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "focusClosestOption",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "direction",
                  "type": {
                    "text": "'next' | 'previous'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "focusFirstOption",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "focusLastOption",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "selectedOptionChanged",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<SelectOptionChosedEvent>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "sendOptionSelectedToStateMachine",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "SelectOptionChosedEvent"
                  }
                },
                {
                  "name": "fromKeyboard",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "onSlotchange"
            },
            {
              "kind": "method",
              "name": "removeChip",
              "parameters": [
                {
                  "name": "v",
                  "type": {
                    "text": "SelectOptionValue"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "highlightOption",
              "privacy": "private",
              "parameters": [
                {
                  "name": "indexToHighlight",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "highlightFirstOption",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "highlightLastOption",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "highlightClosestOption",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "direction",
                  "type": {
                    "text": "'next' | 'previous'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "clearHighlightOnLastHighlightedOption",
              "privacy": "private",
              "description": "This method removes the highlight that applies to the last highlighted option if any.\r\nThis is used only for accessibility of autocomplete mode."
            },
            {
              "kind": "method",
              "name": "onAutocompleteInputEvent",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleAutocompleteValueChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "filter",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onFocus"
            },
            {
              "kind": "method",
              "name": "focusAutocompleteInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "method",
              "name": "focusedAttributes",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onAutocompleteFieldBlur",
              "privacy": "private",
              "parameters": [
                {
                  "name": "_e",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "size",
              "fieldName": "size",
              "type": {
                "text": "WcsSelectSize"
              }
            },
            {
              "name": "value",
              "fieldName": "value",
              "type": {
                "text": "any | null"
              }
            },
            {
              "name": "placeholder",
              "fieldName": "placeholder",
              "type": {
                "text": "string | null"
              }
            },
            {
              "name": "disabled",
              "fieldName": "disabled"
            },
            {
              "name": "multiple",
              "fieldName": "multiple"
            },
            {
              "name": "autocomplete",
              "fieldName": "autocomplete"
            },
            {
              "name": "filter-fn",
              "fieldName": "filterFn",
              "type": {
                "text": "WcsSelectFilterFn"
              }
            },
            {
              "name": "chips",
              "fieldName": "chips"
            },
            {
              "name": "name",
              "fieldName": "name",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "compare-with",
              "fieldName": "compareWith",
              "type": {
                "text": "(optionValue: any, selectedValue: any) => boolean"
              }
            }
          ],
          "tagName": "wcs-select",
          "events": [
            {
              "name": "wcsChange",
              "type": {
                "text": "EventEmitter<SelectChangeEventDetail>"
              },
              "description": "Emitted when the value has changed."
            },
            {
              "name": "wcsFocus",
              "type": {
                "text": "EventEmitter<void>"
              },
              "description": "Emitted when the select has focus."
            },
            {
              "name": "wcsBlur",
              "type": {
                "text": "EventEmitter<void>"
              },
              "description": "Emitted when the select loses focus."
            },
            {
              "name": "wcsFilterChange",
              "type": {
                "text": "EventEmitter<SelectFilerChangeEventDetail>"
              },
              "description": "Emitted when the autocomplete filter has changed."
            }
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Select",
          "declaration": {
            "name": "Select",
            "module": "components/select/select.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-select",
          "declaration": {
            "name": "Select",
            "module": "components/select/select.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/select-option/select-option-interface.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "components/select-option/select-option.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "Select option component, use in conjunction with wcs-select.",
          "name": "SelectOption",
          "members": [
            {
              "kind": "field",
              "name": "el",
              "type": {
                "text": "HTMLWcsSelectOptionElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "selectOptionId",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether this option can be selected."
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether this option is selected."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "any | undefined"
              },
              "description": "The option value, not what's displayed, use inner text instead."
            },
            {
              "kind": "field",
              "name": "chipColor",
              "type": {
                "text": "string | undefined"
              },
              "description": "Chip's displayed text color."
            },
            {
              "kind": "field",
              "name": "chipBackgroundColor",
              "type": {
                "text": "string | undefined"
              },
              "description": "Chip's background color."
            },
            {
              "kind": "field",
              "name": "mdcRipple",
              "type": {
                "text": "MDCRipple"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "chooseOption",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "UIEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onMouseDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  },
                  "description": "keyboard event"
                }
              ],
              "description": "Handles the keydown event to update the selection."
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "fieldName": "disabled"
            },
            {
              "name": "selected",
              "fieldName": "selected"
            },
            {
              "name": "highlighted",
              "fieldName": "highlighted"
            },
            {
              "name": "value",
              "fieldName": "value",
              "type": {
                "text": "any"
              }
            },
            {
              "name": "chip-color",
              "fieldName": "chipColor",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "chip-background-color",
              "fieldName": "chipBackgroundColor",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "multiple",
              "fieldName": "multiple"
            }
          ],
          "tagName": "wcs-select-option",
          "events": [
            {
              "name": "wcsSelectOptionClick",
              "type": {
                "text": "EventEmitter<SelectOptionChosedEvent>"
              }
            }
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SelectOption",
          "declaration": {
            "name": "SelectOption",
            "module": "components/select-option/select-option.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-select-option",
          "declaration": {
            "name": "SelectOption",
            "module": "components/select-option/select-option.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/skeleton/skeleton-interface.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "components/skeleton-circle/skeleton-circle.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "Use a skeleton circle as a placeholder round images, illustrations or components",
          "name": "SkeletonCircle",
          "members": [
            {
              "kind": "field",
              "name": "animation",
              "type": {
                "text": "WcsSkeletonAnimation"
              },
              "default": "'glide'",
              "description": "Specifies the animation of the skeleton"
            },
            {
              "kind": "field",
              "name": "radius",
              "type": {
                "text": "number"
              },
              "default": "50",
              "description": "Specifies the radius of the circle in px"
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "attributes": [
            {
              "name": "animation",
              "fieldName": "animation",
              "type": {
                "text": "WcsSkeletonAnimation"
              }
            },
            {
              "name": "radius",
              "fieldName": "radius",
              "type": {
                "text": "number"
              }
            }
          ],
          "tagName": "wcs-skeleton-circle",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SkeletonCircle",
          "declaration": {
            "name": "SkeletonCircle",
            "module": "components/skeleton-circle/skeleton-circle.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-skeleton-circle",
          "declaration": {
            "name": "SkeletonCircle",
            "module": "components/skeleton-circle/skeleton-circle.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/skeleton-rectangle/skeleton-rectangle.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "Use a skeleton rectangle as a placeholder for large images or square-shaped components",
          "name": "SkeletonRectangle",
          "cssProperties": [
            {
              "description": "Controls the border-radius of the 'rounded' skeleton rectangle (default 0.5rem)",
              "name": "--wcs-skeleton-border-radius"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "animation",
              "type": {
                "text": "WcsSkeletonAnimation"
              },
              "default": "'glide'",
              "description": "Specifies the animation of the skeleton"
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a border radius on the skeleton if true"
            },
            {
              "kind": "field",
              "name": "height",
              "type": {
                "text": "CssTypes.Height"
              },
              "default": "'auto'",
              "description": "Specifies the height of the skeleton (can be any valid CSS value)"
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "CssTypes.Width"
              },
              "default": "'auto'",
              "description": "Specifies the width of the skeleton (can be any valid CSS value)"
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "attributes": [
            {
              "name": "animation",
              "fieldName": "animation",
              "type": {
                "text": "WcsSkeletonAnimation"
              }
            },
            {
              "name": "rounded",
              "fieldName": "rounded",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "height",
              "fieldName": "height",
              "type": {
                "text": "CssTypes.Height"
              }
            },
            {
              "name": "width",
              "fieldName": "width",
              "type": {
                "text": "CssTypes.Width"
              }
            }
          ],
          "tagName": "wcs-skeleton-rectangle",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SkeletonRectangle",
          "declaration": {
            "name": "SkeletonRectangle",
            "module": "components/skeleton-rectangle/skeleton-rectangle.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-skeleton-rectangle",
          "declaration": {
            "name": "SkeletonRectangle",
            "module": "components/skeleton-rectangle/skeleton-rectangle.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/skeleton-text/skeleton-text.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "Use a skeleton text as a placeholder for titles or paragraphs.",
          "name": "SkeletonText",
          "members": [
            {
              "kind": "field",
              "name": "animation",
              "type": {
                "text": "WcsSkeletonAnimation"
              },
              "default": "'glide'",
              "description": "Specifies the animation of the skeleton"
            },
            {
              "kind": "field",
              "name": "height",
              "type": {
                "text": "'h1' | 'h2' | 'h3' | 'caption' | 'body'"
              },
              "default": "'body'",
              "description": "Specifies the line height of the text skeleton"
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "attributes": [
            {
              "name": "animation",
              "fieldName": "animation",
              "type": {
                "text": "WcsSkeletonAnimation"
              }
            },
            {
              "name": "height",
              "fieldName": "height",
              "type": {
                "text": "'h1' | 'h2' | 'h3' | 'caption' | 'body'"
              }
            }
          ],
          "tagName": "wcs-skeleton-text",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SkeletonText",
          "declaration": {
            "name": "SkeletonText",
            "module": "components/skeleton-text/skeleton-text.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-skeleton-text",
          "declaration": {
            "name": "SkeletonText",
            "module": "components/skeleton-text/skeleton-text.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/spinner/spinner-interface.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "components/spinner/spinner.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Spinner",
          "members": [
            {
              "kind": "field",
              "name": "mode",
              "type": {
                "text": "WcsSpinnerMode"
              },
              "default": "'border'",
              "description": "Indicates the spinner display mode.\r\nAccepted values: `border` or `growing`"
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "attributes": [
            {
              "name": "mode",
              "fieldName": "mode",
              "type": {
                "text": "WcsSpinnerMode"
              }
            }
          ],
          "tagName": "wcs-spinner",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Spinner",
          "declaration": {
            "name": "Spinner",
            "module": "components/spinner/spinner.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-spinner",
          "declaration": {
            "name": "Spinner",
            "module": "components/spinner/spinner.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/switch/switch-interface.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "components/switch/switch.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Switch",
          "members": [
            {
              "kind": "field",
              "name": "switchId",
              "privacy": "private",
              "default": "`wcs-switch-${switchIds++}`"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "name"
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If `true`, the switch is selected."
            },
            {
              "kind": "field",
              "name": "labelAlignment",
              "type": {
                "text": "SwitchLabelAlignment"
              },
              "default": "'center'",
              "description": "Specifie the alignment of the switch with the label content"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify wether the switch is disabled or not."
            },
            {
              "kind": "method",
              "name": "toggleChange",
              "parameters": [
                {
                  "name": "_event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setAriaAttribute",
              "parameters": [
                {
                  "name": "attr",
                  "type": {
                    "text": "AriaAttributeName"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "fieldName": "name"
            },
            {
              "name": "checked",
              "fieldName": "checked"
            },
            {
              "name": "label-alignment",
              "fieldName": "labelAlignment",
              "type": {
                "text": "SwitchLabelAlignment"
              }
            },
            {
              "name": "disabled",
              "fieldName": "disabled",
              "type": {
                "text": "boolean"
              }
            }
          ],
          "tagName": "wcs-switch",
          "events": [
            {
              "name": "wcsChange",
              "type": {
                "text": "EventEmitter<SwitchChangeEventDetail>"
              },
              "description": "Emitted when the checked property has changed."
            }
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Switch",
          "declaration": {
            "name": "Switch",
            "module": "components/switch/switch.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-switch",
          "declaration": {
            "name": "Switch",
            "module": "components/switch/switch.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/tab/tab.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "Tab content component.\r\nUse this component to specify the content of a component.",
          "name": "Tab",
          "members": [
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "string"
              },
              "description": "The header you want to be displayed for this tab."
            },
            {
              "kind": "field",
              "name": "itemKey",
              "type": {
                "text": "any"
              },
              "description": "The id of the tab. It should be unique."
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "attributes": [
            {
              "name": "header",
              "fieldName": "header",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "item-key",
              "fieldName": "itemKey",
              "type": {
                "text": "any"
              }
            }
          ],
          "tagName": "wcs-tab",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Tab",
          "declaration": {
            "name": "Tab",
            "module": "components/tab/tab.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-tab",
          "declaration": {
            "name": "Tab",
            "module": "components/tab/tab.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/tabs/tabs-interface.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "components/tabs/tabs.e2e.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "components/tabs/tabs.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "Tabs component to switch between tab content.\r\nUse in conjuction with `wcs-tab`.",
          "name": "Tabs",
          "cssProperties": [
            {
              "description": "Width of each tab",
              "name": "--wcs-tabs-width"
            },
            {
              "description": "Width of each tab",
              "name": "--wcs-tabs-padding-horizontal"
            },
            {
              "description": "Vertical padding",
              "name": "--wcs-tabs-padding-vertical"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "WcsTabsAlignment"
              },
              "default": "'start'",
              "description": "Tab headers alignment."
            },
            {
              "kind": "field",
              "name": "selectedIndex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Current selected tab index.\r\nStarts at 0."
            },
            {
              "kind": "field",
              "name": "selectedKey",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "headersOnly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to skip rendering the tabpanel with the content of the selected tab. Use this prop if you plan to\r\nseparately render the tab content."
            },
            {
              "kind": "field",
              "name": "gutter",
              "type": {
                "text": "boolean"
              },
              "description": "Determines if tabs header should have a border at the bottom"
            },
            {
              "kind": "field",
              "name": "description",
              "type": {
                "text": "string"
              },
              "description": "Description is used to provide aria-label for the tabs container which has `role=\"tablist\"`."
            },
            {
              "kind": "field",
              "name": "el",
              "type": {
                "text": "HTMLWcsTabsElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "headers",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "currentActiveTabIndex",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "tabsId",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "tabsId++"
            },
            {
              "kind": "method",
              "name": "selectedIndexChanged",
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectedTabkeyChanged",
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emitActiveTabChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateCurrentActiveIndexByTabKey",
              "privacy": "private",
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onTabLoaded"
            },
            {
              "kind": "method",
              "name": "putTabsInCorrectDivIfTheyAreNot",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                },
                {
                  "name": "tabIndex",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "refreshHeaders",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "tabs",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "selectTabAndEmitChangeEvent",
              "privacy": "private",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateTabVisibility",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "hideAllTabsContent",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "method",
              "name": "onTabsSlotChange",
              "privacy": "private",
              "description": "Observe when a new tab panel is added to the slot to let's handle accessibility properties for tabs panel:\r\n- id: to let header tab refers it proper panel\r\n- aria-label: take the same name as it's referenced header name"
            }
          ],
          "attributes": [
            {
              "name": "align",
              "fieldName": "align",
              "type": {
                "text": "WcsTabsAlignment"
              }
            },
            {
              "name": "selected-index",
              "fieldName": "selectedIndex",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "selected-key",
              "fieldName": "selectedKey",
              "type": {
                "text": "any"
              }
            },
            {
              "name": "headers-only",
              "fieldName": "headersOnly",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "gutter",
              "fieldName": "gutter",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "description",
              "fieldName": "description",
              "type": {
                "text": "string"
              }
            }
          ],
          "tagName": "wcs-tabs",
          "events": [
            {
              "name": "tabChange",
              "type": {
                "text": "EventEmitter<WcsTabChangeEvent>"
              },
              "description": "\r\nEmitted when the selected tab change."
            }
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Tabs",
          "declaration": {
            "name": "Tabs",
            "module": "components/tabs/tabs.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-tabs",
          "declaration": {
            "name": "Tabs",
            "module": "components/tabs/tabs.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/textarea/textarea-interface.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "components/textarea/textarea.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "Mainly inspired from Ionic Textarea Component",
          "name": "Textarea",
          "cssProperties": [
            {
              "description": "Max height of the text area component",
              "name": "--wcs-textarea-max-height"
            },
            {
              "description": "Padding left of the text area. Take in consideration the transparent border of 2px around the textarea.",
              "name": "--wcs-textarea-padding-left"
            },
            {
              "description": "Padding right of the text area. Take in consideration the transparent border of 2px around the textarea.",
              "name": "--wcs-textarea-padding-right"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "nativeInput",
              "type": {
                "text": "HTMLTextAreaElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "inputId",
              "privacy": "private",
              "default": "`wcs-textarea-${textareaIds++}`"
            },
            {
              "kind": "field",
              "name": "didBlurAfterEdit",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "inheritedAttributes",
              "type": {
                "text": "{ [k: string]: any }"
              },
              "privacy": "private",
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "el",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "autocapitalize",
              "type": {
                "text": "string"
              },
              "default": "'none'",
              "description": "Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user."
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This Boolean attribute lets you specify that a form control should have input focus when the page loads."
            },
            {
              "kind": "field",
              "name": "clearOnEdit",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `\"password\"`, `false` for all other types."
            },
            {
              "kind": "field",
              "name": "debounce",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Set the amount of time, in milliseconds, to wait to trigger the `wcsChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`."
            },
            {
              "kind": "method",
              "name": "debounceChanged",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If `true`, the user cannot interact with the textarea."
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string"
              },
              "description": "Name of the material icon to add to the input"
            },
            {
              "kind": "field",
              "name": "inputmode",
              "type": {
                "text": "'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search' | undefined"
              },
              "description": "A hint to the browser for which keyboard to display.\r\nPossible values: `\"none\"`, `\"text\"`, `\"tel\"`, `\"url\"`,\r\n`\"email\"`, `\"numeric\"`, `\"decimal\"`, and `\"search\"`."
            },
            {
              "kind": "field",
              "name": "enterkeyhint",
              "type": {
                "text": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send' | undefined"
              },
              "description": "A hint to the browser for which enter key to display.\r\nPossible values: `\"enter\"`, `\"done\"`, `\"go\"`, `\"next\"`,\r\n`\"previous\"`, `\"search\"`, and `\"send\"`."
            },
            {
              "kind": "field",
              "name": "maxlength",
              "type": {
                "text": "number | undefined"
              },
              "description": "If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter."
            },
            {
              "kind": "field",
              "name": "minlength",
              "type": {
                "text": "number | undefined"
              },
              "description": "If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter."
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the control, which is submitted with the form data."
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string | null | undefined"
              },
              "description": "Instructional text that shows before the input has a value."
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If `true`, the user cannot modify the value."
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If `true`, the user must fill in a value before submitting a form."
            },
            {
              "kind": "field",
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If `true`, the element will have its spelling and grammar checked."
            },
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "'initial' | 'error'"
              },
              "default": "'initial'",
              "description": "Specifies the state of the input. By default the input is in an initial state but you can set it to 'error' state if the data given by the user is not valid."
            },
            {
              "kind": "field",
              "name": "cols",
              "type": {
                "text": "number | undefined"
              },
              "description": "The visible width of the text control, in average character widths. If it is specified, it must be a positive integer."
            },
            {
              "kind": "field",
              "name": "rows",
              "type": {
                "text": "number | undefined"
              },
              "description": "The number of visible text lines for the control."
            },
            {
              "kind": "field",
              "name": "wrap",
              "type": {
                "text": "'hard' | 'soft' | 'off' | undefined"
              },
              "description": "Indicates how the control wraps text."
            },
            {
              "kind": "field",
              "name": "autoGrow",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If `true`, the element height will increase based on the value."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | null | undefined"
              },
              "default": "''",
              "description": "The value of the textarea."
            },
            {
              "kind": "field",
              "name": "resize",
              "type": {
                "text": "'both' | 'none' | 'vertical' | 'horizontal' | undefined"
              },
              "description": "Indicates how the textarea should be resizable.\r\nPossible values 'both' | 'none' | 'vertical' | 'horizontal'"
            },
            {
              "kind": "method",
              "name": "valueChanged",
              "privacy": "protected",
              "description": "Update the native input element when the value changes"
            },
            {
              "kind": "method",
              "name": "runAutoGrow",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setAriaAttribute",
              "parameters": [
                {
                  "name": "attr",
                  "type": {
                    "text": "AriaAttributeName"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "fitContent",
              "description": "This method make the textarea automatically adopt the size of the content without a scroll bar"
            },
            {
              "kind": "method",
              "name": "setFocus",
              "deprecated": "use the native focus method instead  \r\nSets focus on the native `textarea` in `wcs-textarea`."
            },
            {
              "kind": "method",
              "name": "getInputElement",
              "return": {
                "type": {
                  "text": "Promise<HTMLTextAreaElement>"
                }
              },
              "description": "Returns the native `<textarea>` element used under the hood."
            },
            {
              "kind": "method",
              "name": "checkClearOnEdit",
              "privacy": "private",
              "description": "Check if we need to clear the text input if clearOnEdit is enabled"
            },
            {
              "kind": "method",
              "name": "focusChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "hasValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "getValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "onInput",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "onFocus",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "onBlur",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "onKeyDown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "attributes": [
            {
              "name": "fire-focus-events",
              "fieldName": "fireFocusEvents"
            },
            {
              "name": "autocapitalize",
              "fieldName": "autocapitalize"
            },
            {
              "name": "autofocus",
              "fieldName": "autofocus"
            },
            {
              "name": "clear-on-edit",
              "fieldName": "clearOnEdit"
            },
            {
              "name": "debounce",
              "fieldName": "debounce"
            },
            {
              "name": "disabled",
              "fieldName": "disabled"
            },
            {
              "name": "icon",
              "fieldName": "icon",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "inputmode",
              "fieldName": "inputmode",
              "type": {
                "text": "'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'"
              }
            },
            {
              "name": "enterkeyhint",
              "fieldName": "enterkeyhint",
              "type": {
                "text": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
              }
            },
            {
              "name": "maxlength",
              "fieldName": "maxlength",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "minlength",
              "fieldName": "minlength",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "name",
              "fieldName": "name",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "placeholder",
              "fieldName": "placeholder",
              "type": {
                "text": "string | null"
              }
            },
            {
              "name": "readonly",
              "fieldName": "readonly"
            },
            {
              "name": "required",
              "fieldName": "required"
            },
            {
              "name": "spellcheck",
              "fieldName": "spellcheck"
            },
            {
              "name": "state",
              "fieldName": "state",
              "type": {
                "text": "'initial' | 'error'"
              }
            },
            {
              "name": "cols",
              "fieldName": "cols",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "rows",
              "fieldName": "rows",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "wrap",
              "fieldName": "wrap",
              "type": {
                "text": "'hard' | 'soft' | 'off'"
              }
            },
            {
              "name": "auto-grow",
              "fieldName": "autoGrow"
            },
            {
              "name": "value",
              "fieldName": "value",
              "type": {
                "text": "string | null"
              }
            },
            {
              "name": "resize",
              "fieldName": "resize",
              "type": {
                "text": "'both' | 'none' | 'vertical' | 'horizontal'"
              }
            }
          ],
          "tagName": "wcs-textarea",
          "events": [
            {
              "name": "wcsChange",
              "type": {
                "text": "EventEmitter<TextareaChangeEventDetail>"
              },
              "description": "Emitted when the input value has changed."
            },
            {
              "name": "wcsInput",
              "type": {
                "text": "EventEmitter<KeyboardEvent>"
              },
              "description": "Emitted when a keyboard input occurred."
            },
            {
              "name": "wcsBlur",
              "type": {
                "text": "EventEmitter<FocusEvent>"
              },
              "description": "Emitted when the input loses focus."
            },
            {
              "name": "wcsFocus",
              "type": {
                "text": "EventEmitter<FocusEvent>"
              },
              "description": "Emitted when the input has focus."
            }
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Textarea",
          "declaration": {
            "name": "Textarea",
            "module": "components/textarea/textarea.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-textarea",
          "declaration": {
            "name": "Textarea",
            "module": "components/textarea/textarea.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/tooltip/tooltip-interface.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "components/tooltip/tooltip.tsx",
      "declarations": [
        {
          "kind": "class",
          "description": "Tooltips are used to provide additional information for features available on the website. These can improve the user\r\nexperience or simply show additional information. Tooltips appear when the user rolls over or clicks on them\r\n(for longer content).\r\n\r\nNote that this component is based on the Tippy.js library : https://atomiks.github.io/tippyjs/",
          "name": "Tooltip",
          "members": [
            {
              "kind": "field",
              "name": "for",
              "type": {
                "text": "string"
              },
              "description": "The **id** of the element the tooltip's going to describe.\r\n\r\nThis property cannot be modified after initialization."
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "WcsTooltipPosition"
              },
              "default": "'bottom'",
              "description": "Where the tooltip is going to show relative to the element it's describing."
            },
            {
              "kind": "field",
              "name": "interactive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines if the tooltip has interactive content inside of it, so that it can be hovered over and clicked inside\r\nwithout hiding."
            },
            {
              "kind": "field",
              "name": "maxWidth",
              "type": {
                "text": "string | number"
              },
              "default": "350",
              "description": "Specifies the maximum width of the tooltip. Useful to prevent it from being too horizontally wide to read.\r\n\r\nIf the viewport's width is smaller than maxWidth, core CSS ensures the tippy remains smaller than the screen."
            },
            {
              "kind": "field",
              "name": "delay",
              "type": {
                "text": "number | [number, number]"
              },
              "default": "0",
              "description": "Delay in ms once a trigger event is fired before the tooltip shows or hides.\r\n\r\nYou can provide an array with two values to define a different duration for show and hide.\r\n\r\n`[showDelay, hideDelay]`\r\n\r\nUse null to use default value."
            },
            {
              "kind": "field",
              "name": "duration",
              "type": {
                "text": "number | [number, number]"
              },
              "default": "[300, 250]",
              "description": "Duration in ms of the transition animation."
            },
            {
              "kind": "field",
              "name": "trigger",
              "type": {
                "text": "string"
              },
              "default": "'mouseenter focus'",
              "description": "Determines the events that cause the tooltip to show. Multiple event names are separated by spaces.\r\n\r\nSee: https://atomiks.github.io/tippyjs/v6/all-props/#trigger"
            },
            {
              "kind": "field",
              "name": "theme",
              "type": {
                "text": "string"
              },
              "default": "'wcs'",
              "description": "Allows you to change the theme used by tippy.\r\n\r\nThe WCS theme is used by default and uses the WCS CSS variables.\r\n\r\nYou can create a theme by following this documentation and choosing a custom name :\r\nhttps://atomiks.github.io/tippyjs/v6/themes/"
            },
            {
              "kind": "field",
              "name": "content",
              "type": {
                "text": "string"
              },
              "description": "You can use this property instead of the slot API to affect content in the tooltip.\r\n\r\nThis makes it easier to manage the update if the tooltip contains elements that are not mutated when their\r\ncontent changes. Indeed, if the slot is used, the tooltip is updated only if the structure of the slotted DOM\r\nchanges (the DOM must be mutated).\r\n\r\nThe two APIs are not mutually exclusive, if both are filled in (the prop + the slot) the rendering will first\r\ndisplay the content of this property and then the slotted elements."
            },
            {
              "kind": "field",
              "name": "appendTo",
              "type": {
                "text": "WcsTooltipAppendTo"
              },
              "description": "The element to append the tooltip to. Default behaviour is `() => document.body`. If interactive: true,\r\nthe default behavior is appendTo: \"parent\"\r\n\r\nSee: https://atomiks.github.io/tippyjs/v6/all-props/#appendto"
            },
            {
              "kind": "field",
              "name": "el",
              "type": {
                "text": "HTMLWcsTooltipElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "tippyInstance",
              "type": {
                "text": "Instance<Props>"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getTooltipContentFromPropAndSlot",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateProps",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateTippyContent",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Programmatically hide the tooltip"
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Programmatically show the tooltip"
            },
            {
              "kind": "method",
              "name": "disable",
              "description": "Temporarily prevent the tooltip from showing or hiding"
            },
            {
              "kind": "method",
              "name": "enable",
              "description": "Re-enable a disabled tooltip"
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "attributes": [
            {
              "name": "for",
              "fieldName": "for",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "position",
              "fieldName": "position",
              "type": {
                "text": "WcsTooltipPosition"
              }
            },
            {
              "name": "interactive",
              "fieldName": "interactive",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "max-width",
              "fieldName": "maxWidth",
              "type": {
                "text": "string | number"
              }
            },
            {
              "name": "delay",
              "fieldName": "delay",
              "type": {
                "text": "number | [number, number]"
              }
            },
            {
              "name": "duration",
              "fieldName": "duration",
              "type": {
                "text": "number | [number, number]"
              }
            },
            {
              "name": "trigger",
              "fieldName": "trigger",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "theme",
              "fieldName": "theme",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "content",
              "fieldName": "content",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "append-to",
              "fieldName": "appendTo",
              "type": {
                "text": "WcsTooltipAppendTo"
              }
            }
          ],
          "tagName": "wcs-tooltip",
          "events": [],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Tooltip",
          "declaration": {
            "name": "Tooltip",
            "module": "components/tooltip/tooltip.tsx"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcs-tooltip",
          "declaration": {
            "name": "Tooltip",
            "module": "components/tooltip/tooltip.tsx"
          }
        }
      ]
    }
  ]
}
